!function(A) {
    function e(n) {
        if (t[n])
            return t[n].exports;
        var r = t[n] = {
            exports: {},
            id: n,
            loaded: !1
        };
        return A[n].call(r.exports, r, r.exports, e),
        r.loaded = !0,
        r.exports
    }
    var t = {};
    return e.m = A,
    e.c = t,
    e.p = "./",
    e(0)
}(function(A) {
    for (var e in A)
        if (Object.prototype.hasOwnProperty.call(A, e))
            switch (typeof A[e]) {
            case "function":
                break;
            case "object":
                A[e] = function(e) {
                    var t = e.slice(1)
                      , n = A[e[0]];
                    return function(A, e, r) {
                        n.apply(this, [A, e, r].concat(t))
                    }
                }(A[e]);
                break;
            default:
                A[e] = A[A[e]]
            }
    return A
}([function(A, e, t) {
    t(779),
    A.exports = t(423)
}
, function(A, e, t) {
    "use strict";
    A.exports = t(43)
}
, function(A, e, t) {
    (function(n) {
        function r() {
            return !("undefined" == typeof window || !window.process || "renderer" !== window.process.type) || ("undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
        }
        function o(A) {
            var t = this.useColors;
            if (A[0] = (t ? "%c" : "") + this.namespace + (t ? " %c" : " ") + A[0] + (t ? "%c " : " ") + "+" + e.humanize(this.diff),
            t) {
                var n = "color: " + this.color;
                A.splice(1, 0, n, "color: inherit");
                var r = 0
                  , o = 0;
                A[0].replace(/%[a-zA-Z%]/g, function(A) {
                    "%%" !== A && (r++,
                    "%c" === A && (o = r))
                }),
                A.splice(o, 0, n)
            }
        }
        function i() {
            return "object" == typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments)
        }
        function a(A) {
            try {
                null == A ? e.storage.removeItem("debug") : e.storage.debug = A
            } catch (A) {}
        }
        function u() {
            var A;
            try {
                A = e.storage.debug
            } catch (A) {}
            return !A && "undefined" != typeof n && "env"in n && (A = {
                NODE_ENV: "production",
                PUBLIC_URL: ".",
                REACT_APP_ASYNC_OBJECT_RETRIES: "10",
                REACT_APP_ASYNC_OBJECT_DELAY: "2000",
                REACT_APP_SKETCH_URL: "%PUBLIC_URL%/sketch/min/sketch-api.min.js",
                REACT_APP_ACTION_LOGGER: "false",
                REACT_APP_PERF_MIDDLEWARE: "false",
                REACT_APP_WHY_DID_YOU_UPDATE: "false",
                REACT_APP_FANCY_ANIMATIONS_MOBILE: "true",
                REACT_APP_FANCY_ANIMATIONS_DESKTOP: "true",
                REACT_APP_ONSCREEN_KEYBOARD_MOBILE: "true",
                REACT_APP_ONSCREEN_KEYBOARD_DESKTOP: "false",
                REACT_APP_CUSTOM_CURSORS_DESKTOP: "true",
                REACT_APP_CUSTOM_CURSORS_MOBILE: "false",
                REACT_APP_WAITING_OVERLAY_DELAY: "250",
                REACT_APP_TUTORIAL_URL: "https://youtu.be/bllO9Kx0MCI",
                REACT_APP_TUTORIAL_WINDOW_NAME: "ABCya-paint, learn it!",
                REACT_APP_TUTORIAL_WINDOW_FEATURES: "width=1024,height=768,centerscreen,menubar=off,toolbar=off",
                REACT_APP_INTRO_MOVIE_URL: "%PUBLIC_URL%/Loading-Logo.mp4",
                REACT_APP_EXPANSION_AMOUNT: "20",
                REACT_APP_EXPANSION_DELAY: "500",
                REACT_APP_EXPANSION_COUNT: "10"
            }.DEBUG),
            A
        }
        function l() {
            try {
                return window.localStorage
            } catch (A) {}
        }
        e = A.exports = t(444),
        e.log = i,
        e.formatArgs = o,
        e.save = a,
        e.load = u,
        e.useColors = r,
        e.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : l(),
        e.colors = ["lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson"],
        e.formatters.j = function(A) {
            try {
                return JSON.stringify(A)
            } catch (A) {
                return "[UnexpectedJSONParseError]: " + A.message
            }
        }
        ,
        e.enable(u())
    }
    ).call(e, t(39))
}
, function(A, e) {
    A.exports = {
        FATAL_ERROR: "FATAL_ERROR",
        APPLICATION_INIT: "APPLICATION_INIT",
        SKETCH_INIT: "SKETCH_INIT",
        SKETCH_DOCUMENT_INIT: "SKETCH_DOCUMENT_INIT",
        FINISH_SKETCH_DOCUMENT_INIT: "FINISH_SKETCH_DOCUMENT_INIT",
        TOGGLE_DIALOG: "TOGGLE_DIALOG",
        CLOSE_DIALOG: "CLOSE_DIALOG",
        NEW_DOCUMENT: "NEW_DOCUMENT",
        SAVE: "SAVE",
        FINISH_SAVE: "FINISH_SAVE",
        PRINT: "PRINT",
        IMPORT_BACKGROUND: "IMPORT_BACKGROUND",
        FINISH_IMPORT_BACKGROUND: "FINISH_IMPORT_BACKGROUND",
        WATCH_TUTORIAL: "WATCH_TUTORIAL",
        TOGGLE_MAIN_TRAY: "TOGGLE_MAIN_TRAY",
        CLOSE_MAIN_TRAY: "CLOSE_MAIN_TRAY",
        OPEN_EDITOR: "OPEN_EDITOR",
        CLOSE_EDITOR: "CLOSE_EDITOR",
        SET_TOOL: "SET_TOOL",
        SET_COLOR: "SET_COLOR",
        SET_NIB_SIZE: "SET_NIB_SIZE",
        SET_OPTION: "SET_OPTION",
        SET_CATEGORY: "SET_CATEGORY",
        ADD_STICKER: "ADD_STICKER",
        ADD_PAGE: "ADD_PAGE",
        ADD_TEXT: "ADD_TEXT",
        ADD_SPLAT: "ADD_SPLAT",
        SET_STICKER_PAGE: "SET_STICKER_PAGE",
        SET_COLORING_PAGES_PAGE: "SET_COLORING_PAGES_PAGE",
        UNDO: "UNDO",
        FINISH_UNDO: "FINISH_UNDO",
        REDO: "REDO",
        FINISH_REDO: "FINISH_REDO",
        DELETE_SELECTION: "DELETE_SELECTION",
        START_WAITING: "START_WAITING",
        STOP_WAITING: "STOP_WAITING",
        FINISH_SPLASH_SCREEN: "FINISH_SPLASH_SCREEN",
        UPDATE_HISTORY_TRAY: "UPDATE_HISTORY_TRAY",
        OPEN_OSK: "OPEN_OSK",
        FINISH_PREPARING_TOOL_ASSETS: "FINISH_PREPARING_TOOL_ASSETS",
        SET_PAGE: "SET_PAGE",
        SHOW_TOOLTIP: "SHOW_TOOLTIP",
        HIDE_TOOLTIP: "HIDE_TOOLTIP",
        INCREASE_CURSOR_HEIGHT: "INCREASE_CURSOR_HEIGHT",
        RESET_CURSOR_HEIGHT: "RESET_CURSOR_HEIGHT",
        START_SOUND: "START_SOUND",
        STOP_SOUND: "STOP_SOUND"
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(46);
    Object.defineProperty(e, "AsyncObject", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(371);
    Object.defineProperty(e, "Gesture", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(372);
    Object.defineProperty(e, "paintRoot", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(153);
    Object.defineProperty(e, "sketch", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(154);
    Object.defineProperty(e, "toolAssets", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n, o, i, a, u) {
        if (r(e),
        !A) {
            var l;
            if (void 0 === e)
                l = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
            else {
                var c = [t, n, o, i, a, u]
                  , s = 0;
                l = new Error(e.replace(/%s/g, function() {
                    return c[s++]
                })),
                l.name = "Invariant Violation"
            }
            throw l.framesToPop = 1,
            l
        }
    }
    var r = function(A) {};
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    e.__esModule = !0,
    e.connect = e.connectAdvanced = e.createProvider = e.Provider = void 0;
    var r = t(764)
      , o = n(r)
      , i = t(297)
      , a = n(i)
      , u = t(765)
      , l = n(u);
    e.Provider = o.default,
    e.createProvider = r.createProvider,
    e.connectAdvanced = a.default,
    e.connect = l.default
}
, function(A, e, t) {
    "use strict";
    var n = t(18)
      , r = n;
    A.exports = r
}
, function(A, e) {
    "use strict";
    function t(A) {
        for (var e = arguments.length - 1, t = "Minified React error #" + A + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=" + A, n = 0; n < e; n++)
            t += "&args[]=" + encodeURIComponent(arguments[n + 1]);
        t += " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
        var r = new Error(t);
        throw r.name = "Invariant Violation",
        r.framesToPop = 1,
        r
    }
    A.exports = t
}
, function(A, e, t) {
    A.exports = t(803)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , i = t(1)
      , a = n(i)
      , u = t(4)
      , l = t(68)
      , c = n(l)
      , s = t(102)
      , p = n(s)
      , f = new Map
      , g = function() {
        function A(e) {
            var t = e.tool
              , n = e.toolSound
              , o = e.sketchTool
              , i = e.toolIcon
              , a = e.tooltip
              , u = e.Editor;
            r(this, A),
            this.tool = t,
            this.sketchTool = o,
            this.tooltip = a,
            this.toolIcon = i,
            this.toolSound = n || "click",
            this.Editor = u,
            (0,
            c.default)(this, ["use", "updateSketch", "ToolButton", "soundButtons"]),
            f.set(t, this)
        }
        return o(A, null, [{
            key: "byName",
            value: function(A) {
                if (!f.has(A))
                    throw new Error('Unknown tool "' + A + '"');
                return f.get(A)
            }
        }]),
        o(A, [{
            key: "use",
            value: function() {
                var A = this;
                return u.sketch.await().then(function(e) {
                    return e.exec(A.sketchTool)
                }).then(this.updateSketch)
            }
        }, {
            key: "updateSketch",
            value: function() {
                return u.sketch.await().then(function(A) {
                    return A.doc.toolkit.reload()
                })
            }
        }, {
            key: "cursorAttributes",
            value: function() {}
        }, {
            key: "soundButtons",
            value: function() {
                return {}
            }
        }, {
            key: "canvasSound",
            value: function() {
                return this.tool
            }
        }, {
            key: "capturesInput",
            value: function() {
                return !1
            }
        }, {
            key: "handleInputEvent",
            value: function(A) {}
        }, {
            key: "ToolButton",
            value: function(A) {
                return a.default.createElement(p.default, Object.assign({}, A, {
                    tool: this.tool,
                    tooltip: this.tooltip,
                    iconURL: this.toolIcon
                }))
            }
        }]),
        A
    }();
    e.default = g
}
, function(A, e) {
    "use strict";
    function t(A) {
        if (null === A || void 0 === A)
            throw new TypeError("Object.assign cannot be called with null or undefined");
        return Object(A)
    }
    function n() {
        try {
            if (!Object.assign)
                return !1;
            var A = new String("abc");
            if (A[5] = "de",
            "5" === Object.getOwnPropertyNames(A)[0])
                return !1;
            for (var e = {}, t = 0; t < 10; t++)
                e["_" + String.fromCharCode(t)] = t;
            var n = Object.getOwnPropertyNames(e).map(function(A) {
                return e[A]
            });
            if ("0123456789" !== n.join(""))
                return !1;
            var r = {};
            return "abcdefghijklmnopqrst".split("").forEach(function(A) {
                r[A] = A
            }),
            "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, r)).join("")
        } catch (A) {
            return !1
        }
    }
    var r = Object.getOwnPropertySymbols
      , o = Object.prototype.hasOwnProperty
      , i = Object.prototype.propertyIsEnumerable;
    A.exports = n() ? Object.assign : function(A, e) {
        for (var n, a, u = t(A), l = 1; l < arguments.length; l++) {
            n = Object(arguments[l]);
            for (var c in n)
                o.call(n, c) && (u[c] = n[c]);
            if (r) {
                a = r(n);
                for (var s = 0; s < a.length; s++)
                    i.call(n, a[s]) && (u[a[s]] = n[a[s]])
            }
        }
        return u
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(51);
    Object.defineProperty(e, "classnames", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(417);
    Object.defineProperty(e, "makeCancelable", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(418);
    Object.defineProperty(e, "padWith", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(419);
    Object.defineProperty(e, "partition", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(420);
    Object.defineProperty(e, "safeModulo", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(421);
    Object.defineProperty(e, "stopEvent", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(106);
    Object.defineProperty(e, "toList", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    });
    var s = t(422);
    Object.defineProperty(e, "within", {
        enumerable: !0,
        get: function() {
            return n(s).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        return 1 === A.nodeType && A.getAttribute(g) === String(e) || 8 === A.nodeType && A.nodeValue === " react-text: " + e + " " || 8 === A.nodeType && A.nodeValue === " react-empty: " + e + " "
    }
    function r(A) {
        for (var e; e = A._renderedComponent; )
            A = e;
        return A
    }
    function o(A, e) {
        var t = r(A);
        t._hostNode = e,
        e[d] = t
    }
    function i(A) {
        var e = A._hostNode;
        e && (delete e[d],
        A._hostNode = null)
    }
    function a(A, e) {
        if (!(A._flags & I.hasCachedChildNodes)) {
            var t = A._renderedChildren
              , i = e.firstChild;
            A: for (var a in t)
                if (t.hasOwnProperty(a)) {
                    var u = t[a]
                      , l = r(u)._domID;
                    if (0 !== l) {
                        for (; null !== i; i = i.nextSibling)
                            if (n(i, l)) {
                                o(u, i);
                                continue A
                            }
                        s("32", l)
                    }
                }
            A._flags |= I.hasCachedChildNodes
        }
    }
    function u(A) {
        if (A[d])
            return A[d];
        for (var e = []; !A[d]; ) {
            if (e.push(A),
            !A.parentNode)
                return null;
            A = A.parentNode
        }
        for (var t, n; A && (n = A[d]); A = e.pop())
            t = n,
            e.length && a(n, A);
        return t
    }
    function l(A) {
        var e = u(A);
        return null != e && e._hostNode === A ? e : null
    }
    function c(A) {
        if (void 0 === A._hostNode ? s("33") : void 0,
        A._hostNode)
            return A._hostNode;
        for (var e = []; !A._hostNode; )
            e.push(A),
            A._hostParent ? void 0 : s("34"),
            A = A._hostParent;
        for (; e.length; A = e.pop())
            a(A, A._hostNode);
        return A._hostNode
    }
    var s = t(8)
      , p = t(41)
      , f = t(277)
      , g = (t(5),
    p.ID_ATTRIBUTE_NAME)
      , I = f
      , d = "__reactInternalInstance$" + Math.random().toString(36).slice(2)
      , q = {
        getClosestInstanceFromNode: u,
        getInstanceFromNode: l,
        getNodeFromInstance: c,
        precacheChildNodes: a,
        precacheNode: o,
        uncacheNode: i
    };
    A.exports = q
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(84);
    Object.defineProperty(e, "take", {
        enumerable: !0,
        get: function() {
            return n.take
        }
    }),
    Object.defineProperty(e, "takem", {
        enumerable: !0,
        get: function() {
            return n.takem
        }
    }),
    Object.defineProperty(e, "put", {
        enumerable: !0,
        get: function() {
            return n.put
        }
    }),
    Object.defineProperty(e, "race", {
        enumerable: !0,
        get: function() {
            return n.race
        }
    }),
    Object.defineProperty(e, "call", {
        enumerable: !0,
        get: function() {
            return n.call
        }
    }),
    Object.defineProperty(e, "apply", {
        enumerable: !0,
        get: function() {
            return n.apply
        }
    }),
    Object.defineProperty(e, "cps", {
        enumerable: !0,
        get: function() {
            return n.cps
        }
    }),
    Object.defineProperty(e, "fork", {
        enumerable: !0,
        get: function() {
            return n.fork
        }
    }),
    Object.defineProperty(e, "spawn", {
        enumerable: !0,
        get: function() {
            return n.spawn
        }
    }),
    Object.defineProperty(e, "join", {
        enumerable: !0,
        get: function() {
            return n.join
        }
    }),
    Object.defineProperty(e, "cancel", {
        enumerable: !0,
        get: function() {
            return n.cancel
        }
    }),
    Object.defineProperty(e, "select", {
        enumerable: !0,
        get: function() {
            return n.select
        }
    }),
    Object.defineProperty(e, "actionChannel", {
        enumerable: !0,
        get: function() {
            return n.actionChannel
        }
    }),
    Object.defineProperty(e, "cancelled", {
        enumerable: !0,
        get: function() {
            return n.cancelled
        }
    }),
    Object.defineProperty(e, "flush", {
        enumerable: !0,
        get: function() {
            return n.flush
        }
    }),
    Object.defineProperty(e, "getContext", {
        enumerable: !0,
        get: function() {
            return n.getContext
        }
    }),
    Object.defineProperty(e, "setContext", {
        enumerable: !0,
        get: function() {
            return n.setContext
        }
    }),
    Object.defineProperty(e, "takeEvery", {
        enumerable: !0,
        get: function() {
            return n.takeEvery
        }
    }),
    Object.defineProperty(e, "takeLatest", {
        enumerable: !0,
        get: function() {
            return n.takeLatest
        }
    }),
    Object.defineProperty(e, "throttle", {
        enumerable: !0,
        get: function() {
            return n.throttle
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        if (Array.isArray(A)) {
            for (var e = 0, t = Array(A.length); e < A.length; e++)
                t[e] = A[e];
            return t
        }
        return Array.from(A)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(314)
      , i = t(259)
      , a = n(i)
      , u = t(793)
      , l = n(u)
      , c = t(340)
      , s = t(148)
      , p = n(s);
    e.default = (0,
    o.createStore)((0,
    l.default)(c.mainReducer, c.dialogReducer, c.waitingReducer, c.textReducer, c.historyReducer, c.tooltipReducer, c.cursorReducer), a.default, o.applyMiddleware.apply(void 0, r(p.default)))
}
, function(A, e) {
    "use strict";
    var t = !("undefined" == typeof window || !window.document || !window.document.createElement)
      , n = {
        canUseDOM: t,
        canUseWorkers: "undefined" != typeof Worker,
        canUseEventListeners: t && !(!window.addEventListener && !window.attachEvent),
        canUseViewport: t && !!window.screen,
        isInWorker: !t
    };
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(1)
      , i = n(o)
      , a = t(33)
      , u = t(12)
      , l = t(50)
      , c = n(l)
      , s = function(A) {
        var e = A.type
          , t = A.scaleFrom
          , n = void 0 === t ? 1 : t
          , o = A.scaleTo
          , l = void 0 === o ? 1 : o
          , s = A.children
          , p = r(A, ["type", "scaleFrom", "scaleTo", "children"])
          , f = (0,
        u.classnames)(e, "Layer");
        return c.default ? i.default.createElement(a.Motion, {
            defaultStyle: {
                scaleY: n
            },
            style: {
                scaleY: (0,
                a.spring)(l, a.presets.wobbly)
            }
        }, function(A) {
            var e = A.scaleY;
            return i.default.createElement("div", Object.assign({
                className: f,
                style: {
                    transform: "scaleY(" + e + ")"
                }
            }, p), s)
        }) : i.default.createElement("div", Object.assign({
            className: f
        }, p), s)
    };
    e.default = s
}
, function(A, e) {
    "use strict";
    function t(A) {
        return function() {
            return A
        }
    }
    var n = function() {};
    n.thatReturns = t,
    n.thatReturnsFalse = t(!1),
    n.thatReturnsTrue = t(!0),
    n.thatReturnsNull = t(null),
    n.thatReturnsThis = function() {
        return this
    }
    ,
    n.thatReturnsArgument = function(A) {
        return A
    }
    ,
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    var n = null;
    A.exports = {
        debugTool: n
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , l = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , c = t(1)
      , s = n(c)
      , p = t(75)
      , f = n(p)
      , g = t(63)
      , I = n(g)
      , d = t(12)
      , q = t(4)
      , C = t(2)
      , m = n(C)
      , y = (0,
    m.default)("ABCya-paint:src/components/regions/ClickRegion.js")
      , h = function(A) {
        function e(A) {
            o(this, e);
            var t = i(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                isHovering: !1,
                isPressed: !1
            },
            t
        }
        return a(e, A),
        l(e, [{
            key: "componentDidMount",
            value: function() {
                var A = this
                  , t = f.default.findDOMNode(this);
                y("Mounted; attaching gestures to %o", t),
                this.gestureAction = (0,
                d.makeCancelable)(q.AsyncObject.waitFor(q.Gesture, q.sketch).then(function(n) {
                    var r = u(n, 2)
                      , o = r[0];
                    r[1];
                    o.on(t, "mouseover", function(t) {
                        e.activeRegion || A.setState({
                            isHovering: !0
                        })
                    }),
                    o.on(t, "mouseleave", function(e) {
                        for (var n = function(A) {
                            var e = t.children[A]
                              , n = getComputedStyle(e)
                              , r = n.getPropertyValue("transform");
                            e.style.transform = r,
                            e.style.transition = "transform 300ms",
                            setTimeout(function() {
                                return e.style.transform = "scale3d(1, 1, 1)"
                            }, 0);
                            var o = function A() {
                                e.style.transform = "",
                                e.style.transition = "",
                                e.removeEventListener("transitionend", A)
                            };
                            e.addEventListener("transitionend", o)
                        }, r = 0; r < t.children.length; r += 1)
                            n(r);
                        A.setState({
                            isHovering: !1
                        })
                    }),
                    o.on(t, "drag", function(n) {
                        e.activeRegion = A;
                        var r = o.asPageXY(n)
                          , i = t.getBoundingClientRect()
                          , a = (0,
                        d.within)(r, i);
                        A.state.isPressed !== a && A.setState({
                            isPressed: a
                        }),
                        "end" === n.state && (e.activeRegion = null,
                        A.state.isPressed !== !1 && A.setState({
                            isPressed: !1
                        }),
                        a && (n.env.alreadyRun || (n.env.alreadyRun = !0,
                        y("Executing attached input handler"),
                        n.prevent(),
                        A.props.isDisabled || A.props.onClick && A.props.onClick())))
                    })
                })),
                this.gestureAction.promise.catch(function(A) {
                    A.isCanceled || y("Something happened while attaching gesture handlers: %j", A)
                })
            }
        }, {
            key: "componentWillUnmount",
            value: function() {
                y("Unmounting, for some reason"),
                this.gestureAction.cancel()
            }
        }, {
            key: "render",
            value: function() {
                var A = this.props
                  , e = A.type
                  , t = (A.onClick,
                A.isActive)
                  , n = void 0 !== t && t
                  , o = A.isDisabled
                  , i = void 0 !== o && o
                  , a = A.children
                  , u = r(A, ["type", "onClick", "isActive", "isDisabled", "children"])
                  , l = [e, "ClickRegion", {
                    "ClickRegion--pressed": this.state.isPressed && !i
                }, {
                    "ClickRegion--hovering": this.state.isHovering && !i || n
                }];
                return s.default.createElement(I.default, Object.assign({
                    type: l
                }, u), a)
            }
        }]),
        e
    }(c.PureComponent);
    h.activeRegion = null,
    e.default = h
}
, function(A, e) {
    "use strict";
    function t(A, e, t) {
        var n = A[e].bind(A);
        A[e] = t.bind(A, n)
    }
    function n(A, e) {
        if (A) {
            Array.isArray(A) || (A = Array.from(A));
            for (var t in A)
                e(A[t], t)
        }
    }
    function r(A, e) {
        var t = [];
        return n(A, function(A) {
            e(A) && t.push(A)
        }),
        t
    }
    function o(A, e) {
        var t = [];
        return n(A, function(A) {
            t.push(e(A))
        }),
        t
    }
    function i(A) {
        return !isNaN(parseFloat(A)) && isFinite(A)
    }
    function a(A, e, t, n, r) {
        return (A - e) * ((r - n) / (t - e)) + n
    }
    function u(A, e, t) {
        var n = e < t ? [e, t] : [t, e]
          , r = l(n, 2);
        return e = r[0],
        t = r[1],
        Math.min(t, Math.max(e, A))
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var l = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }();
    e.wrap = t,
    e.forEach = n,
    e.filter = r,
    e.map = o,
    e.isNumber = i,
    e.scale = a,
    e.clamp = u;
    var c = e.fn = {
        filter: function(A, e) {
            var t = [];
            return n(A, function(A, n) {
                e(n, A) && t.push(n)
            }),
            t
        },
        map: function(A, e) {
            var t = [];
            return n(A, function(A, n) {
                t.push(e(n, A))
            }),
            t
        },
        scale: function(A, e, t, n, r) {
            return (A - e) * ((r - n) / (t - e)) + n
        },
        clamp: function(A, e, t) {
            var n = e < t ? [e, t] : [t, e]
              , r = l(n, 2);
            return e = r[0],
            t = r[1],
            Math.min(t, Math.max(e, A))
        }
    };
    window.fn = c
}
, function(A, e, t) {
    "use strict";
    function n() {
        b.ReactReconcileTransaction && h ? void 0 : c("123")
    }
    function r() {
        this.reinitializeTransaction(),
        this.dirtyComponentsLength = null,
        this.callbackQueue = p.getPooled(),
        this.reconcileTransaction = b.ReactReconcileTransaction.getPooled(!0)
    }
    function o(A, e, t, r, o, i) {
        return n(),
        h.batchedUpdates(A, e, t, r, o, i)
    }
    function i(A, e) {
        return A._mountOrder - e._mountOrder
    }
    function a(A) {
        var e = A.dirtyComponentsLength;
        e !== q.length ? c("124", e, q.length) : void 0,
        q.sort(i),
        C++;
        for (var t = 0; t < e; t++) {
            var n = q[t]
              , r = n._pendingCallbacks;
            n._pendingCallbacks = null;
            var o;
            if (g.logTopLevelRenders) {
                var a = n;
                n._currentElement.type.isReactTopLevelWrapper && (a = n._renderedComponent),
                o = "React update: " + a.getName(),
                console.time(o)
            }
            if (I.performUpdateIfNecessary(n, A.reconcileTransaction, C),
            o && console.timeEnd(o),
            r)
                for (var u = 0; u < r.length; u++)
                    A.callbackQueue.enqueue(r[u], n.getPublicInstance())
        }
    }
    function u(A) {
        return n(),
        h.isBatchingUpdates ? (q.push(A),
        void (null == A._updateBatchNumber && (A._updateBatchNumber = C + 1))) : void h.batchedUpdates(u, A)
    }
    function l(A, e) {
        h.isBatchingUpdates ? void 0 : c("125"),
        m.enqueue(A, e),
        y = !0
    }
    var c = t(8)
      , s = t(11)
      , p = t(275)
      , f = t(32)
      , g = t(280)
      , I = t(42)
      , d = t(78)
      , q = (t(5),
    [])
      , C = 0
      , m = p.getPooled()
      , y = !1
      , h = null
      , M = {
        initialize: function() {
            this.dirtyComponentsLength = q.length
        },
        close: function() {
            this.dirtyComponentsLength !== q.length ? (q.splice(0, this.dirtyComponentsLength),
            S()) : q.length = 0
        }
    }
      , V = {
        initialize: function() {
            this.callbackQueue.reset()
        },
        close: function() {
            this.callbackQueue.notifyAll()
        }
    }
      , E = [M, V];
    s(r.prototype, d, {
        getTransactionWrappers: function() {
            return E
        },
        destructor: function() {
            this.dirtyComponentsLength = null,
            p.release(this.callbackQueue),
            this.callbackQueue = null,
            b.ReactReconcileTransaction.release(this.reconcileTransaction),
            this.reconcileTransaction = null
        },
        perform: function(A, e, t) {
            return d.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, A, e, t)
        }
    }),
    f.addPoolingTo(r);
    var S = function() {
        for (; q.length || y; ) {
            if (q.length) {
                var A = r.getPooled();
                A.perform(a, null, A),
                r.release(A)
            }
            if (y) {
                y = !1;
                var e = m;
                m = p.getPooled(),
                e.notifyAll(),
                p.release(e)
            }
        }
    }
      , k = {
        injectReconcileTransaction: function(A) {
            A ? void 0 : c("126"),
            b.ReactReconcileTransaction = A
        },
        injectBatchingStrategy: function(A) {
            A ? void 0 : c("127"),
            "function" != typeof A.batchedUpdates ? c("128") : void 0,
            "boolean" != typeof A.isBatchingUpdates ? c("129") : void 0,
            h = A
        }
    }
      , b = {
        ReactReconcileTransaction: null,
        batchedUpdates: o,
        enqueueUpdate: u,
        flushBatchedUpdates: S,
        injection: k,
        asap: l
    };
    A.exports = b
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(425);
    Object.defineProperty(e, "Balloon", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(108);
    Object.defineProperty(e, "Pencil", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(180);
    Object.defineProperty(e, "TileBrush", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(181);
    Object.defineProperty(e, "TintableTexture", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(10);
    Object.defineProperty(e, "Tool", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(66);
    Object.defineProperty(e, "activeTool", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(426);
    Object.defineProperty(e, "bucket", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    });
    var s = t(427);
    Object.defineProperty(e, "coloring_pages", {
        enumerable: !0,
        get: function() {
            return n(s).default
        }
    });
    var p = t(428);
    Object.defineProperty(e, "eachTool", {
        enumerable: !0,
        get: function() {
            return n(p).default
        }
    });
    var f = t(429);
    Object.defineProperty(e, "eraser", {
        enumerable: !0,
        get: function() {
            return n(f).default
        }
    });
    var g = t(430);
    Object.defineProperty(e, "magic_brush", {
        enumerable: !0,
        get: function() {
            return n(g).default
        }
    });
    var I = t(431);
    Object.defineProperty(e, "mirror_brush", {
        enumerable: !0,
        get: function() {
            return n(I).default
        }
    });
    var d = t(432);
    Object.defineProperty(e, "pattern_brush", {
        enumerable: !0,
        get: function() {
            return n(d).default
        }
    });
    var q = t(433);
    Object.defineProperty(e, "roller", {
        enumerable: !0,
        get: function() {
            return n(q).default
        }
    });
    var C = t(182);
    Object.defineProperty(e, "select", {
        enumerable: !0,
        get: function() {
            return n(C).default
        }
    });
    var m = t(434);
    Object.defineProperty(e, "shapes", {
        enumerable: !0,
        get: function() {
            return n(m).default
        }
    });
    var y = t(435);
    Object.defineProperty(e, "solid_brush", {
        enumerable: !0,
        get: function() {
            return n(y).default
        }
    });
    var h = t(436);
    Object.defineProperty(e, "splat", {
        enumerable: !0,
        get: function() {
            return n(h).default
        }
    });
    var M = t(437);
    Object.defineProperty(e, "spraycan", {
        enumerable: !0,
        get: function() {
            return n(M).default
        }
    });
    var V = t(438);
    Object.defineProperty(e, "stamp", {
        enumerable: !0,
        get: function() {
            return n(V).default
        }
    });
    var E = t(439);
    Object.defineProperty(e, "stickers", {
        enumerable: !0,
        get: function() {
            return n(E).default
        }
    });
    var S = t(183);
    Object.defineProperty(e, "text", {
        enumerable: !0,
        get: function() {
            return n(S).default
        }
    });
    var k = t(440);
    Object.defineProperty(e, "translucent_brush", {
        enumerable: !0,
        get: function() {
            return n(k).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(114);
    Object.defineProperty(e, "MIDI", {
        enumerable: !0,
        get: function() {
            return n.MIDI
        }
    });
    var r = t(265);
    Object.defineProperty(e, "sounds", {
        enumerable: !0,
        get: function() {
            return r.sounds
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        this.dispatchConfig = A,
        this._targetInst = e,
        this.nativeEvent = t;
        var r = this.constructor.Interface;
        for (var o in r)
            if (r.hasOwnProperty(o)) {
                var a = r[o];
                a ? this[o] = a(t) : "target" === o ? this.target = n : this[o] = t[o]
            }
        var u = null != t.defaultPrevented ? t.defaultPrevented : t.returnValue === !1;
        return u ? this.isDefaultPrevented = i.thatReturnsTrue : this.isDefaultPrevented = i.thatReturnsFalse,
        this.isPropagationStopped = i.thatReturnsFalse,
        this
    }
    var r = t(11)
      , o = t(32)
      , i = t(18)
      , a = (t(7),
    "function" == typeof Proxy,
    ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"])
      , u = {
        type: null,
        target: null,
        currentTarget: i.thatReturnsNull,
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function(A) {
            return A.timeStamp || Date.now()
        },
        defaultPrevented: null,
        isTrusted: null
    };
    r(n.prototype, {
        preventDefault: function() {
            this.defaultPrevented = !0;
            var A = this.nativeEvent;
            A && (A.preventDefault ? A.preventDefault() : "unknown" != typeof A.returnValue && (A.returnValue = !1),
            this.isDefaultPrevented = i.thatReturnsTrue)
        },
        stopPropagation: function() {
            var A = this.nativeEvent;
            A && (A.stopPropagation ? A.stopPropagation() : "unknown" != typeof A.cancelBubble && (A.cancelBubble = !0),
            this.isPropagationStopped = i.thatReturnsTrue)
        },
        persist: function() {
            this.isPersistent = i.thatReturnsTrue
        },
        isPersistent: i.thatReturnsFalse,
        destructor: function() {
            var A = this.constructor.Interface;
            for (var e in A)
                this[e] = null;
            for (var t = 0; t < a.length; t++)
                this[a[t]] = null
        }
    }),
    n.Interface = u,
    n.augmentClass = function(A, e) {
        var t = this
          , n = function() {};
        n.prototype = t.prototype;
        var i = new n;
        r(i, A.prototype),
        A.prototype = i,
        A.prototype.constructor = A,
        A.Interface = r({}, t.Interface, e),
        A.augmentClass = t.augmentClass,
        o.addPoolingTo(A, o.fourArgumentPooler)
    }
    ,
    o.addPoolingTo(n, o.fourArgumentPooler),
    A.exports = n
}
, function(A, e) {
    "use strict";
    var t = {
        current: null
    };
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function r(A, e, t) {
        if (!e(A))
            throw f("error", "uncaught at check", t),
            new Error(t)
    }
    function o(A, e) {
        return k.notUndef(A) && S.call(A, e)
    }
    function i(A, e) {
        var t = A.indexOf(e);
        t >= 0 && A.splice(t, 1)
    }
    function a() {
        var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
          , e = d({}, A)
          , t = new Promise(function(A, t) {
            e.resolve = A,
            e.reject = t
        }
        );
        return e.promise = t,
        e
    }
    function u(A) {
        for (var e = [], t = 0; t < A; t++)
            e.push(a());
        return e
    }
    function l(A) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
          , t = void 0
          , n = new Promise(function(n) {
            t = setTimeout(function() {
                return n(e)
            }, A)
        }
        );
        return n[h] = function() {
            return clearTimeout(t)
        }
        ,
        n
    }
    function c() {
        var A, e = !0, t = void 0, r = void 0;
        return A = {},
        n(A, m, !0),
        n(A, "isRunning", function() {
            return e
        }),
        n(A, "result", function() {
            return t
        }),
        n(A, "error", function() {
            return r
        }),
        n(A, "setRunning", function(A) {
            return e = A
        }),
        n(A, "setResult", function(A) {
            return t = A
        }),
        n(A, "setError", function(A) {
            return r = A
        }),
        A
    }
    function s() {
        var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        return function() {
            return ++A
        }
    }
    function p(A) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : b
          , t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : ""
          , n = arguments[3]
          , r = {
            name: t,
            next: A,
            throw: e,
            return: v
        };
        return n && (r[y] = !0),
        "undefined" != typeof Symbol && (r[Symbol.iterator] = function() {
            return r
        }
        ),
        r
    }
    function f(A, e) {
        var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
        "undefined" == typeof window ? console.log("redux-saga " + A + ": " + e + "\n" + (t && t.stack || t)) : console[A](e, t)
    }
    function g(A, e) {
        return function() {
            return E && f("warn", e),
            A.apply(void 0, arguments)
        }
    }
    function I(A) {
        return function(e) {
            var t = Object.defineProperty(e, M, {
                value: !0
            });
            return A(t)
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var d = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
      , q = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(A) {
        return typeof A
    }
    : function(A) {
        return A && "function" == typeof Symbol && A.constructor === Symbol && A !== Symbol.prototype ? "symbol" : typeof A
    }
    ;
    e.check = r,
    e.hasOwn = o,
    e.remove = i,
    e.deferred = a,
    e.arrayOfDeffered = u,
    e.delay = l,
    e.createMockTask = c,
    e.autoInc = s,
    e.makeIterator = p,
    e.log = f,
    e.deprecate = g,
    e.wrapSagaDispatch = I;
    var C = e.sym = function(A) {
        return "@@redux-saga/" + A
    }
      , m = e.TASK = C("TASK")
      , y = e.HELPER = C("HELPER")
      , h = (e.MATCH = C("MATCH"),
    e.CANCEL = C("cancelPromise"))
      , M = e.SAGA_ACTION = C("SAGA_ACTION")
      , V = (e.SELF_CANCELLATION = C("SELF_CANCELLATION"),
    e.konst = function(A) {
        return function() {
            return A
        }
    }
    )
      , E = (e.kTrue = V(!0),
    e.kFalse = V(!1),
    e.noop = function() {}
    ,
    e.ident = function(A) {
        return A
    }
    ,
    e.isDev = !1)
      , S = Object.prototype.hasOwnProperty
      , k = e.is = {
        undef: function(A) {
            return null === A || void 0 === A
        },
        notUndef: function(A) {
            return null !== A && void 0 !== A
        },
        func: function(A) {
            return "function" == typeof A
        },
        number: function(A) {
            return "number" == typeof A
        },
        string: function(A) {
            return "string" == typeof A
        },
        array: Array.isArray,
        object: function(A) {
            return A && !k.array(A) && "object" === ("undefined" == typeof A ? "undefined" : q(A))
        },
        promise: function(A) {
            return A && k.func(A.then)
        },
        iterator: function(A) {
            return A && k.func(A.next) && k.func(A.throw)
        },
        iterable: function(A) {
            return A && k.func(Symbol) ? k.func(A[Symbol.iterator]) : k.array(A)
        },
        task: function(A) {
            return A && A[m]
        },
        observable: function(A) {
            return A && k.func(A.subscribe)
        },
        buffer: function(A) {
            return A && k.func(A.isEmpty) && k.func(A.take) && k.func(A.put)
        },
        pattern: function(A) {
            return A && (k.string(A) || "symbol" === ("undefined" == typeof A ? "undefined" : q(A)) || k.func(A) || k.array(A))
        },
        channel: function(A) {
            return A && k.func(A.take) && k.func(A.close)
        },
        helper: function(A) {
            return A && A[y]
        },
        stringableFunc: function(A) {
            return k.func(A) && o(A, "toString")
        }
    }
      , b = (e.object = {
        assign: function(A, e) {
            for (var t in e)
                o(e, t) && (A[t] = e[t])
        }
    },
    e.uid = s(),
    function(A) {
        throw A
    }
    )
      , v = function(A) {
        return {
            value: A,
            done: !0
        }
    };
    e.internalErr = function(A) {
        return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: " + A + "\n")
    }
    ,
    e.createSetContextWarning = function(A, e) {
        return (A ? A + "." : "") + "setContext(props): argument " + e + " is not a plain object"
    }
}
, function(A, e) {
    var t = Array.isArray;
    A.exports = t
}
, function(A, e, t) {
    A.exports = t(685)()
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(104)
      , s = n(c)
      , p = t(401)
      , f = n(p)
      , g = t(103)
      , I = n(g)
      , d = t(100)
      , q = n(d)
      , C = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                var A = this.props
                  , e = A.editorIcon
                  , t = A.category
                  , n = A.showNibSize
                  , r = void 0 === n || n
                  , o = A.showColorPicker
                  , i = void 0 === o || o
                  , a = l.default.createElement(I.default, null);
                return i || (a = l.default.createElement(q.default, null)),
                l.default.createElement(s.default, {
                    editorIcon: e,
                    category: t
                }, r && l.default.createElement(f.default, null), a)
            }
        }]),
        e
    }(u.PureComponent);
    e.default = C
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        try {
            return JSON.parse({
                NODE_ENV: "production",
                PUBLIC_URL: ".",
                REACT_APP_ASYNC_OBJECT_RETRIES: "10",
                REACT_APP_ASYNC_OBJECT_DELAY: "2000",
                REACT_APP_SKETCH_URL: "%PUBLIC_URL%/sketch/min/sketch-api.min.js",
                REACT_APP_ACTION_LOGGER: "false",
                REACT_APP_PERF_MIDDLEWARE: "false",
                REACT_APP_WHY_DID_YOU_UPDATE: "false",
                REACT_APP_FANCY_ANIMATIONS_MOBILE: "true",
                REACT_APP_FANCY_ANIMATIONS_DESKTOP: "true",
                REACT_APP_ONSCREEN_KEYBOARD_MOBILE: "true",
                REACT_APP_ONSCREEN_KEYBOARD_DESKTOP: "false",
                REACT_APP_CUSTOM_CURSORS_DESKTOP: "true",
                REACT_APP_CUSTOM_CURSORS_MOBILE: "false",
                REACT_APP_WAITING_OVERLAY_DELAY: "250",
                REACT_APP_TUTORIAL_URL: "https://youtu.be/bllO9Kx0MCI",
                REACT_APP_TUTORIAL_WINDOW_NAME: "ABCya-paint, learn it!",
                REACT_APP_TUTORIAL_WINDOW_FEATURES: "width=1024,height=768,centerscreen,menubar=off,toolbar=off",
                REACT_APP_INTRO_MOVIE_URL: "%PUBLIC_URL%/Loading-Logo.mp4",
                REACT_APP_EXPANSION_AMOUNT: "20",
                REACT_APP_EXPANSION_DELAY: "500",
                REACT_APP_EXPANSION_COUNT: "10"
            }[A])
        } catch (A) {
            return e
        }
    }
    function o(A) {
        var e = A.feature
          , t = A.sigil
          , n = A.defaults
          , o = n.global
          , i = void 0 !== o && o
          , u = n.mobile
          , l = void 0 !== u && u
          , s = n.desktop
          , p = void 0 !== s && s
          , f = r("REACT_APP_" + t, i)
          , g = r("REACT_APP_" + t + "_MOBILE", l)
          , I = r("REACT_APP_" + t + "_DESKTOP", p);
        return g && a.default.isMobile() || I && !a.default.isMobile() || f ? (c("Use of %s is allowed on this device", e),
        !0) : (c("Use of %s is not allowed on this device", e),
        !1)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = o;
    var i = t(67)
      , a = n(i)
      , u = t(2)
      , l = n(u)
      , c = (0,
    l.default)("ABCya-paint:src/helpers/feature.js")
}
, [902, 8], function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A.default : A
    }
    e.__esModule = !0;
    var r = t(758);
    e.Motion = n(r);
    var o = t(759);
    e.StaggeredMotion = n(o);
    var i = t(760);
    e.TransitionMotion = n(i);
    var a = t(763);
    e.spring = n(a);
    var u = t(296);
    e.presets = n(u);
    var l = t(81);
    e.stripStyle = n(l);
    var c = t(762);
    e.reorderKeys = n(c)
}
, function(A, e, t) {
    (function(A, n) {
        var r = t(843)
          , o = {
            function: !0,
            object: !0
        }
          , i = o[typeof e] && e && !e.nodeType ? e : void 0
          , a = o[typeof A] && A && !A.nodeType ? A : void 0
          , u = r(i && a && "object" == typeof n && n)
          , l = r(o[typeof self] && self)
          , c = r(o[typeof window] && window)
          , s = r(o[typeof this] && this)
          , p = u || c !== (s && s.window) && c || l || s || Function("return this")();
        A.exports = p
    }
    ).call(e, t(316)(A), function() {
        return this
    }())
}
, function(A, e) {
    function t(A) {
        var e = typeof A;
        return !!A && ("object" == e || "function" == e)
    }
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , i = t(1)
      , a = n(i)
      , u = t(164)
      , l = n(u)
      , c = t(68)
      , s = n(c)
      , p = t(15)
      , f = n(p)
      , g = t(3)
      , I = n(g)
      , d = new Map
      , q = function() {
        function A(e) {
            var t = e.category
              , n = e.categoryIcon
              , o = e.tools
              , i = e.color
              , a = void 0 === i ? "white" : i;
            r(this, A),
            this.category = t,
            this.categoryIcon = n,
            this.tools = o,
            this.color = a,
            (0,
            s.default)(this, ["Pane", "activate"]),
            d.set(t, this)
        }
        return o(A, null, [{
            key: "byName",
            value: function(A) {
                if (!d.has(A))
                    throw new Error('Unknown category "' + A + '"');
                return d.get(A)
            }
        }]),
        o(A, [{
            key: "activate",
            value: function() {
                f.default.dispatch({
                    type: I.default.SET_CATEGORY,
                    category: this.category
                })
            }
        }, {
            key: "Pane",
            value: function(A) {
                var e = this;
                return a.default.createElement(l.default, Object.assign({}, A, {
                    category: this.category,
                    iconURL: this.categoryIcon,
                    bgColor: this.color,
                    onClickCategoryIcon: this.activate
                }), this.tools.map(function(A, t) {
                    var n = A.tool
                      , r = A.ToolButton;
                    return a.default.createElement(r, {
                        key: n,
                        category: e.category
                    })
                }))
            }
        }]),
        A
    }();
    e.default = q
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return function() {
            var e = A.apply(this, arguments);
            return new Promise(function(A, t) {
                function n(r, o) {
                    try {
                        var i = e[r](o)
                          , a = i.value
                    } catch (A) {
                        return void t(A)
                    }
                    return i.done ? void A(a) : Promise.resolve(a).then(function(A) {
                        n("next", A)
                    }, function(A) {
                        n("throw", A)
                    })
                }
                return n("next")
            }
            )
        }
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.contentDB = void 0;
    var u = t(9)
      , l = n(u)
      , c = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , s = t(1)
      , p = n(s)
      , f = t(12)
      , g = t(2)
      , I = n(g)
      , d = (0,
    I.default)("ABCya-paint:src/components/UIElement.js")
      , q = e.contentDB = new Map
      , C = function(A) {
        function e(A) {
            o(this, e);
            var t = i(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                inlineContents: null
            },
            t
        }
        return a(e, A),
        c(e, [{
            key: "componentDidMount",
            value: function() {
                this.props.inline && this.fetchAndInlineContents()
            }
        }, {
            key: "fetchAndInlineContents",
            value: function() {
                function A() {
                    return e.apply(this, arguments)
                }
                var e = r(l.default.mark(function A() {
                    var e, t, n, r = this;
                    return l.default.wrap(function(A) {
                        for (; ; )
                            switch (A.prev = A.next) {
                            case 0:
                                if (A.prev = 0,
                                this.props.src) {
                                    A.next = 3;
                                    break
                                }
                                throw new Error("You must pass a src to UIElement!");
                            case 3:
                                if (e = void 0,
                                t = this.props.src,
                                q.has(t)) {
                                    A.next = 18;
                                    break
                                }
                                return d("Preparing to fetch: %s", t),
                                A.next = 9,
                                fetch(t);
                            case 9:
                                if (n = A.sent,
                                !n.ok) {
                                    A.next = 16;
                                    break
                                }
                                return A.next = 13,
                                n.text();
                            case 13:
                                e = A.sent,
                                q.set(t, e),
                                d("Setting inlineContents: %s", e);
                            case 16:
                                A.next = 20;
                                break;
                            case 18:
                                d("Inline contents have been previously fetched."),
                                e = q.get(t);
                            case 20:
                                this.setState({
                                    inlineContents: e
                                }, function() {
                                    r.props.onClick && r.inlineEl.querySelectorAll("svg > *").forEach(function(A) {
                                        A.addEventListener("click", r.props.onClick)
                                    })
                                }),
                                A.next = 26;
                                break;
                            case 23:
                                A.prev = 23,
                                A.t0 = A.catch(0),
                                d("Something happened while fetching a URL: %o", {
                                    src: this.props.src,
                                    error: A.t0
                                });
                            case 26:
                            case "end":
                                return A.stop()
                            }
                    }, A, this, [[0, 23]])
                }));
                return A
            }()
        }, {
            key: "render",
            value: function() {
                var A = this
                  , e = (0,
                f.classnames)(this.props.type, "UIElement");
                return this.state.inlineContents ? p.default.createElement("div", {
                    ref: function(e) {
                        return A.inlineEl = e
                    },
                    className: e,
                    dangerouslySetInnerHTML: {
                        __html: this.state.inlineContents
                    }
                }) : p.default.createElement("img", {
                    className: e,
                    src: this.props.src,
                    alt: "",
                    draggable: "false",
                    onDragStart: f.stopEvent
                })
            }
        }]),
        e
    }(s.PureComponent);
    C.propTypes = {
        type: s.PropTypes.string,
        src: s.PropTypes.string.isRequired
    },
    e.default = C
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(104)
      , s = n(c)
      , p = t(103)
      , f = n(p)
      , g = t(402)
      , I = n(g)
      , d = t(403)
      , q = n(d)
      , C = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                var A = this.props
                  , e = A.tool
                  , t = A.options
                  , n = void 0 === t ? [] : t
                  , r = A.editorIcon
                  , o = A.category
                  , i = A.showColorPicker
                  , a = void 0 === i || i
                  , u = A.itemsPerPage
                  , c = void 0 === u ? 6 : u;
                return l.default.createElement(s.default, {
                    editorIcon: r,
                    category: o
                }, l.default.createElement(q.default, {
                    tool: e,
                    itemsPerPage: c
                }, n.map(function(A) {
                    return l.default.createElement(I.default, {
                        key: A,
                        tool: e,
                        option: A
                    })
                })), a && l.default.createElement(f.default, null))
            }
        }]),
        e
    }(u.PureComponent);
    e.default = C
}
, function(A, e) {
    function t() {
        throw new Error("setTimeout has not been defined")
    }
    function n() {
        throw new Error("clearTimeout has not been defined")
    }
    function r(A) {
        if (c === setTimeout)
            return setTimeout(A, 0);
        if ((c === t || !c) && setTimeout)
            return c = setTimeout,
            setTimeout(A, 0);
        try {
            return c(A, 0)
        } catch (e) {
            try {
                return c.call(null, A, 0)
            } catch (e) {
                return c.call(this, A, 0)
            }
        }
    }
    function o(A) {
        if (s === clearTimeout)
            return clearTimeout(A);
        if ((s === n || !s) && clearTimeout)
            return s = clearTimeout,
            clearTimeout(A);
        try {
            return s(A)
        } catch (e) {
            try {
                return s.call(null, A)
            } catch (e) {
                return s.call(this, A)
            }
        }
    }
    function i() {
        I && f && (I = !1,
        f.length ? g = f.concat(g) : d = -1,
        g.length && a())
    }
    function a() {
        if (!I) {
            var A = r(i);
            I = !0;
            for (var e = g.length; e; ) {
                for (f = g,
                g = []; ++d < e; )
                    f && f[d].run();
                d = -1,
                e = g.length
            }
            f = null,
            I = !1,
            o(A)
        }
    }
    function u(A, e) {
        this.fun = A,
        this.array = e
    }
    function l() {}
    var c, s, p = A.exports = {};
    !function() {
        try {
            c = "function" == typeof setTimeout ? setTimeout : t
        } catch (A) {
            c = t
        }
        try {
            s = "function" == typeof clearTimeout ? clearTimeout : n
        } catch (A) {
            s = n
        }
    }();
    var f, g = [], I = !1, d = -1;
    p.nextTick = function(A) {
        var e = new Array(arguments.length - 1);
        if (arguments.length > 1)
            for (var t = 1; t < arguments.length; t++)
                e[t - 1] = arguments[t];
        g.push(new u(A,e)),
        1 !== g.length || I || r(a)
    }
    ,
    u.prototype.run = function() {
        this.fun.apply(null, this.array)
    }
    ,
    p.title = "browser",
    p.browser = !0,
    p.env = {},
    p.argv = [],
    p.version = "",
    p.versions = {},
    p.on = l,
    p.addListener = l,
    p.once = l,
    p.off = l,
    p.removeListener = l,
    p.removeAllListeners = l,
    p.emit = l,
    p.binding = function(A) {
        throw new Error("process.binding is not supported")
    }
    ,
    p.cwd = function() {
        return "/"
    }
    ,
    p.chdir = function(A) {
        throw new Error("process.chdir is not supported")
    }
    ,
    p.umask = function() {
        return 0
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (d) {
            var e = A.node
              , t = A.children;
            if (t.length)
                for (var n = 0; n < t.length; n++)
                    q(e, t[n], null);
            else
                null != A.html ? s(e, A.html) : null != A.text && f(e, A.text)
        }
    }
    function r(A, e) {
        A.parentNode.replaceChild(e.node, A),
        n(e)
    }
    function o(A, e) {
        d ? A.children.push(e) : A.node.appendChild(e.node)
    }
    function i(A, e) {
        d ? A.html = e : s(A.node, e)
    }
    function a(A, e) {
        d ? A.text = e : f(A.node, e)
    }
    function u() {
        return this.node.nodeName
    }
    function l(A) {
        return {
            node: A,
            children: [],
            html: null,
            text: null,
            toString: u
        }
    }
    var c = t(121)
      , s = t(80)
      , p = t(129)
      , f = t(293)
      , g = 1
      , I = 11
      , d = "undefined" != typeof document && "number" == typeof document.documentMode || "undefined" != typeof navigator && "string" == typeof navigator.userAgent && /\bEdge\/\d/.test(navigator.userAgent)
      , q = p(function(A, e, t) {
        e.node.nodeType === I || e.node.nodeType === g && "object" === e.node.nodeName.toLowerCase() && (null == e.node.namespaceURI || e.node.namespaceURI === c.html) ? (n(e),
        A.insertBefore(e.node, t)) : (A.insertBefore(e.node, t),
        n(e))
    });
    l.insertTreeBefore = q,
    l.replaceChildWithTree = r,
    l.queueChild = o,
    l.queueHTML = i,
    l.queueText = a,
    A.exports = l
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        return (A & e) === e
    }
    var r = t(8)
      , o = (t(5),
    {
        MUST_USE_PROPERTY: 1,
        HAS_BOOLEAN_VALUE: 4,
        HAS_NUMERIC_VALUE: 8,
        HAS_POSITIVE_NUMERIC_VALUE: 24,
        HAS_OVERLOADED_BOOLEAN_VALUE: 32,
        injectDOMPropertyConfig: function(A) {
            var e = o
              , t = A.Properties || {}
              , i = A.DOMAttributeNamespaces || {}
              , u = A.DOMAttributeNames || {}
              , l = A.DOMPropertyNames || {}
              , c = A.DOMMutationMethods || {};
            A.isCustomAttribute && a._isCustomAttributeFunctions.push(A.isCustomAttribute);
            for (var s in t) {
                a.properties.hasOwnProperty(s) ? r("48", s) : void 0;
                var p = s.toLowerCase()
                  , f = t[s]
                  , g = {
                    attributeName: p,
                    attributeNamespace: null,
                    propertyName: s,
                    mutationMethod: null,
                    mustUseProperty: n(f, e.MUST_USE_PROPERTY),
                    hasBooleanValue: n(f, e.HAS_BOOLEAN_VALUE),
                    hasNumericValue: n(f, e.HAS_NUMERIC_VALUE),
                    hasPositiveNumericValue: n(f, e.HAS_POSITIVE_NUMERIC_VALUE),
                    hasOverloadedBooleanValue: n(f, e.HAS_OVERLOADED_BOOLEAN_VALUE)
                };
                if (g.hasBooleanValue + g.hasNumericValue + g.hasOverloadedBooleanValue <= 1 ? void 0 : r("50", s),
                u.hasOwnProperty(s)) {
                    var I = u[s];
                    g.attributeName = I
                }
                i.hasOwnProperty(s) && (g.attributeNamespace = i[s]),
                l.hasOwnProperty(s) && (g.propertyName = l[s]),
                c.hasOwnProperty(s) && (g.mutationMethod = c[s]),
                a.properties[s] = g
            }
        }
    })
      , i = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD"
      , a = {
        ID_ATTRIBUTE_NAME: "data-reactid",
        ROOT_ATTRIBUTE_NAME: "data-reactroot",
        ATTRIBUTE_NAME_START_CHAR: i,
        ATTRIBUTE_NAME_CHAR: i + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",
        properties: {},
        getPossibleStandardName: null,
        _isCustomAttributeFunctions: [],
        isCustomAttribute: function(A) {
            for (var e = 0; e < a._isCustomAttributeFunctions.length; e++) {
                var t = a._isCustomAttributeFunctions[e];
                if (t(A))
                    return !0
            }
            return !1
        },
        injection: o
    };
    A.exports = a
}
, function(A, e, t) {
    "use strict";
    function n() {
        r.attachRefs(this, this._currentElement)
    }
    var r = t(725)
      , o = (t(19),
    t(7),
    {
        mountComponent: function(A, e, t, r, o, i) {
            var a = A.mountComponent(e, t, r, o, i);
            return A._currentElement && null != A._currentElement.ref && e.getReactMountReady().enqueue(n, A),
            a
        },
        getHostNode: function(A) {
            return A.getHostNode()
        },
        unmountComponent: function(A, e) {
            r.detachRefs(A, A._currentElement),
            A.unmountComponent(e)
        },
        receiveComponent: function(A, e, t, o) {
            var i = A._currentElement;
            if (e !== i || o !== A._context) {
                var a = r.shouldUpdateRefs(i, e);
                a && r.detachRefs(A, i),
                A.receiveComponent(e, t, o),
                a && A._currentElement && null != A._currentElement.ref && t.getReactMountReady().enqueue(n, A)
            }
        },
        performUpdateIfNecessary: function(A, e, t) {
            A._updateBatchNumber === t && A.performUpdateIfNecessary(e)
        }
    });
    A.exports = o
}
, function(A, e, t) {
    "use strict";
    var n = t(11)
      , r = t(304)
      , o = t(783)
      , i = t(784)
      , a = t(44)
      , u = t(785)
      , l = t(786)
      , c = t(787)
      , s = t(791)
      , p = a.createElement
      , f = a.createFactory
      , g = a.cloneElement
      , I = n
      , d = function(A) {
        return A
    }
      , q = {
        Children: {
            map: o.map,
            forEach: o.forEach,
            count: o.count,
            toArray: o.toArray,
            only: s
        },
        Component: r.Component,
        PureComponent: r.PureComponent,
        createElement: p,
        cloneElement: g,
        isValidElement: a.isValidElement,
        PropTypes: u,
        createClass: c,
        createFactory: f,
        createMixin: d,
        DOM: i,
        version: l,
        __spread: I
    };
    A.exports = q
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return void 0 !== A.ref
    }
    function r(A) {
        return void 0 !== A.key
    }
    var o = t(11)
      , i = t(26)
      , a = (t(7),
    t(308),
    Object.prototype.hasOwnProperty)
      , u = t(306)
      , l = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
    }
      , c = function(A, e, t, n, r, o, i) {
        var a = {
            $$typeof: u,
            type: A,
            key: e,
            ref: t,
            props: i,
            _owner: o
        };
        return a
    };
    c.createElement = function(A, e, t) {
        var o, u = {}, s = null, p = null, f = null, g = null;
        if (null != e) {
            n(e) && (p = e.ref),
            r(e) && (s = "" + e.key),
            f = void 0 === e.__self ? null : e.__self,
            g = void 0 === e.__source ? null : e.__source;
            for (o in e)
                a.call(e, o) && !l.hasOwnProperty(o) && (u[o] = e[o])
        }
        var I = arguments.length - 2;
        if (1 === I)
            u.children = t;
        else if (I > 1) {
            for (var d = Array(I), q = 0; q < I; q++)
                d[q] = arguments[q + 2];
            u.children = d
        }
        if (A && A.defaultProps) {
            var C = A.defaultProps;
            for (o in C)
                void 0 === u[o] && (u[o] = C[o])
        }
        return c(A, s, p, f, g, i.current, u)
    }
    ,
    c.createFactory = function(A) {
        var e = c.createElement.bind(null, A);
        return e.type = A,
        e
    }
    ,
    c.cloneAndReplaceKey = function(A, e) {
        var t = c(A.type, e, A.ref, A._self, A._source, A._owner, A.props);
        return t
    }
    ,
    c.cloneElement = function(A, e, t) {
        var u, s = o({}, A.props), p = A.key, f = A.ref, g = A._self, I = A._source, d = A._owner;
        if (null != e) {
            n(e) && (f = e.ref,
            d = i.current),
            r(e) && (p = "" + e.key);
            var q;
            A.type && A.type.defaultProps && (q = A.type.defaultProps);
            for (u in e)
                a.call(e, u) && !l.hasOwnProperty(u) && (void 0 === e[u] && void 0 !== q ? s[u] = q[u] : s[u] = e[u])
        }
        var C = arguments.length - 2;
        if (1 === C)
            s.children = t;
        else if (C > 1) {
            for (var m = Array(C), y = 0; y < C; y++)
                m[y] = arguments[y + 2];
            s.children = m
        }
        return c(A.type, p, f, g, I, d, s)
    }
    ,
    c.isValidElement = function(A) {
        return "object" == typeof A && null !== A && A.$$typeof === u
    }
    ,
    A.exports = c
}
, function(A, e, t) {
    function n(A, e) {
        var t = A[e];
        return r(t) ? t : void 0
    }
    var r = t(888);
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , i = t(2)
      , a = n(i)
      , u = t(15)
      , l = n(u)
      , c = t(3)
      , s = n(c)
      , p = t(65)
      , f = (0,
    a.default)("ABCya-paint:src/asyncObjects/AsyncObject.js")
      , g = p.env.getNumber("ASYNC_OBJECT_RETRIES", 10)
      , I = p.env.getNumber("ASYNC_OBJECT_DELAY", 10)
      , d = function() {
        function A(e) {
            var t = e.displayName
              , n = void 0 === t ? "<OBJECT>" : t
              , o = e.isObjectAvailable
              , i = e.getObject
              , a = e.retries
              , u = void 0 === a ? g : a
              , c = e.delay
              , p = void 0 === c ? I : c;
            r(this, A),
            this.isObjectAvailable = o;
            var d = void 0;
            this.await = function() {
                return d || (l.default.dispatch({
                    type: s.default.START_WAITING,
                    tag: "AsyncObject"
                }),
                d = new Promise(function(A, e) {
                    f("Waiting for async object; %s", n);
                    var t = 0
                      , r = setInterval(function() {
                        if (o()) {
                            var a = i();
                            f("%s is ready: %o", n, a),
                            clearInterval(r),
                            l.default.dispatch({
                                type: s.default.STOP_WAITING,
                                tag: "AsyncObject"
                            }),
                            A(a)
                        } else {
                            t += 1;
                            var c = u - t;
                            0 === c ? (f("%s was not ready in time", n),
                            e(n + " was not ready in time"),
                            clearInterval(r)) : f("%s is not ready - %s attempt%s left", n, c, 1 === c ? "" : "s")
                        }
                    }, p)
                }
                )),
                d
            }
        }
        return o(A, null, [{
            key: "waitFor",
            value: function() {
                for (var A = arguments.length, e = Array(A), t = 0; t < A; t++)
                    e[t] = arguments[t];
                return Promise.all(e.map(function(A) {
                    return A.await()
                }))
            }
        }]),
        A
    }();
    e.default = d
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(12)
      , a = function(A) {
        var e = A.text
          , t = A.verticalOffset
          , n = void 0 === t ? "0.5em" : t;
        return o.default.createElement("svg", {
            className: "abcya-paint--text-area",
            viewBox: "-100 -100 200 200",
            preserveAspectRatio: "xMidYMid meet"
        }, o.default.createElement("text", {
            fontSize: "1em",
            textAnchor: "middle",
            alignmentBaseline: "central"
        }, (0,
        i.toList)(e).map(function(A, e) {
            return o.default.createElement("tspan", {
                key: e,
                x: "0",
                dy: 0 === e ? n : "1.1em"
            }, A)
        })))
    };
    e.default = a
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(12)
      , a = function(A) {
        var e = A.type
          , t = A.regions
          , n = void 0 === t ? 1 : t;
        return o.default.createElement("svg", {
            className: (0,
            i.classnames)("VerticalSpace", e),
            viewBox: "0 0 1000 " + 100 * n,
            preserveAspectRatio: "xMidYMid meet",
            style: {
                width: "100%"
            }
        })
    };
    e.default = a
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(20);
    Object.defineProperty(e, "ClickRegion", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(63);
    Object.defineProperty(e, "DecorativeRegion", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(385);
    Object.defineProperty(e, "DialogRegion", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(386);
    Object.defineProperty(e, "EmptySlotRegion", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(166);
    Object.defineProperty(e, "MenuRegion", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(64);
    Object.defineProperty(e, "Region", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(100);
    Object.defineProperty(e, "SpacerRegion", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    });
    var s = t(167);
    Object.defineProperty(e, "SwatchRegion", {
        enumerable: !0,
        get: function() {
            return n(s).default
        }
    });
    var p = t(168);
    Object.defineProperty(e, "TrayToggle", {
        enumerable: !0,
        get: function() {
            return n(p).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(31)
      , o = n(r);
    e.default = (0,
    o.default)({
        feature: "fancy animations",
        sigil: "FANCY_ANIMATIONS",
        defaults: {
            mobile: !1,
            desktop: !0
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        return i.default.apply(void 0, arguments).split(" ").map(function(A) {
            return "abcya-paint--" + A
        }).join(" ")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = r;
    var o = t(442)
      , i = n(o)
}
, function(A, e) {
    !function(e) {
        "use strict";
        function t(A) {
            this.options = r.call(this, A || {}),
            this.map = {},
            this.keys = {},
            this.defaultValue = this.options.defaultValue,
            delete this.options.defaultValue,
            this.defaultGenerator = this.options.defaultGenerator,
            delete this.options.defaultGenerator,
            this.hasGenerator = "function" == typeof this.defaultGenerator,
            o.call(this),
            delete this.options.data
        }
        function n(A) {
            var e;
            e = this.hasGenerator ? this.defaultGenerator(A) : Array.isArray(this.defaultValue) ? this.defaultValue.slice() : this.defaultValue instanceof Date ? new Date(this.defaultValue) : "object" == typeof this.defaultValue ? i(this.defaultValue) : this.defaultValue,
            this.map[A] = e,
            this.keys[A] = !0
        }
        function r(A) {
            for (var t in a)
                a.hasOwnProperty(t) && A[t] === e && (A[t] = a[t]);
            return A
        }
        function o() {
            for (var A in this.options.data)
                this.options.data.hasOwnProperty(A) && this.set(A, this.options.data[A])
        }
        function i(A) {
            var e = Object.create(Object.getPrototypeOf(A));
            return Object.getOwnPropertyNames(A).forEach(function(t) {
                Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(A, t))
            }),
            e
        }
        A.exports = t;
        var a = {
            defaultValue: e,
            defaultGenerator: e,
            data: {}
        };
        t.prototype.toHash = function() {
            var A = {};
            return this.forEach(function(e, t) {
                A[t] = e
            }),
            A
        }
        ,
        t.prototype.set = function(A, e) {
            this.map[A] = e,
            this.keys[A] = !0
        }
        ,
        t.prototype.has = function(A) {
            return !!this.keys[A]
        }
        ,
        t.prototype.delete = function(A) {
            delete this.keys[A],
            delete this.map[A]
        }
        ,
        t.prototype.get = function(A) {
            return this.has(A) || n.call(this, A),
            this.map[A]
        }
        ,
        t.prototype.isEmpty = function() {
            return !Object.getOwnPropertyNames(this.map).length
        }
        ,
        t.prototype.forEach = function(A, e) {
            for (var t in this.map)
                this.map.hasOwnProperty(t) && A.call(e, this.map[t], t, this)
        }
    }()
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.Hooray = void 0;
    var n = t(21)
      , r = e.Hooray = {
        create: function() {
            var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
              , e = A.name
              , t = [];
            return Object.defineProperties(t, {
                get: {
                    enumerable: !1,
                    value: function() {
                        for (var A = arguments.length, e = Array(A), t = 0; t < A; t++)
                            e[t] = arguments[t];
                        return r.get.apply(r, [this].concat(e))
                    }
                },
                set: {
                    value: function() {
                        for (var A = arguments.length, e = Array(A), t = 0; t < A; t++)
                            e[t] = arguments[t];
                        return r.set.apply(r, [this].concat(e))
                    }
                },
                dump: {
                    value: function() {
                        function A(t) {
                            (0,
                            n.forEach)(t, function(t, n) {
                                Array.isArray(t) ? (console.group(e + "[" + n + "]"),
                                A(t),
                                console.groupEnd()) : "dump"in t ? t.dump() : console.log(t)
                            })
                        }
                        console.group(e),
                        A(t),
                        console.groupEnd()
                    }
                }
            }),
            t
        },
        get: function(A) {
            for (var e = arguments.length, t = Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
                t[n - 1] = arguments[n];
            for (var r = t.slice(0, -1), o = t.slice(-1)[0], i = A, a = 0; a < r.length; a++) {
                var u = r[a];
                i[u] || (i[u] = []),
                i = i[u]
            }
            return i[o]
        },
        set: function(A) {
            for (var e = arguments.length, t = Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
                t[n - 1] = arguments[n];
            for (var r = t.slice(0, -2), o = t.slice(-2, -1)[0], i = t.slice(-1)[0], a = A, u = 0; u < r.length; u++) {
                var l = r[u];
                a[l] || (a[l] = []),
                a = a[l]
            }
            a[o] = i
        }
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return "button" === A || "input" === A || "select" === A || "textarea" === A
    }
    function r(A, e, t) {
        switch (A) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
            return !(!t.disabled || !n(e));
        default:
            return !1
        }
    }
    var o = t(8)
      , i = t(122)
      , a = t(123)
      , u = t(127)
      , l = t(286)
      , c = t(287)
      , s = (t(5),
    {})
      , p = null
      , f = function(A, e) {
        A && (a.executeDispatchesInOrder(A, e),
        A.isPersistent() || A.constructor.release(A))
    }
      , g = function(A) {
        return f(A, !0)
    }
      , I = function(A) {
        return f(A, !1)
    }
      , d = function(A) {
        return "." + A._rootNodeID
    }
      , q = {
        injection: {
            injectEventPluginOrder: i.injectEventPluginOrder,
            injectEventPluginsByName: i.injectEventPluginsByName
        },
        putListener: function(A, e, t) {
            "function" != typeof t ? o("94", e, typeof t) : void 0;
            var n = d(A)
              , r = s[e] || (s[e] = {});
            r[n] = t;
            var a = i.registrationNameModules[e];
            a && a.didPutListener && a.didPutListener(A, e, t)
        },
        getListener: function(A, e) {
            var t = s[e];
            if (r(e, A._currentElement.type, A._currentElement.props))
                return null;
            var n = d(A);
            return t && t[n]
        },
        deleteListener: function(A, e) {
            var t = i.registrationNameModules[e];
            t && t.willDeleteListener && t.willDeleteListener(A, e);
            var n = s[e];
            if (n) {
                var r = d(A);
                delete n[r]
            }
        },
        deleteAllListeners: function(A) {
            var e = d(A);
            for (var t in s)
                if (s.hasOwnProperty(t) && s[t][e]) {
                    var n = i.registrationNameModules[t];
                    n && n.willDeleteListener && n.willDeleteListener(A, t),
                    delete s[t][e]
                }
        },
        extractEvents: function(A, e, t, n) {
            for (var r, o = i.plugins, a = 0; a < o.length; a++) {
                var u = o[a];
                if (u) {
                    var c = u.extractEvents(A, e, t, n);
                    c && (r = l(r, c))
                }
            }
            return r
        },
        enqueueEvents: function(A) {
            A && (p = l(p, A))
        },
        processEventQueue: function(A) {
            var e = p;
            p = null,
            A ? c(e, g) : c(e, I),
            p ? o("95") : void 0,
            u.rethrowCaughtError()
        },
        __purge: function() {
            s = {}
        },
        __getListenerBank: function() {
            return s
        }
    };
    A.exports = q
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t) {
        var n = e.dispatchConfig.phasedRegistrationNames[t];
        return q(A, n)
    }
    function r(A, e, t) {
        var r = n(A, t, e);
        r && (t._dispatchListeners = I(t._dispatchListeners, r),
        t._dispatchInstances = I(t._dispatchInstances, A))
    }
    function o(A) {
        A && A.dispatchConfig.phasedRegistrationNames && g.traverseTwoPhase(A._targetInst, r, A)
    }
    function i(A) {
        if (A && A.dispatchConfig.phasedRegistrationNames) {
            var e = A._targetInst
              , t = e ? g.getParentInstance(e) : null;
            g.traverseTwoPhase(t, r, A)
        }
    }
    function a(A, e, t) {
        if (t && t.dispatchConfig.registrationName) {
            var n = t.dispatchConfig.registrationName
              , r = q(A, n);
            r && (t._dispatchListeners = I(t._dispatchListeners, r),
            t._dispatchInstances = I(t._dispatchInstances, A))
        }
    }
    function u(A) {
        A && A.dispatchConfig.registrationName && a(A._targetInst, null, A)
    }
    function l(A) {
        d(A, o)
    }
    function c(A) {
        d(A, i)
    }
    function s(A, e, t, n) {
        g.traverseEnterLeave(t, n, a, A, e)
    }
    function p(A) {
        d(A, u)
    }
    var f = t(54)
      , g = t(123)
      , I = t(286)
      , d = t(287)
      , q = (t(7),
    f.getListener)
      , C = {
        accumulateTwoPhaseDispatches: l,
        accumulateTwoPhaseDispatchesSkipTarget: c,
        accumulateDirectDispatches: p,
        accumulateEnterLeaveDispatches: s
    };
    A.exports = C
}
, function(A, e) {
    "use strict";
    var t = {
        remove: function(A) {
            A._reactInternalInstance = void 0
        },
        get: function(A) {
            return A._reactInternalInstance
        },
        has: function(A) {
            return void 0 !== A._reactInternalInstance
        },
        set: function(A, e) {
            A._reactInternalInstance = e
        }
    };
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(25)
      , o = t(132)
      , i = {
        view: function(A) {
            if (A.view)
                return A.view;
            var e = o(A);
            if (e.window === e)
                return e;
            var t = e.ownerDocument;
            return t ? t.defaultView || t.parentWindow : window
        },
        detail: function(A) {
            return A.detail || 0
        }
    };
    r.augmentClass(n, i),
    A.exports = n
}
, 8, function(A, e, t) {
    function n(A) {
        var e = r(A) ? u.call(A) : "";
        return e == o || e == i
    }
    var r = t(35)
      , o = "[object Function]"
      , i = "[object GeneratorFunction]"
      , a = Object.prototype
      , u = a.toString;
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return !!A && "object" == typeof A
    }
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(1)
      , i = n(o)
      , a = t(17)
      , u = n(a)
      , l = t(12)
      , c = function(A) {
        var e = A.tailPosition
          , t = A.tailStyle
          , n = A.type
          , o = (A.insetTop,
        A.insetBottom,
        A.children)
          , a = r(A, ["tailPosition", "tailStyle", "type", "insetTop", "insetBottom", "children"]);
        return i.default.createElement(u.default, {
            type: "DialogLayer",
            scaleFrom: .5,
            scaleTo: 1
        }, i.default.createElement("div", Object.assign({
            className: (0,
            l.classnames)(n, "Dialog", e)
        }, a), o), i.default.createElement("div", {
            className: (0,
            l.classnames)("Tail"),
            style: t
        }))
    };
    e.default = c
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.elementDB = void 0;
    var a = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = t(1)
      , c = n(l)
      , s = t(17)
      , p = n(s)
      , f = t(48)
      , g = n(f)
      , I = t(12)
      , d = t(68)
      , q = n(d)
      , C = t(260)
      , m = n(C)
      , y = t(4)
      , h = t(2)
      , M = n(h)
      , V = (0,
    M.default)("ABCya-paint:src/components/CursorLayer.js")
      , E = 3
      , S = "cursorDip"
      , k = e.elementDB = new Set
      , b = function(A) {
        function e(A) {
            r(this, e);
            var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                last: {
                    x: 0,
                    y: 0
                },
                rotation: 0,
                targetRotation: 0
            },
            (0,
            q.default)(t, ["rotateCursor"]),
            t
        }
        return i(e, A),
        u(e, null, [{
            key: "addMaskingElement",
            value: function(A) {
                V("Adding masking element: %o", A),
                k.add(A)
            }
        }]),
        u(e, [{
            key: "componentDidMount",
            value: function() {
                this.attachInputHandlers(this.props)
            }
        }, {
            key: "componentWillReceiveProps",
            value: function(A) {
                var e = this
                  , t = function() {
                    for (var t = arguments.length, n = Array(t), r = 0; r < t; r++)
                        n[r] = arguments[r];
                    return n.some(function(t) {
                        return e.props[t] !== A[t]
                    })
                };
                t("pointerImage", "dipOnGestureStart", "shouldRotate") && this.attachInputHandlers(A)
            }
        }, {
            key: "detachInputHandlers",
            value: function() {
                V("Cleaning up...");
                var A = this.state
                  , e = A.moveHandler
                  , t = A.outHandler
                  , n = A.dipHandler
                  , r = A.rotationHandler;
                e && e.detach(),
                t && t.detach(),
                n && n.detach(),
                r && cancelAnimationFrame(r)
            }
        }, {
            key: "attachInputHandlers",
            value: function(A) {
                function e(A) {
                    return (0,
                    I.within)(A, u) && Array.from(k).reduce(function(e, t) {
                        return e && t ? !(0,
                        I.within)(A, t.getBoundingClientRect()) : e
                    }, !0)
                }
                var t = this
                  , n = A.pointerImage
                  , r = A.dipOnGestureStart
                  , o = A.shouldRotate;
                if (this.detachInputHandlers(),
                n) {
                    var i = document.getElementById(m.default)
                      , u = i.getBoundingClientRect();
                    y.AsyncObject.waitFor(y.Gesture, y.sketch).then(function(A) {
                        var n = a(A, 2)
                          , r = n[0];
                        n[1];
                        t.setState({
                            moveHandler: r.on(document.body, "mousemove", function(A) {
                                var n = t.state.last
                                  , o = r.pointInNode(A, t.refs.root)
                                  , i = {
                                    x: n.x - o.x,
                                    y: n.y - o.y
                                };
                                if (!(Math.abs(i.x) < E && Math.abs(i.y) < E)) {
                                    for (var a = t.state.targetRotation, u = 180 * Math.atan2(i.y, i.x) / Math.PI; Math.abs(a - u) > 180; )
                                        u > a ? u -= 360 : u < a && (u += 360);
                                    var l = r.asPageXY(A)
                                      , c = e(l);
                                    t.state.isVisible !== c && V("The mouse cursor is now %s", c ? "visible" : "invisible"),
                                    t.setState({
                                        last: o,
                                        targetRotation: u,
                                        isVisible: c
                                    })
                                }
                            }),
                            outHandler: r.on(document.body, "mouseleave", function(A) {
                                t.setState({
                                    isVisible: !1
                                })
                            })
                        })
                    }),
                    r ? (this.refs.cursor.addEventListener("animationend", function() {
                        t.setState({
                            inGesture: !1
                        })
                    }),
                    y.sketch.await().then(function(A) {
                        t.setState({
                            dipHandler: A.doc.on("gesture", function(A) {
                                switch (A.state) {
                                case "start":
                                    t.setState({
                                        inGesture: !0
                                    })
                                }
                            })
                        })
                    })) : this.setState({
                        inGesture: !1
                    }),
                    o ? (V("Attaching rotation handler"),
                    this.setState({
                        rotationHandler: requestAnimationFrame(this.rotateCursor)
                    })) : this.setState({
                        rotation: 0
                    })
                }
            }
        }, {
            key: "componentWillUnmount",
            value: function() {
                this.detachInputHandlers()
            }
        }, {
            key: "rotateCursor",
            value: function() {
                var A = this.state
                  , e = A.rotation
                  , t = A.targetRotation
                  , n = e + (t - e) / 5;
                this.setState({
                    rotation: n,
                    rotationHandler: requestAnimationFrame(this.rotateCursor)
                })
            }
        }, {
            key: "render",
            value: function() {
                if (!this.props.pointerImage)
                    return null;
                var A = this.state
                  , e = A.last
                  , t = A.rotation
                  , n = A.inGesture
                  , r = A.isVisible
                  , o = this.props
                  , i = o.pointerImage
                  , a = o.height
                  , u = {
                    animationName: n ? S : "",
                    transform: "translate3d(-50%, -50%, 0) rotate3d(0, 0, 1, " + (t + (this.props.shouldRotate ? 180 : 0)) + "deg)"
                };
                return r || (u.visibility = "hidden"),
                c.default.createElement(p.default, {
                    type: "CursorLayer"
                }, c.default.createElement("div", {
                    className: (0,
                    I.classnames)("CursorContainer"),
                    ref: "root"
                }, c.default.createElement("div", {
                    className: (0,
                    I.classnames)("Cursor"),
                    ref: "container",
                    style: {
                        height: a + "px",
                        transform: "translate3d(" + (e.x - 5) + "px, " + e.y + "px, 0)"
                    }
                }, c.default.createElement("img", {
                    alt: "cursor",
                    src: i,
                    ref: "cursor",
                    style: u
                }))), c.default.createElement(g.default, null))
            }
        }]),
        e
    }(l.PureComponent);
    e.default = b
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = t(1)
      , c = n(l)
      , s = t(64)
      , p = n(s)
      , f = t(37)
      , g = n(f)
      , I = function(A) {
        function e() {
            return o(this, e),
            i(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return a(e, A),
        u(e, [{
            key: "render",
            value: function() {
                var A = this.props
                  , e = A.type
                  , t = A.iconURL
                  , n = A.inline
                  , o = A.children
                  , i = void 0 === o ? null : o
                  , a = r(A, ["type", "iconURL", "inline", "children"])
                  , u = [];
                return t && u.push(c.default.createElement(g.default, {
                    key: t,
                    src: t,
                    inline: n
                })),
                i && u.push(i),
                c.default.createElement(p.default, Object.assign({
                    type: [e, "DecorativeRegion"]
                }, a), u)
            }
        }]),
        e
    }(l.PureComponent);
    e.default = I
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = t(1)
      , c = n(l)
      , s = t(12)
      , p = function(A) {
        function e() {
            return o(this, e),
            i(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return a(e, A),
        u(e, [{
            key: "render",
            value: function() {
                var A = this.props
                  , e = A.type
                  , t = A.children
                  , n = r(A, ["type", "children"]);
                return c.default.createElement("div", Object.assign({
                    className: (0,
                    s.classnames)(e, "Region")
                }, n), t)
            }
        }]),
        e
    }(l.Component);
    e.default = p
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    e.env = {
        getNumber: function(A, e) {
            return parseInt({
                NODE_ENV: "production",
                PUBLIC_URL: ".",
                REACT_APP_ASYNC_OBJECT_RETRIES: "10",
                REACT_APP_ASYNC_OBJECT_DELAY: "2000",
                REACT_APP_SKETCH_URL: "%PUBLIC_URL%/sketch/min/sketch-api.min.js",
                REACT_APP_ACTION_LOGGER: "false",
                REACT_APP_PERF_MIDDLEWARE: "false",
                REACT_APP_WHY_DID_YOU_UPDATE: "false",
                REACT_APP_FANCY_ANIMATIONS_MOBILE: "true",
                REACT_APP_FANCY_ANIMATIONS_DESKTOP: "true",
                REACT_APP_ONSCREEN_KEYBOARD_MOBILE: "true",
                REACT_APP_ONSCREEN_KEYBOARD_DESKTOP: "false",
                REACT_APP_CUSTOM_CURSORS_DESKTOP: "true",
                REACT_APP_CUSTOM_CURSORS_MOBILE: "false",
                REACT_APP_WAITING_OVERLAY_DELAY: "250",
                REACT_APP_TUTORIAL_URL: "https://youtu.be/bllO9Kx0MCI",
                REACT_APP_TUTORIAL_WINDOW_NAME: "ABCya-paint, learn it!",
                REACT_APP_TUTORIAL_WINDOW_FEATURES: "width=1024,height=768,centerscreen,menubar=off,toolbar=off",
                REACT_APP_INTRO_MOVIE_URL: "%PUBLIC_URL%/Loading-Logo.mp4",
                REACT_APP_EXPANSION_AMOUNT: "20",
                REACT_APP_EXPANSION_DELAY: "500",
                REACT_APP_EXPANSION_COUNT: "10"
            }["REACT_APP_" + A], 10) || e
        },
        getString: function(A, e) {
            return {
                NODE_ENV: "production",
                PUBLIC_URL: ".",
                REACT_APP_ASYNC_OBJECT_RETRIES: "10",
                REACT_APP_ASYNC_OBJECT_DELAY: "2000",
                REACT_APP_SKETCH_URL: "%PUBLIC_URL%/sketch/min/sketch-api.min.js",
                REACT_APP_ACTION_LOGGER: "false",
                REACT_APP_PERF_MIDDLEWARE: "false",
                REACT_APP_WHY_DID_YOU_UPDATE: "false",
                REACT_APP_FANCY_ANIMATIONS_MOBILE: "true",
                REACT_APP_FANCY_ANIMATIONS_DESKTOP: "true",
                REACT_APP_ONSCREEN_KEYBOARD_MOBILE: "true",
                REACT_APP_ONSCREEN_KEYBOARD_DESKTOP: "false",
                REACT_APP_CUSTOM_CURSORS_DESKTOP: "true",
                REACT_APP_CUSTOM_CURSORS_MOBILE: "false",
                REACT_APP_WAITING_OVERLAY_DELAY: "250",
                REACT_APP_TUTORIAL_URL: "https://youtu.be/bllO9Kx0MCI",
                REACT_APP_TUTORIAL_WINDOW_NAME: "ABCya-paint, learn it!",
                REACT_APP_TUTORIAL_WINDOW_FEATURES: "width=1024,height=768,centerscreen,menubar=off,toolbar=off",
                REACT_APP_INTRO_MOVIE_URL: "%PUBLIC_URL%/Loading-Logo.mp4",
                REACT_APP_EXPANSION_AMOUNT: "20",
                REACT_APP_EXPANSION_DELAY: "500",
                REACT_APP_EXPANSION_COUNT: "10"
            }["REACT_APP_" + A] || e
        }
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function o() {
        var A = a.default.getState()
          , e = A.tool;
        return e in l ? l[e] : (p("Someone is asking for the active tool, but there is no active tool."),
        null)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = o;
    var i = t(15)
      , a = r(i)
      , u = t(23)
      , l = n(u)
      , c = t(2)
      , s = r(c)
      , p = (0,
    s.default)("ABCya-paint:src/tool/activeTool")
}
, function(A, e, t) {
    "use strict";
    var n = t(660)
      , r = function() {
        this.initialize()
    };
    r.prototype = {
        initialize: function() {
            n.createTarget(this),
            this._getOrientationChangeListener = function() {
                var A = this;
                return function() {
                    A._onOrientationChange.bind(A)
                }
            }
            ,
            window.addEventListener("orientationchange", this._getOrientationChangeListener())
        },
        _onOrientationChange: function() {
            var A;
            A = window.innerHeight <= window.innerWidth ? "landscape" : "portrait",
            this.dispatchEvent("orientationchange", {
                orientation: A
            })
        },
        getUserAgent: function() {
            return window.navigator.userAgent
        },
        isBrowser: function(A) {
            var e, t = A, n = this.getUserAgent();
            return !A || (Array.isArray(A) && (t = A.join("|")),
            t.indexOf("safari") > -1 ? (e = new RegExp("chrome","i"),
            !e.test(n)) : (e = new RegExp(t,"i"),
            e.test(n)))
        },
        isMobile: function() {
            return this.isBrowser(["Android", "webOS", "iPhone", "iPad", "iPod", "BlackBerry", "IEMobile", "Opera Mini"])
        },
        isOS: function(A) {
            var e = A;
            Array.isArray(A) && (e = A.join("|"));
            var t = new RegExp(e,"i");
            return t.test(this.getUserAgent())
        },
        destroy: function() {
            window.removeEventListener("orientationchange", this._getOrientationChangeListener()),
            n.destroyTarget(this)
        }
    },
    A.exports = new r
}
, function(A, e, t) {
    var n, r, o;
    !function(t, i) {
        r = [A, e],
        n = i,
        o = "function" == typeof n ? n.apply(e, r) : n,
        !(void 0 !== o && (A.exports = o))
    }(this, function(A, e) {
        "use strict";
        function t(A, e) {
            Array.isArray(e) || (e = [e]),
            e.map(function(e) {
                try {
                    A[e] = A[e].bind(A)
                } catch (r) {
                    var t = A.name ? ", " + A.name : ""
                      , n = "function" == typeof e ? e.name : e;
                    throw console.log("Error: " + r),
                    new Error("Cannot bind method " + n + " to the supplied context" + t)
                }
                return null
            })
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        }),
        e.default = t,
        A.exports = e.default
    })
}
, function(A, e, t) {
    "use strict";
    var n = {};
    A.exports = n
}
, function(A, e, t) {
    A.exports = t.p + "static/media/dialog_tail.f3b6e919.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_tool_select.d19878f7.svg"
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.Channel = void 0;
    var r = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , o = t(24)
      , i = e.Channel = function() {
        function A(e) {
            n(this, A),
            this.channelID = e
        }
        return r(A, [{
            key: "noteOn",
            value: function(A, e, t) {
                return o.MIDI.noteOn(this.channelID, A, e, t)
            }
        }, {
            key: "noteOff",
            value: function(A, e) {
                return o.MIDI.noteOff(this.channelID, A, e)
            }
        }, {
            key: "program",
            get: function() {
                return o.MIDI.programs[this.programID]
            }
        }]),
        A
    }();
    window.Channel = i
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return Array.isArray(A) ? A : Array.from(A)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.GM = void 0;
    for (var r = t(676), o = e.GM = {
        note: {},
        program: {}
    }, i = [["C"], ["C#", "Db"], ["D"], ["D#", "Eb"], ["E"], ["F"], ["F#", "Gb"], ["G"], ["G#", "Ab"], ["A"], ["A#", "Bb"], ["B"]], a = function(A) {
        var e = (A - 12) / 12 + 1 >> 0
          , t = i[A % 12]
          , n = {
            noteID: A,
            octave: e,
            keys: t
        };
        o.note[A] = n,
        t.forEach(function(A) {
            var t = "" + A + e;
            o.note[t] = n
        })
    }, u = 0; u < 128; u++)
        a(u);
    for (var l in r.ProgramInfo)
        for (var c = r.ProgramInfo[l], s = 0; s < c.length; s++) {
            var p = c[s]
              , f = p.split(" ")
              , g = n(f)
              , I = g[0]
              , d = g.slice(1)
              , q = parseInt(I, 10) - 1
              , C = d.join(" ")
              , m = {
                programID: q,
                family: l,
                name: C
            };
            o.program[C] = m,
            o.program[q] = m
        }
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(24);
    Object.defineProperty(e, "MIDI", {
        enumerable: !0,
        get: function() {
            return n.MIDI
        }
    })
}
, function(A, e, t) {
    "use strict";
    A.exports = t(702)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return Object.prototype.hasOwnProperty.call(A, I) || (A[I] = f++,
        s[A[I]] = {}),
        s[A[I]]
    }
    var r, o = t(11), i = t(122), a = t(717), u = t(285), l = t(749), c = t(133), s = {}, p = !1, f = 0, g = {
        topAbort: "abort",
        topAnimationEnd: l("animationend") || "animationend",
        topAnimationIteration: l("animationiteration") || "animationiteration",
        topAnimationStart: l("animationstart") || "animationstart",
        topBlur: "blur",
        topCanPlay: "canplay",
        topCanPlayThrough: "canplaythrough",
        topChange: "change",
        topClick: "click",
        topCompositionEnd: "compositionend",
        topCompositionStart: "compositionstart",
        topCompositionUpdate: "compositionupdate",
        topContextMenu: "contextmenu",
        topCopy: "copy",
        topCut: "cut",
        topDoubleClick: "dblclick",
        topDrag: "drag",
        topDragEnd: "dragend",
        topDragEnter: "dragenter",
        topDragExit: "dragexit",
        topDragLeave: "dragleave",
        topDragOver: "dragover",
        topDragStart: "dragstart",
        topDrop: "drop",
        topDurationChange: "durationchange",
        topEmptied: "emptied",
        topEncrypted: "encrypted",
        topEnded: "ended",
        topError: "error",
        topFocus: "focus",
        topInput: "input",
        topKeyDown: "keydown",
        topKeyPress: "keypress",
        topKeyUp: "keyup",
        topLoadedData: "loadeddata",
        topLoadedMetadata: "loadedmetadata",
        topLoadStart: "loadstart",
        topMouseDown: "mousedown",
        topMouseMove: "mousemove",
        topMouseOut: "mouseout",
        topMouseOver: "mouseover",
        topMouseUp: "mouseup",
        topPaste: "paste",
        topPause: "pause",
        topPlay: "play",
        topPlaying: "playing",
        topProgress: "progress",
        topRateChange: "ratechange",
        topScroll: "scroll",
        topSeeked: "seeked",
        topSeeking: "seeking",
        topSelectionChange: "selectionchange",
        topStalled: "stalled",
        topSuspend: "suspend",
        topTextInput: "textInput",
        topTimeUpdate: "timeupdate",
        topTouchCancel: "touchcancel",
        topTouchEnd: "touchend",
        topTouchMove: "touchmove",
        topTouchStart: "touchstart",
        topTransitionEnd: l("transitionend") || "transitionend",
        topVolumeChange: "volumechange",
        topWaiting: "waiting",
        topWheel: "wheel"
    }, I = "_reactListenersID" + String(Math.random()).slice(2), d = o({}, a, {
        ReactEventListener: null,
        injection: {
            injectReactEventListener: function(A) {
                A.setHandleTopLevel(d.handleTopLevel),
                d.ReactEventListener = A
            }
        },
        setEnabled: function(A) {
            d.ReactEventListener && d.ReactEventListener.setEnabled(A)
        },
        isEnabled: function() {
            return !(!d.ReactEventListener || !d.ReactEventListener.isEnabled())
        },
        listenTo: function(A, e) {
            for (var t = e, r = n(t), o = i.registrationNameDependencies[A], a = 0; a < o.length; a++) {
                var u = o[a];
                r.hasOwnProperty(u) && r[u] || ("topWheel" === u ? c("wheel") ? d.ReactEventListener.trapBubbledEvent("topWheel", "wheel", t) : c("mousewheel") ? d.ReactEventListener.trapBubbledEvent("topWheel", "mousewheel", t) : d.ReactEventListener.trapBubbledEvent("topWheel", "DOMMouseScroll", t) : "topScroll" === u ? c("scroll", !0) ? d.ReactEventListener.trapCapturedEvent("topScroll", "scroll", t) : d.ReactEventListener.trapBubbledEvent("topScroll", "scroll", d.ReactEventListener.WINDOW_HANDLE) : "topFocus" === u || "topBlur" === u ? (c("focus", !0) ? (d.ReactEventListener.trapCapturedEvent("topFocus", "focus", t),
                d.ReactEventListener.trapCapturedEvent("topBlur", "blur", t)) : c("focusin") && (d.ReactEventListener.trapBubbledEvent("topFocus", "focusin", t),
                d.ReactEventListener.trapBubbledEvent("topBlur", "focusout", t)),
                r.topBlur = !0,
                r.topFocus = !0) : g.hasOwnProperty(u) && d.ReactEventListener.trapBubbledEvent(u, g[u], t),
                r[u] = !0)
            }
        },
        trapBubbledEvent: function(A, e, t) {
            return d.ReactEventListener.trapBubbledEvent(A, e, t)
        },
        trapCapturedEvent: function(A, e, t) {
            return d.ReactEventListener.trapCapturedEvent(A, e, t)
        },
        supportsEventPageXY: function() {
            if (!document.createEvent)
                return !1;
            var A = document.createEvent("MouseEvent");
            return null != A && "pageX"in A
        },
        ensureScrollValueMonitoring: function() {
            if (void 0 === r && (r = d.supportsEventPageXY()),
            !r && !p) {
                var A = u.refreshScrollValues;
                d.ReactEventListener.monitorScrollValue(A),
                p = !0
            }
        }
    });
    A.exports = d
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(57)
      , o = t(285)
      , i = t(131)
      , a = {
        screenX: null,
        screenY: null,
        clientX: null,
        clientY: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        getModifierState: i,
        button: function(A) {
            var e = A.button;
            return "which"in A ? e : 2 === e ? 2 : 4 === e ? 1 : 0
        },
        buttons: null,
        relatedTarget: function(A) {
            return A.relatedTarget || (A.fromElement === A.srcElement ? A.toElement : A.fromElement)
        },
        pageX: function(A) {
            return "pageX"in A ? A.pageX : A.clientX + o.currentScrollLeft
        },
        pageY: function(A) {
            return "pageY"in A ? A.pageY : A.clientY + o.currentScrollTop
        }
    };
    r.augmentClass(n, a),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    var n = t(8)
      , r = (t(5),
    {})
      , o = {
        reinitializeTransaction: function() {
            this.transactionWrappers = this.getTransactionWrappers(),
            this.wrapperInitData ? this.wrapperInitData.length = 0 : this.wrapperInitData = [],
            this._isInTransaction = !1
        },
        _isInTransaction: !1,
        getTransactionWrappers: null,
        isInTransaction: function() {
            return !!this._isInTransaction
        },
        perform: function(A, e, t, r, o, i, a, u) {
            this.isInTransaction() ? n("27") : void 0;
            var l, c;
            try {
                this._isInTransaction = !0,
                l = !0,
                this.initializeAll(0),
                c = A.call(e, t, r, o, i, a, u),
                l = !1
            } finally {
                try {
                    if (l)
                        try {
                            this.closeAll(0)
                        } catch (A) {}
                    else
                        this.closeAll(0)
                } finally {
                    this._isInTransaction = !1
                }
            }
            return c
        },
        initializeAll: function(A) {
            for (var e = this.transactionWrappers, t = A; t < e.length; t++) {
                var n = e[t];
                try {
                    this.wrapperInitData[t] = r,
                    this.wrapperInitData[t] = n.initialize ? n.initialize.call(this) : null
                } finally {
                    if (this.wrapperInitData[t] === r)
                        try {
                            this.initializeAll(t + 1)
                        } catch (A) {}
                }
            }
        },
        closeAll: function(A) {
            this.isInTransaction() ? void 0 : n("28");
            for (var e = this.transactionWrappers, t = A; t < e.length; t++) {
                var o, i = e[t], a = this.wrapperInitData[t];
                try {
                    o = !0,
                    a !== r && i.close && i.close.call(this, a),
                    o = !1
                } finally {
                    if (o)
                        try {
                            this.closeAll(t + 1)
                        } catch (A) {}
                }
            }
            this.wrapperInitData.length = 0
        }
    };
    A.exports = o
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = "" + A
          , t = r.exec(e);
        if (!t)
            return e;
        var n, o = "", i = 0, a = 0;
        for (i = t.index; i < e.length; i++) {
            switch (e.charCodeAt(i)) {
            case 34:
                n = "&quot;";
                break;
            case 38:
                n = "&amp;";
                break;
            case 39:
                n = "&#x27;";
                break;
            case 60:
                n = "&lt;";
                break;
            case 62:
                n = "&gt;";
                break;
            default:
                continue
            }
            a !== i && (o += e.substring(a, i)),
            a = i + 1,
            o += n
        }
        return a !== i ? o + e.substring(a, i) : o
    }
    function n(A) {
        return "boolean" == typeof A || "number" == typeof A ? "" + A : t(A)
    }
    var r = /["'&<>]/;
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    var n, r = t(16), o = t(121), i = /^[ \r\n\t\f]/, a = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/, u = t(129), l = u(function(A, e) {
        if (A.namespaceURI !== o.svg || "innerHTML"in A)
            A.innerHTML = e;
        else {
            n = n || document.createElement("div"),
            n.innerHTML = "<svg>" + e + "</svg>";
            for (var t = n.firstChild; t.firstChild; )
                A.appendChild(t.firstChild)
        }
    });
    if (r.canUseDOM) {
        var c = document.createElement("div");
        c.innerHTML = " ",
        "" === c.innerHTML && (l = function(A, e) {
            if (A.parentNode && A.parentNode.replaceChild(A, A),
            i.test(e) || "<" === e[0] && a.test(e)) {
                A.innerHTML = String.fromCharCode(65279) + e;
                var t = A.firstChild;
                1 === t.data.length ? A.removeChild(t) : t.deleteData(0, 1)
            } else
                A.innerHTML = e
        }
        ),
        c = null
    }
    A.exports = l
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = {};
        for (var t in A)
            Object.prototype.hasOwnProperty.call(A, t) && (e[t] = "number" == typeof A[t] ? A[t] : A[t].val);
        return e
    }
    e.__esModule = !0,
    e.default = t,
    A.exports = e.default
}
, function(A, e, t) {
    "use strict";
    function n() {
        var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10
          , e = arguments[1]
          , t = new Array(A)
          , n = 0
          , r = 0
          , a = 0
          , c = function(e) {
            t[r] = e,
            r = (r + 1) % A,
            n++
        }
          , s = function() {
            if (0 != n) {
                var e = t[a];
                return t[a] = null,
                n--,
                a = (a + 1) % A,
                e
            }
        }
          , p = function() {
            for (var A = []; n; )
                A.push(s());
            return A
        };
        return {
            isEmpty: function() {
                return 0 == n
            },
            put: function(s) {
                if (n < A)
                    c(s);
                else {
                    var f = void 0;
                    switch (e) {
                    case i:
                        throw new Error(o);
                    case u:
                        t[r] = s,
                        r = (r + 1) % A,
                        a = r;
                        break;
                    case l:
                        f = 2 * A,
                        t = p(),
                        n = t.length,
                        r = t.length,
                        a = 0,
                        t.length = f,
                        A = f,
                        c(s)
                    }
                }
            },
            take: s,
            flush: p
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.buffers = e.BUFFER_OVERFLOW = void 0;
    var r = t(27)
      , o = e.BUFFER_OVERFLOW = "Channel's Buffer overflow!"
      , i = 1
      , a = 2
      , u = 3
      , l = 4
      , c = {
        isEmpty: r.kTrue,
        put: r.noop,
        take: r.noop
    };
    e.buffers = {
        none: function() {
            return c
        },
        fixed: function(A) {
            return n(A, i)
        },
        dropping: function(A) {
            return n(A, a)
        },
        sliding: function(A) {
            return n(A, u)
        },
        expanding: function(A) {
            return n(A, l)
        }
    }
}
, function(A, e, t) {
    "use strict";
    function n() {
        function A(A) {
            return t.push(A),
            function() {
                return (0,
                u.remove)(t, A)
            }
        }
        function e(A) {
            for (var e = t.slice(), n = 0, r = e.length; n < r; n++)
                e[n](A)
        }
        var t = [];
        return {
            subscribe: A,
            emit: e
        }
    }
    function r() {
        function A() {
            if (i && a.length)
                throw (0,
                u.internalErr)("Cannot have a closed channel with pending takers");
            if (a.length && !o.isEmpty())
                throw (0,
                u.internalErr)("Cannot have pending takers with non empty buffer")
        }
        function e(e) {
            if (A(),
            (0,
            u.check)(e, u.is.notUndef, I),
            !i) {
                if (!a.length)
                    return o.put(e);
                for (var t = 0; t < a.length; t++) {
                    var n = a[t];
                    if (!n[u.MATCH] || n[u.MATCH](e))
                        return a.splice(t, 1),
                        n(e)
                }
            }
        }
        function t(e) {
            A(),
            (0,
            u.check)(e, u.is.func, "channel.take's callback must be a function"),
            i && o.isEmpty() ? e(p) : o.isEmpty() ? (a.push(e),
            e.cancel = function() {
                return (0,
                u.remove)(a, e)
            }
            ) : e(o.take())
        }
        function n(e) {
            return A(),
            (0,
            u.check)(e, u.is.func, "channel.flush' callback must be a function"),
            i && o.isEmpty() ? void e(p) : void e(o.flush())
        }
        function r() {
            if (A(),
            !i && (i = !0,
            a.length)) {
                var e = a;
                a = [];
                for (var t = 0, n = e.length; t < n; t++)
                    e[t](p)
            }
        }
        var o = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l.buffers.fixed()
          , i = !1
          , a = [];
        return (0,
        u.check)(o, u.is.buffer, g),
        {
            take: t,
            put: e,
            flush: n,
            close: r,
            get __takers__() {
                return a
            },
            get __closed__() {
                return i
            }
        }
    }
    function o(A) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : l.buffers.none()
          , t = arguments[2];
        arguments.length > 2 && (0,
        u.check)(t, u.is.func, "Invalid match function passed to eventChannel");
        var n = r(e)
          , o = A(function(A) {
            return f(A) ? void n.close() : void (t && !t(A) || n.put(A))
        });
        if (!u.is.func(o))
            throw new Error("in eventChannel: subscribe should return a function to unsubscribe");
        return {
            take: n.take,
            flush: n.flush,
            close: function() {
                n.__closed__ || (n.close(),
                o())
            }
        }
    }
    function i(A) {
        var e = o(function(e) {
            return A(function(A) {
                return A[u.SAGA_ACTION] ? void e(A) : void (0,
                c.asap)(function() {
                    return e(A)
                })
            })
        });
        return a({}, e, {
            take: function(A, t) {
                arguments.length > 1 && ((0,
                u.check)(t, u.is.func, "channel.take's matcher argument must be a function"),
                A[u.MATCH] = t),
                e.take(A)
            }
        })
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.UNDEFINED_INPUT_ERROR = e.INVALID_BUFFER = e.isEnd = e.END = void 0;
    var a = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
    ;
    e.emitter = n,
    e.channel = r,
    e.eventChannel = o,
    e.stdChannel = i;
    var u = t(27)
      , l = t(82)
      , c = t(311)
      , s = "@@redux-saga/CHANNEL_END"
      , p = e.END = {
        type: s
    }
      , f = e.isEnd = function(A) {
        return A && A.type === s
    }
      , g = e.INVALID_BUFFER = "invalid buffer passed to channel factory function"
      , I = e.UNDEFINED_INPUT_ERROR = "Saga was provided with an undefined action"
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function r() {
        var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "*";
        if (arguments.length && (0,
        S.check)(arguments[0], S.is.notUndef, "take(patternOrChannel): patternOrChannel is undefined"),
        S.is.pattern(A))
            return W(v, {
                pattern: A
            });
        if (S.is.channel(A))
            return W(v, {
                channel: A
            });
        throw new Error("take(patternOrChannel): argument " + String(A) + " is not valid channel or a valid pattern")
    }
    function o(A, e) {
        return arguments.length > 1 ? ((0,
        S.check)(A, S.is.notUndef, "put(channel, action): argument channel is undefined"),
        (0,
        S.check)(A, S.is.channel, "put(channel, action): argument " + A + " is not a valid channel"),
        (0,
        S.check)(e, S.is.notUndef, "put(channel, action): argument action is undefined")) : ((0,
        S.check)(A, S.is.notUndef, "put(action): argument action is undefined"),
        e = A,
        A = null),
        W(R, {
            channel: A,
            action: e
        })
    }
    function i(A) {
        return W(U, A)
    }
    function a(A, e, t) {
        (0,
        S.check)(e, S.is.notUndef, A + ": argument fn is undefined");
        var n = null;
        if (S.is.array(e)) {
            var r = e
              , o = E(r, 2);
            n = o[0],
            e = o[1]
        } else if (e.fn) {
            var i = e;
            n = i.context,
            e = i.fn
        }
        return (0,
        S.check)(e, S.is.func, A + ": argument " + e + " is not a function"),
        {
            context: n,
            fn: e,
            args: t
        }
    }
    function u(A) {
        for (var e = arguments.length, t = Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
            t[n - 1] = arguments[n];
        return W(G, a("call", A, t))
    }
    function l(A, e) {
        var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
        return W(G, a("apply", {
            context: A,
            fn: e
        }, t))
    }
    function c(A) {
        for (var e = arguments.length, t = Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
            t[n - 1] = arguments[n];
        return W(Q, a("cps", A, t))
    }
    function s(A) {
        for (var e = arguments.length, t = Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
            t[n - 1] = arguments[n];
        return W(Z, a("fork", A, t))
    }
    function p(A) {
        for (var e = arguments.length, t = Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
            t[n - 1] = arguments[n];
        var r = s.apply(void 0, [A].concat(t));
        return r[Z].detached = !0,
        r
    }
    function f() {
        for (var A = arguments.length, e = Array(A), t = 0; t < A; t++)
            e[t] = arguments[t];
        if (e.length > 1)
            return e.map(function(A) {
                return f(A)
            });
        var n = e[0];
        return (0,
        S.check)(n, S.is.notUndef, "join(task): argument task is undefined"),
        (0,
        S.check)(n, S.is.task, "join(task): argument " + n + " is not a valid Task object " + N),
        W(O, n)
    }
    function g() {
        for (var A = arguments.length, e = Array(A), t = 0; t < A; t++)
            e[t] = arguments[t];
        if (e.length > 1)
            return e.map(function(A) {
                return g(A)
            });
        var n = e[0];
        return 1 === e.length && ((0,
        S.check)(n, S.is.notUndef, "cancel(task): argument task is undefined"),
        (0,
        S.check)(n, S.is.task, "cancel(task): argument " + n + " is not a valid Task object " + N)),
        W(j, n || S.SELF_CANCELLATION)
    }
    function I(A) {
        for (var e = arguments.length, t = Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
            t[n - 1] = arguments[n];
        return 0 === arguments.length ? A = S.ident : ((0,
        S.check)(A, S.is.notUndef, "select(selector,[...]): argument selector is undefined"),
        (0,
        S.check)(A, S.is.func, "select(selector,[...]): argument " + A + " is not a function")),
        W(B, {
            selector: A,
            args: t
        })
    }
    function d(A, e) {
        return (0,
        S.check)(A, S.is.notUndef, "actionChannel(pattern,...): argument pattern is undefined"),
        arguments.length > 1 && ((0,
        S.check)(e, S.is.notUndef, "actionChannel(pattern, buffer): argument buffer is undefined"),
        (0,
        S.check)(e, S.is.buffer, "actionChannel(pattern, buffer): argument " + e + " is not a valid buffer")),
        W(w, {
            pattern: A,
            buffer: e
        })
    }
    function q() {
        return W(Y, {})
    }
    function C(A) {
        return (0,
        S.check)(A, S.is.channel, "flush(channel): argument " + A + " is not valid channel"),
        W(T, A)
    }
    function m(A) {
        return (0,
        S.check)(A, S.is.string, "getContext(prop): argument " + A + " is not a string"),
        W(D, A)
    }
    function y(A) {
        return (0,
        S.check)(A, S.is.object, (0,
        S.createSetContextWarning)(null, A)),
        W(K, A)
    }
    function h(A, e) {
        for (var t = arguments.length, n = Array(t > 2 ? t - 2 : 0), r = 2; r < t; r++)
            n[r - 2] = arguments[r];
        return s.apply(void 0, [k.takeEveryHelper, A, e].concat(n))
    }
    function M(A, e) {
        for (var t = arguments.length, n = Array(t > 2 ? t - 2 : 0), r = 2; r < t; r++)
            n[r - 2] = arguments[r];
        return s.apply(void 0, [k.takeLatestHelper, A, e].concat(n))
    }
    function V(A, e, t) {
        for (var n = arguments.length, r = Array(n > 3 ? n - 3 : 0), o = 3; o < n; o++)
            r[o - 3] = arguments[o];
        return s.apply(void 0, [k.throttleHelper, A, e, t].concat(r))
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.asEffect = e.takem = void 0;
    var E = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }();
    e.take = r,
    e.put = o,
    e.race = i,
    e.call = u,
    e.apply = l,
    e.cps = c,
    e.fork = s,
    e.spawn = p,
    e.join = f,
    e.cancel = g,
    e.select = I,
    e.actionChannel = d,
    e.cancelled = q,
    e.flush = C,
    e.getContext = m,
    e.setContext = y,
    e.takeEvery = h,
    e.takeLatest = M,
    e.throttle = V;
    var S = t(27)
      , k = t(310)
      , b = (0,
    S.sym)("IO")
      , v = "TAKE"
      , R = "PUT"
      , U = "RACE"
      , G = "CALL"
      , Q = "CPS"
      , Z = "FORK"
      , O = "JOIN"
      , j = "CANCEL"
      , B = "SELECT"
      , w = "ACTION_CHANNEL"
      , Y = "CANCELLED"
      , T = "FLUSH"
      , D = "GET_CONTEXT"
      , K = "SET_CONTEXT"
      , N = "\n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)"
      , J = function(A, e) {
        return A + " has been deprecated in favor of " + e + ", please update your code"
    }
      , W = function(A, e) {
        var t;
        return t = {},
        n(t, b, !0),
        n(t, A, e),
        t
    };
    r.maybe = function() {
        var A = r.apply(void 0, arguments);
        return A[v].maybe = !0,
        A
    }
    ;
    e.takem = (0,
    S.deprecate)(r.maybe, J("takem", "take.maybe"));
    o.resolve = function() {
        var A = o.apply(void 0, arguments);
        return A[R].resolve = !0,
        A
    }
    ,
    o.sync = (0,
    S.deprecate)(o.resolve, J("put.sync", "put.resolve"));
    var z = function(A) {
        return function(e) {
            return e && e[b] && e[A]
        }
    };
    e.asEffect = {
        take: z(v),
        put: z(R),
        race: z(U),
        call: z(G),
        cps: z(Q),
        fork: z(Z),
        join: z(O),
        cancel: z(j),
        select: z(B),
        actionChannel: z(w),
        cancelled: z(Y),
        flush: z(T),
        getContext: z(D),
        setContext: z(K)
    }
}
, function(A, e, t) {
    function n(A) {
        var e = -1
          , t = A ? A.length : 0;
        for (this.clear(); ++e < t; ) {
            var n = A[e];
            this.set(n[0], n[1])
        }
    }
    var r = t(865)
      , o = t(866)
      , i = t(867)
      , a = t(868)
      , u = t(869);
    n.prototype.clear = r,
    n.prototype.delete = o,
    n.prototype.get = i,
    n.prototype.has = a,
    n.prototype.set = u,
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        for (var t = A.length; t--; )
            if (r(A[t][0], e))
                return t;
        return -1
    }
    var r = t(334);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        var t = A.__data__;
        return r(e) ? t["string" == typeof e ? "string" : "hash"] : t.map
    }
    var r = t(863);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        if (r(A))
            return !1;
        var t = typeof A;
        return !("number" != t && "symbol" != t && "boolean" != t && null != A && !o(A)) || (a.test(A) || !i.test(A) || null != e && A in Object(e))
    }
    var r = t(28)
      , o = t(93)
      , i = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/
      , a = /^\w*$/;
    A.exports = n
}
, function(A, e, t) {
    var n = t(45)
      , r = n(Object, "create");
    A.exports = r
}
, function(A, e, t) {
    function n(A) {
        if ("string" == typeof A || r(A))
            return A;
        var e = A + "";
        return "0" == e && 1 / A == -o ? "-0" : e
    }
    var r = t(93)
      , o = 1 / 0;
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        return null != A && i(r(A)) && !o(A)
    }
    var r = t(850)
      , o = t(59)
      , i = t(92);
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return "number" == typeof A && A > -1 && A % 1 == 0 && A <= n
    }
    var n = 9007199254740991;
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        return "symbol" == typeof A || r(A) && a.call(A) == o
    }
    var r = t(60)
      , o = "[object Symbol]"
      , i = Object.prototype
      , a = i.toString;
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        var e = l(A);
        if (!e && !a(A))
            return o(A);
        var t = i(A)
          , n = !!t
          , c = t || []
          , s = c.length;
        for (var p in A)
            !r(A, p) || n && ("length" == p || u(p, s)) || e && "constructor" == p || c.push(p);
        return c
    }
    var r = t(324)
      , o = t(833)
      , i = t(859)
      , a = t(91)
      , u = t(143)
      , l = t(864);
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(74)
      , r = t(23)
      , o = {
        click: {
            note: "C1"
        },
        undo: {
            note: "F3"
        },
        redo: {
            note: "A4"
        },
        newDocument: {
            note: "G1"
        },
        toggleDialog: {
            note: "F1"
        },
        stickerSlap: {
            note: "E3"
        }
    };
    (0,
    r.eachTool)(function(A) {
        return Object.assign(o, A.soundButtons())
    }),
    Object.keys(o).forEach(function(A, e) {
        Object.hasOwnProperty.call(o, A) && (o[A].channelID = e)
    }),
    e.default = new n.MIDI.Pad(o)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(1)
      , i = n(o)
      , a = t(61)
      , u = n(a)
      , l = t(221)
      , c = n(l)
      , s = {
        backgroundImage: "url(" + c.default + ")"
    }
      , p = function(A) {
        var e = A.type
          , t = A.children
          , n = r(A, ["type", "children"]);
        return i.default.createElement(u.default, Object.assign({}, n, {
            type: [e, "MenuDialog"],
            tailPosition: "10_of_10",
            tailStyle: s,
            insetTop: 4,
            insetBottom: 1.25
        }), t)
    };
    e.default = p
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.PaginatedDialog = e.PageNavigator = e.PageIndicator = void 0;
    var o = t(1)
      , i = n(o)
      , a = t(61)
      , u = n(a)
      , l = t(49)
      , c = t(12)
      , s = t(229)
      , p = n(s)
      , f = t(230)
      , g = n(f)
      , I = t(228)
      , d = n(I)
      , q = t(227)
      , C = n(q)
      , m = t(2)
      , y = n(m)
      , h = (0,
    y.default)("ABCya-paint:src/components/dialogs/PaginatedDialog")
      , M = 12
      , V = 1
      , E = -1
      , S = e.PageIndicator = function(A) {
        var e = A.isActive
          , t = void 0 !== e && e;
        return i.default.createElement(l.ClickRegion, {
            iconURL: t ? C.default : d.default
        })
    }
      , k = e.PageNavigator = function(A) {
        for (var e = A.pageCount, t = A.activePage, n = void 0 === t ? 0 : t, r = [], o = 0; o < e; o += 1)
            r.push(i.default.createElement(S, {
                isActive: n === o,
                key: o
            }));
        return i.default.createElement("div", {
            className: (0,
            c.classnames)("page-navigator")
        }, r)
    }
      , b = function(A) {
        var e = A.children;
        return i.default.createElement("div", {
            className: (0,
            c.classnames)("dialog-contents")
        }, e)
    }
      , v = function(A) {
        var e = A.type
          , t = A.tailPosition
          , n = A.tailStyle
          , a = A.page
          , s = void 0 === a ? 0 : a
          , f = A.setPage
          , I = A.children
          , d = A.selectItem
          , q = r(A, ["type", "tailPosition", "tailStyle", "page", "setPage", "children", "selectItem"])
          , C = o.Children.count(I) > M
          , m = void 0;
        if (0 === o.Children.count(I))
            h("No children were passed in!");
        else {
            var y = (0,
            c.partition)(o.Children.toArray(I), M)
              , S = y.length
              , v = function(A) {
                var e = A.direction;
                return i.default.createElement(l.ClickRegion, {
                    type: "PageChanger",
                    iconURL: e === V ? p.default : g.default,
                    onClick: function() {
                        return f((0,
                        c.safeModulo)(s + e, S))
                    }
                })
            }
              , R = function(A) {
                var e = A.page
                  , t = e.map(function(A) {
                    return i.default.createElement(l.DialogRegion, {
                        isRectangle: !C,
                        key: A.key,
                        onClick: function() {
                            return d(A.props.itemID)
                        }
                    }, A)
                });
                return t = (0,
                c.padWith)(t, M, function(A) {
                    return i.default.createElement(l.DialogRegion, {
                        isRectangle: !C,
                        key: "EmptyRegion_" + A,
                        isDisabled: !0
                    })
                }),
                i.default.createElement("div", {
                    className: (0,
                    c.classnames)("dialog-page", "multi_" + C)
                }, t)
            };
            1 === S ? m = i.default.createElement(b, null, i.default.createElement(R, {
                page: y[s]
            })) : (h("Rendering page %s of %s", s + 1, S),
            m = [i.default.createElement(k, {
                key: "page_navigator",
                pageCount: S,
                activePage: s
            }), i.default.createElement(b, {
                key: "dialog_contents"
            }, i.default.createElement(v, {
                key: "page_previous",
                direction: E
            }), i.default.createElement(R, {
                key: "dialog_page",
                page: y[s]
            }), i.default.createElement(v, {
                key: "page_next",
                direction: V
            }))])
        }
        return i.default.createElement(u.default, Object.assign({}, q, {
            type: [e, "PaginatedDialog"],
            tailPosition: t,
            tailStyle: n
        }), m)
    };
    e.PaginatedDialog = v
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(61);
    Object.defineProperty(e, "Dialog", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(96);
    Object.defineProperty(e, "MenuDialog", {
        enumerable: !0,
        get: function() {
            return n(o).default;
        }
    });
    var i = t(379);
    Object.defineProperty(e, "MainMenuDialog", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(156);
    Object.defineProperty(e, "ColorPickerDialog", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(378);
    Object.defineProperty(e, "ConfirmationDialog", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(97);
    Object.keys(l).forEach(function(A) {
        "default" !== A && "__esModule" !== A && Object.defineProperty(e, A, {
            enumerable: !0,
            get: function() {
                return l[A]
            }
        })
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = t(1)
      , c = n(l)
      , s = t(12)
      , p = function(A) {
        function e() {
            return o(this, e),
            i(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return a(e, A),
        u(e, [{
            key: "render",
            value: function() {
                var A = this.props
                  , e = A.type
                  , t = A.bgColor
                  , n = A.children
                  , o = r(A, ["type", "bgColor", "children"])
                  , i = (0,
                s.classnames)(e, "Pane");
                return c.default.createElement("div", Object.assign({}, o, {
                    className: i,
                    style: {
                        backgroundColor: t
                    }
                }), n)
            }
        }]),
        e
    }(l.PureComponent);
    e.default = p
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(64)
      , a = n(i)
      , u = function() {
        return o.default.createElement(a.default, {
            type: "spacer"
        })
    };
    e.default = u
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return Array.isArray(A) ? A : Array.from(A)
    }
    function o(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function i(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function a(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function u(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var l = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , c = t(1)
      , s = n(c)
      , p = t(33)
      , f = t(12)
      , g = t(50)
      , I = n(g)
      , d = function(A) {
        function e() {
            return i(this, e),
            a(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return u(e, A),
        l(e, [{
            key: "render",
            value: function() {
                var A = this.props
                  , e = A.children
                  , t = A.style;
                return s.default.createElement("div", {
                    className: (0,
                    f.classnames)("TrayItem"),
                    style: t
                }, e)
            }
        }]),
        e
    }(c.PureComponent)
      , q = function(A) {
        function e() {
            return i(this, e),
            a(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return u(e, A),
        l(e, [{
            key: "render",
            value: function() {
                var A = this.props
                  , e = A.type
                  , t = A.isOpen
                  , n = A.children
                  , i = o(A, ["type", "isOpen", "children"])
                  , a = (0,
                f.classnames)(e, "Tray", {
                    "Tray--open": t
                })
                  , u = s.default.Children.toArray(n)
                  , l = r(u)
                  , c = l[0]
                  , g = l.slice(1);
                return s.default.createElement("div", Object.assign({
                    className: a
                }, i), s.default.createElement(d, null, c), g.map(function(A, e) {
                    return I.default ? s.default.createElement(p.Motion, {
                        key: e,
                        defaultStyle: {
                            scaleY: 0
                        },
                        style: {
                            scaleY: (0,
                            p.spring)(t ? 1 : 0, {
                                stiffness: 150 + 100 * Math.random(),
                                damping: 12
                            })
                        }
                    }, function(e) {
                        var t = e.scaleY;
                        return s.default.createElement(d, {
                            style: {
                                transform: "scale3d(1, " + t + ", 1)"
                            }
                        }, A)
                    }) : s.default.createElement(d, {
                        key: A.key,
                        style: {
                            transform: "scale3d(1, " + (t ? 1 : 0) + ", 1)"
                        }
                    }, A)
                }))
            }
        }]),
        e
    }(c.PureComponent);
    e.default = q
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    function a(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , l = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , c = t(1)
      , s = n(c)
      , p = t(75)
      , f = n(p)
      , g = t(6)
      , I = t(3)
      , d = n(I)
      , q = t(20)
      , C = n(q)
      , m = t(106)
      , y = n(m)
      , h = t(4)
      , M = t(67)
      , V = n(M)
      , E = t(2)
      , S = n(E)
      , k = (0,
    S.default)("ABCya-paint:src/containers/ToolButton.js")
      , b = (0,
    g.connect)(null, function(A, e) {
        var t = e.tool
          , n = e.tooltip
          , r = e.category;
        return {
            onClick: function() {
                A({
                    type: d.default.SET_TOOL,
                    tool: t,
                    category: r
                })
            },
            showTooltip: function(e) {
                A({
                    type: d.default.SHOW_TOOLTIP,
                    tooltip: n,
                    anchor: e
                })
            },
            hideTooltip: function() {
                A({
                    type: d.default.HIDE_TOOLTIP
                })
            }
        }
    }, function(A, e, t) {
        var n = (t.tool,
        t.tooltip,
        t.category,
        a(t, ["tool", "tooltip", "category"]));
        return Object.assign({}, A, e, n)
    })(function(A) {
        function e(A) {
            r(this, e);
            var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.handles = [],
            t
        }
        return i(e, A),
        l(e, [{
            key: "componentDidMount",
            value: function() {
                var A = this
                  , e = f.default.findDOMNode(this);
                h.AsyncObject.waitFor(h.Gesture, h.paintRoot).then(function(t) {
                    var n = u(t, 2)
                      , r = n[0]
                      , o = n[1]
                      , i = function(t) {
                        if (!t.env.alreadyDispatched) {
                            var n = o.getBoundingClientRect()
                              , r = e.getBoundingClientRect()
                              , i = r.left - n.left
                              , a = r.top - n.top
                              , u = {
                                x: (i + r.width / 2) / n.width * 100,
                                y: (a + r.height / 3) / n.height * 100
                            };
                            k('Displaying tooltip at "%j"', u),
                            A.props.showTooltip(u),
                            t.env.alreadyDispatched = !0
                        }
                    }
                      , a = function() {
                        k("No longer hovering over tool button"),
                        A.props.hideTooltip()
                    };
                    if (V.default.isMobile()) {
                        var l = function A() {
                            var t = r.longpress(e, function(e) {
                                i(e);
                                var n = r.on(window, "touchend", function() {
                                    a(),
                                    n.detach(),
                                    t.detach(),
                                    A()
                                })
                            })
                        };
                        l()
                    } else
                        A.handles.push(r.hover(e, i, {
                            delay: 400
                        })),
                        A.handles.push(r.on(e, "mouseout", a))
                })
            }
        }, {
            key: "componentWillUnmount",
            value: function() {
                k("Detaching gesture handlers"),
                this.handles.forEach(function(A) {
                    return A.detach()
                }),
                this.handles = []
            }
        }, {
            key: "render",
            value: function() {
                var A = this.props
                  , e = (A.showTooltip,
                A.hideTooltip,
                A.type)
                  , t = (A.dispatch,
                a(A, ["showTooltip", "hideTooltip", "type", "dispatch"]));
                return s.default.createElement(C.default, Object.assign({
                    type: (0,
                    y.default)(e, "ToolButton")
                }, t))
            }
        }]),
        e
    }(c.Component));
    e.default = b
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(3)
      , i = n(o)
      , a = t(157)
      , u = n(a)
      , l = "ColorPicker";
    e.default = (0,
    r.connect)(function(A) {
        var e = A.color
          , t = A.dialog;
        return {
            color: e,
            isActive: t === l
        }
    }, function(A) {
        return {
            onClick: function() {
                A({
                    type: i.default.TOGGLE_DIALOG,
                    dialog: l
                })
            }
        }
    })(u.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(6)
      , i = t(3)
      , a = n(i)
      , u = t(165)
      , l = n(u)
      , c = t(36)
      , s = n(c);
    e.default = (0,
    o.connect)(null, function(A) {
        return {
            onBack: function() {
                A({
                    type: a.default.CLOSE_EDITOR
                })
            }
        }
    }, function(A, e, t) {
        var n = t.category
          , o = r(t, ["category"])
          , i = void 0
          , a = s.default.byName(n);
        return a && (i = a.color),
        Object.assign({
            type: n
        }, e, o, {
            bgColor: i
        })
    })(l.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(31)
      , o = n(r);
    e.default = (0,
    o.default)({
        feature: "the on-screen keyboard",
        sigil: "ONSCREEN_KEYBOARD",
        defaults: {
            mobile: !0,
            desktop: !1
        }
    })
}
, function(A, e) {
    "use strict";
    function t(A) {
        return A.reduce(function(A, e) {
            return A.concat(Array.isArray(e) ? t(e) : e)
        }, [])
    }
    function n(A) {
        return "undefined" != typeof A && (!A.hasOwnProperty("length") || A.length)
    }
    function r() {
        for (var A = arguments.length, e = Array(A), r = 0; r < A; r++)
            e[r] = arguments[r];
        return t(e).filter(n)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = r
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(530);
    Object.defineProperty(e, "Sticker_01", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(531);
    Object.defineProperty(e, "Sticker_02", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(532);
    Object.defineProperty(e, "Sticker_03", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(533);
    Object.defineProperty(e, "Sticker_04", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(534);
    Object.defineProperty(e, "Sticker_05", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(535);
    Object.defineProperty(e, "Sticker_06", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(536);
    Object.defineProperty(e, "Sticker_07", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    });
    var s = t(537);
    Object.defineProperty(e, "Sticker_08", {
        enumerable: !0,
        get: function() {
            return n(s).default
        }
    });
    var p = t(538);
    Object.defineProperty(e, "Sticker_09", {
        enumerable: !0,
        get: function() {
            return n(p).default
        }
    });
    var f = t(539);
    Object.defineProperty(e, "Sticker_10", {
        enumerable: !0,
        get: function() {
            return n(f).default
        }
    });
    var g = t(540);
    Object.defineProperty(e, "Sticker_11", {
        enumerable: !0,
        get: function() {
            return n(g).default
        }
    });
    var I = t(541);
    Object.defineProperty(e, "Sticker_12", {
        enumerable: !0,
        get: function() {
            return n(I).default
        }
    });
    var d = t(542);
    Object.defineProperty(e, "Sticker_13", {
        enumerable: !0,
        get: function() {
            return n(d).default
        }
    });
    var q = t(543);
    Object.defineProperty(e, "Sticker_14", {
        enumerable: !0,
        get: function() {
            return n(q).default
        }
    });
    var C = t(544);
    Object.defineProperty(e, "Sticker_15", {
        enumerable: !0,
        get: function() {
            return n(C).default
        }
    });
    var m = t(545);
    Object.defineProperty(e, "Sticker_16", {
        enumerable: !0,
        get: function() {
            return n(m).default
        }
    });
    var y = t(546);
    Object.defineProperty(e, "Sticker_17", {
        enumerable: !0,
        get: function() {
            return n(y).default
        }
    });
    var h = t(547);
    Object.defineProperty(e, "Sticker_18", {
        enumerable: !0,
        get: function() {
            return n(h).default
        }
    });
    var M = t(548);
    Object.defineProperty(e, "Sticker_19", {
        enumerable: !0,
        get: function() {
            return n(M).default
        }
    });
    var V = t(549);
    Object.defineProperty(e, "Sticker_20", {
        enumerable: !0,
        get: function() {
            return n(V).default
        }
    });
    var E = t(550);
    Object.defineProperty(e, "Sticker_21", {
        enumerable: !0,
        get: function() {
            return n(E).default
        }
    });
    var S = t(551);
    Object.defineProperty(e, "Sticker_22", {
        enumerable: !0,
        get: function() {
            return n(S).default
        }
    });
    var k = t(552);
    Object.defineProperty(e, "Sticker_23", {
        enumerable: !0,
        get: function() {
            return n(k).default
        }
    });
    var b = t(553);
    Object.defineProperty(e, "Sticker_24", {
        enumerable: !0,
        get: function() {
            return n(b).default
        }
    });
    var v = t(554);
    Object.defineProperty(e, "Sticker_25", {
        enumerable: !0,
        get: function() {
            return n(v).default
        }
    });
    var R = t(555);
    Object.defineProperty(e, "Sticker_26", {
        enumerable: !0,
        get: function() {
            return n(R).default
        }
    });
    var U = t(556);
    Object.defineProperty(e, "Sticker_27", {
        enumerable: !0,
        get: function() {
            return n(U).default
        }
    });
    var G = t(557);
    Object.defineProperty(e, "Sticker_28", {
        enumerable: !0,
        get: function() {
            return n(G).default
        }
    });
    var Q = t(558);
    Object.defineProperty(e, "Sticker_29", {
        enumerable: !0,
        get: function() {
            return n(Q).default
        }
    });
    var Z = t(559);
    Object.defineProperty(e, "Sticker_30", {
        enumerable: !0,
        get: function() {
            return n(Z).default
        }
    });
    var O = t(560);
    Object.defineProperty(e, "Sticker_31", {
        enumerable: !0,
        get: function() {
            return n(O).default
        }
    });
    var j = t(561);
    Object.defineProperty(e, "Sticker_32", {
        enumerable: !0,
        get: function() {
            return n(j).default
        }
    });
    var B = t(562);
    Object.defineProperty(e, "Sticker_33", {
        enumerable: !0,
        get: function() {
            return n(B).default
        }
    });
    var w = t(563);
    Object.defineProperty(e, "Sticker_34", {
        enumerable: !0,
        get: function() {
            return n(w).default
        }
    });
    var Y = t(564);
    Object.defineProperty(e, "Sticker_35", {
        enumerable: !0,
        get: function() {
            return n(Y).default
        }
    });
    var T = t(565);
    Object.defineProperty(e, "Sticker_36", {
        enumerable: !0,
        get: function() {
            return n(T).default
        }
    });
    var D = t(566);
    Object.defineProperty(e, "Sticker_37", {
        enumerable: !0,
        get: function() {
            return n(D).default
        }
    });
    var K = t(567);
    Object.defineProperty(e, "Sticker_38", {
        enumerable: !0,
        get: function() {
            return n(K).default
        }
    });
    var N = t(568);
    Object.defineProperty(e, "Sticker_39", {
        enumerable: !0,
        get: function() {
            return n(N).default
        }
    });
    var J = t(569);
    Object.defineProperty(e, "Sticker_40", {
        enumerable: !0,
        get: function() {
            return n(J).default
        }
    });
    var W = t(570);
    Object.defineProperty(e, "Sticker_41", {
        enumerable: !0,
        get: function() {
            return n(W).default
        }
    });
    var z = t(571);
    Object.defineProperty(e, "Sticker_42", {
        enumerable: !0,
        get: function() {
            return n(z).default
        }
    });
    var x = t(572);
    Object.defineProperty(e, "Sticker_43", {
        enumerable: !0,
        get: function() {
            return n(x).default
        }
    });
    var L = t(573);
    Object.defineProperty(e, "Sticker_44", {
        enumerable: !0,
        get: function() {
            return n(L).default
        }
    });
    var F = t(574);
    Object.defineProperty(e, "Sticker_45", {
        enumerable: !0,
        get: function() {
            return n(F).default
        }
    });
    var P = t(575);
    Object.defineProperty(e, "Sticker_46", {
        enumerable: !0,
        get: function() {
            return n(P).default
        }
    });
    var X = t(576);
    Object.defineProperty(e, "Sticker_47", {
        enumerable: !0,
        get: function() {
            return n(X).default
        }
    });
    var H = t(577);
    Object.defineProperty(e, "Sticker_48", {
        enumerable: !0,
        get: function() {
            return n(H).default
        }
    });
    var _ = t(578);
    Object.defineProperty(e, "Sticker_49", {
        enumerable: !0,
        get: function() {
            return n(_).default
        }
    });
    var $ = t(579);
    Object.defineProperty(e, "Sticker_50", {
        enumerable: !0,
        get: function() {
            return n($).default
        }
    });
    var AA = t(580);
    Object.defineProperty(e, "Sticker_51", {
        enumerable: !0,
        get: function() {
            return n(AA).default
        }
    });
    var eA = t(581);
    Object.defineProperty(e, "Sticker_52", {
        enumerable: !0,
        get: function() {
            return n(eA).default
        }
    });
    var tA = t(582);
    Object.defineProperty(e, "Sticker_53", {
        enumerable: !0,
        get: function() {
            return n(tA).default
        }
    });
    var nA = t(583);
    Object.defineProperty(e, "Sticker_54", {
        enumerable: !0,
        get: function() {
            return n(nA).default
        }
    });
    var rA = t(584);
    Object.defineProperty(e, "Sticker_55", {
        enumerable: !0,
        get: function() {
            return n(rA).default
        }
    });
    var oA = t(585);
    Object.defineProperty(e, "Sticker_56", {
        enumerable: !0,
        get: function() {
            return n(oA).default
        }
    });
    var iA = t(586);
    Object.defineProperty(e, "Sticker_57", {
        enumerable: !0,
        get: function() {
            return n(iA).default
        }
    });
    var aA = t(587);
    Object.defineProperty(e, "Sticker_58", {
        enumerable: !0,
        get: function() {
            return n(aA).default
        }
    });
    var uA = t(588);
    Object.defineProperty(e, "Sticker_59", {
        enumerable: !0,
        get: function() {
            return n(uA).default
        }
    });
    var lA = t(589);
    Object.defineProperty(e, "Sticker_60", {
        enumerable: !0,
        get: function() {
            return n(lA).default
        }
    });
    var cA = t(590);
    Object.defineProperty(e, "Sticker_61", {
        enumerable: !0,
        get: function() {
            return n(cA).default
        }
    });
    var sA = t(591);
    Object.defineProperty(e, "Sticker_62", {
        enumerable: !0,
        get: function() {
            return n(sA).default
        }
    });
    var pA = t(592);
    Object.defineProperty(e, "Sticker_63", {
        enumerable: !0,
        get: function() {
            return n(pA).default
        }
    });
    var fA = t(593);
    Object.defineProperty(e, "Sticker_64", {
        enumerable: !0,
        get: function() {
            return n(fA).default
        }
    });
    var gA = t(594);
    Object.defineProperty(e, "Sticker_65", {
        enumerable: !0,
        get: function() {
            return n(gA).default
        }
    });
    var IA = t(595);
    Object.defineProperty(e, "Sticker_66", {
        enumerable: !0,
        get: function() {
            return n(IA).default
        }
    });
    var dA = t(596);
    Object.defineProperty(e, "Sticker_67", {
        enumerable: !0,
        get: function() {
            return n(dA).default
        }
    });
    var qA = t(597);
    Object.defineProperty(e, "Sticker_68", {
        enumerable: !0,
        get: function() {
            return n(qA).default
        }
    });
    var CA = t(598);
    Object.defineProperty(e, "Sticker_69", {
        enumerable: !0,
        get: function() {
            return n(CA).default
        }
    });
    var mA = t(599);
    Object.defineProperty(e, "Sticker_70", {
        enumerable: !0,
        get: function() {
            return n(mA).default
        }
    });
    var yA = t(600);
    Object.defineProperty(e, "Sticker_71", {
        enumerable: !0,
        get: function() {
            return n(yA).default
        }
    });
    var hA = t(601);
    Object.defineProperty(e, "Sticker_72", {
        enumerable: !0,
        get: function() {
            return n(hA).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = t(4)
      , c = t(15)
      , s = n(c)
      , p = t(10)
      , f = n(p)
      , g = function(A) {
        function e(A) {
            var t = A.pointerImage
              , n = A.opacity
              , a = void 0 === n ? 1 : n
              , u = r(A, ["pointerImage", "opacity"]);
            o(this, e);
            var l = i(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, Object.assign({}, u, {
                sketchTool: "pencil",
                soundAttributes: {
                    note: "B1",
                    requiresInteraction: !0
                }
            })));
            return l.pointerImage = t,
            l.opacity = a,
            l
        }
        return a(e, A),
        u(e, [{
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: this.pointerImage,
                    height: 22
                }
            }
        }, {
            key: "soundButtons",
            value: function() {
                return {
                    brushStroke: {
                        note: "B1",
                        requiresInteraction: !0,
                        maxSimultaneous: 1
                    }
                }
            }
        }, {
            key: "canvasSound",
            value: function() {
                return "brushStroke"
            }
        }, {
            key: "updateSketch",
            value: function() {
                var A = this;
                return l.sketch.await().then(function(e) {
                    var t = s.default.getState()
                      , n = t.color
                      , r = t.nibSize;
                    e.config("pencil", {
                        fill: {
                            enabled: !1
                        },
                        stroke: {
                            type: "color",
                            color: n,
                            opacity: A.opacity
                        },
                        diameter: r
                    })
                })
            }
        }]),
        e
    }(f.default);
    e.default = g
}
, function(A, e, t) {
    "use strict";
    var n = t(1)
      , r = t(184);
    if ("undefined" == typeof n)
        throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");
    var o = (new n.Component).updater;
    A.exports = r(n.Component, n.isValidElement, o)
}
, function(A, e) {
    "use strict";
    function t(A, e) {
        return A === e ? 0 !== A || 0 !== e || 1 / A === 1 / e : A !== A && e !== e
    }
    function n(A, e) {
        if (t(A, e))
            return !0;
        if ("object" != typeof A || null === A || "object" != typeof e || null === e)
            return !1;
        var n = Object.keys(A)
          , o = Object.keys(e);
        if (n.length !== o.length)
            return !1;
        for (var i = 0; i < n.length; i++)
            if (!r.call(e, n[i]) || !t(A[n[i]], e[n[i]]))
                return !1;
        return !0
    }
    var r = Object.prototype.hasOwnProperty;
    A.exports = n
}
, function(A, e) {
    A.exports = {
        yellow: "#ffc627",
        orange: "#efa30c",
        green: "#007f7f",
        blue: "#006f96",
        purple: "#9f48bc",
        red: "#ea3d21"
    }
}
, function(A, e, t) {
    function n(A) {
        if (!i(A) || r(A) != a)
            return !1;
        var e = o(A);
        if (null === e)
            return !0;
        var t = s.call(e, "constructor") && e.constructor;
        return "function" == typeof t && t instanceof t && c.call(t) == p
    }
    var r = t(661)
      , o = t(663)
      , i = t(668)
      , a = "[object Object]"
      , u = Function.prototype
      , l = Object.prototype
      , c = u.toString
      , s = l.hasOwnProperty
      , p = c.call(Object);
    A.exports = n
}
, function(A, e) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var t = new RegExp("^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$");
    e.Base64 = {
        test: t.test.bind(t),
        toBuffer: function(A) {
            for (var e = atob(A), t = new ArrayBuffer(e.length), n = new Uint8Array(t), r = 0; r < e.length; r++)
                n[r] = e.charCodeAt(r);
            return t
        }
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.MIDI = void 0;
    var o = t(116)
      , i = (n(o),
    t(72))
      , a = t(21)
      , u = t(672)
      , l = t(264)
      , c = t(673)
      , s = t(265)
      , p = t(674)
      , f = t(263)
      , g = t(268)
      , I = (t(269),
    t(73))
      , d = t(675)
      , q = "0.5.0"
      , C = void 0
      , m = {
        VERSION: q,
        format: null,
        jobs: new u.JobCollection,
        knobs: l.knobs,
        programs: c.programs,
        sounds: s.sounds,
        support: p.support,
        WebAudio: g.WebAudio,
        AudioTag: f.AudioTag,
        Pad: d.Pad,
        GM: I.GM,
        note: function(A, e) {
            return e = I.GM.note[e].noteID,
            m.channels[A].program.notes[e]
        },
        noteOn: function(A, e) {
            var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 127
              , n = arguments[3];
            return e = I.GM.note[e].noteID,
            m.SoundModule.noteOn(A, e, t, n)
        },
        noteOff: function(A, e, t) {
            return e = I.GM.note[e].noteID,
            m.SoundModule.noteOff(A, e, t)
        },
        get currentTime() {
            return m.SoundModule.currentTime()
        },
        autoconnect: function() {
            var A = (0,
            p.support)();
            return m.jobs.track(A),
            A.then(function(A) {
                return A.best().SoundModule.connect()
            })
        },
        onProgress: function() {},
        fetch: function(A) {
            var e = A.URL
              , t = A.onProgress
              , n = r(A, ["URL", "onProgress"])
              , o = new Promise(function(A, r) {
                galactic.request(Object.assign({
                    format: "text",
                    url: e,
                    onprogress: t
                }, n), function(e, t) {
                    A(t)
                }, r)
            }
            );
            return m.jobs.track(o, "fetch " + e, "fetch"),
            o
        },
        get SoundModule() {
            return C
        },
        set SoundModule(A) {
            C && C.disconnect(),
            C = A
        }
    };
    e.MIDI = m;
    var y = [];
    Object.defineProperty(m, "channels", {
        get: function() {
            return y
        },
        set: function(A) {
            for (var e = y.length; e < A; e++)
                y.push(new i.Channel(e));
            y.splice(A)
        }
    }),
    l.knobs.add({
        property: "mute",
        comparator: function(A) {
            return !!A
        },
        defaultValue: !1,
        addMaster: !0
    }),
    l.knobs.add({
        property: "volume",
        comparator: a.isNumber,
        defaultValue: 127,
        addMaster: !0
    }),
    l.knobs.add({
        property: "detune",
        comparator: function(A) {
            return a.isNumber && A >= -1200 && A <= 1200
        },
        defaultValue: 0
    }),
    l.knobs.add({
        property: "programID",
        comparator: a.isNumber,
        defaultValue: 0
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.WebAudio = void 0;
    var r = t(117)
      , o = (n(r),
    t(24))
      , i = t(113)
      , a = t(678)
      , u = t(677)
      , l = t(267)
      , c = (t(53),
    t(21),
    250)
      , s = e.WebAudio = {
        name: "WebAudio",
        context: u.AudioContext.get(),
        buffers: l.buffers,
        isSupported: function() {
            return "AudioContext"in window && null !== window.AudioContext
        },
        understands: function(A) {
            var e = A.sample;
            return new Promise(function(A, t) {
                var n = u.AudioContext.get();
                n.decodeAudioData(i.Base64.toBuffer(e)).then(A).catch(t),
                setTimeout(t, c)
            }
            )
        },
        connect: function() {
            if (!s.isSupported())
                throw new Error("SoundModule cannot be connected");
            o.MIDI.SoundModule && o.MIDI.SoundModule.disconnect(),
            o.MIDI.SoundModule = s,
            l.buffers.startProcessing();
            var A = new Promise(function(A, e) {
                window.Tuna && (ctx.tunajs instanceof window.Tuna || (ctx.tunajs = new window.Tuna(ctx))),
                A()
            }
            );
            return o.MIDI.jobs.track(A, "connect WebAudio"),
            A
        },
        disconnect: function() {
            l.buffers.stopProcessing()
        },
        noteOn: function(A, e) {
            var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 127
              , n = arguments[3];
            n = n || o.MIDI.currentTime;
            var r = o.sounds.get(A, e);
            r && r.stop(),
            o.MIDI.note(A, e) && o.sounds.set(A, e, new a.WASound({
                channelID: A,
                noteID: e,
                velocity: t,
                startTime: n
            }))
        },
        noteOff: function(A, e, t) {
            t = t || o.MIDI.currentTime;
            var n = o.sounds.get(A, e);
            n && n.scheduleFadeOut(t)
        },
        currentTime: function() {
            return s.context.currentTime
        }
    }
}
, function(A, e, t) {
    "use strict";
    function n() {
        function A(A) {
            return e.add(A),
            {
                cancel: function() {
                    e.delete(A)
                }
            }
        }
        var e = new Set;
        return A.trigger = function() {
            for (var A = arguments.length, t = Array(A), n = 0; n < A; n++)
                t[n] = arguments[n];
            (0,
            r.forEach)(e, function(A) {
                return A.apply(void 0, t)
            })
        }
        ,
        A
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = n;
    var r = t(21)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        var e = A.split(":")
          , t = o(e, 2)
          , n = (t[0],
        t[1])
          , r = n.split(";")
          , i = o(r, 2)
          , a = i[0];
        i[1];
        return a
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , i = t(2)
      , a = n(i)
      , u = t(113)
      , l = (0,
    a.default)("MIDI.js:src/dataURI.js");
    e.default = {
        test: function(A) {
            return 0 === A.indexOf("data:")
        },
        toBlob: function(A) {
            return new Blob([this.toBuffer(A)],{
                type: r(A)
            })
        },
        toBuffer: function(A) {
            var e = A.split(",")
              , t = o(e, 2)
              , n = t[0]
              , r = t[1]
              , i = n.split(";")
              , a = i[i.length - 1];
            switch (a) {
            case "base64":
                return l("Converting a base64 data URI to an ArrayBuffer"),
                u.Base64.toBuffer(r);
            default:
                throw l('The data URI format "%s" is not supported!', a),
                new Error('The data URI format "' + a + '" is not supported!')
            }
        }
    }
}
, function(A, e, t) {
    (function(e) {
        (function() {
            var t, n, r;
            "undefined" != typeof performance && null !== performance && performance.now ? A.exports = function() {
                return performance.now()
            }
            : "undefined" != typeof e && null !== e && e.hrtime ? (A.exports = function() {
                return (t() - r) / 1e6
            }
            ,
            n = e.hrtime,
            t = function() {
                var A;
                return A = n(),
                1e9 * A[0] + A[1]
            }
            ,
            r = t()) : Date.now ? (A.exports = function() {
                return Date.now() - r
            }
            ,
            r = Date.now()) : (A.exports = function() {
                return (new Date).getTime() - r
            }
            ,
            r = (new Date).getTime())
        }
        ).call(this)
    }
    ).call(e, t(39))
}
, function(A, e, t) {
    (function(e) {
        for (var n = t(687), r = "undefined" == typeof window ? e : window, o = ["moz", "webkit"], i = "AnimationFrame", a = r["request" + i], u = r["cancel" + i] || r["cancelRequest" + i], l = 0; !a && l < o.length; l++)
            a = r[o[l] + "Request" + i],
            u = r[o[l] + "Cancel" + i] || r[o[l] + "CancelRequest" + i];
        if (!a || !u) {
            var c = 0
              , s = 0
              , p = []
              , f = 1e3 / 60;
            a = function(A) {
                if (0 === p.length) {
                    var e = n()
                      , t = Math.max(0, f - (e - c));
                    c = t + e,
                    setTimeout(function() {
                        var A = p.slice(0);
                        p.length = 0;
                        for (var e = 0; e < A.length; e++)
                            if (!A[e].cancelled)
                                try {
                                    A[e].callback(c)
                                } catch (A) {
                                    setTimeout(function() {
                                        throw A
                                    }, 0)
                                }
                    }, Math.round(t))
                }
                return p.push({
                    handle: ++s,
                    callback: A,
                    cancelled: !1
                }),
                s
            }
            ,
            u = function(A) {
                for (var e = 0; e < p.length; e++)
                    p[e].handle === A && (p[e].cancelled = !0)
            }
        }
        A.exports = function(A) {
            return a.call(r, A)
        }
        ,
        A.exports.cancel = function() {
            u.apply(r, arguments)
        }
        ,
        A.exports.polyfill = function() {
            r.requestAnimationFrame = a,
            r.cancelAnimationFrame = u
        }
    }
    ).call(e, function() {
        return this
    }())
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        return Array.isArray(e) && (e = e[1]),
        e ? e.nextSibling : A.firstChild
    }
    function r(A, e, t) {
        c.insertTreeBefore(A, e, t)
    }
    function o(A, e, t) {
        Array.isArray(e) ? a(A, e[0], e[1], t) : I(A, e, t)
    }
    function i(A, e) {
        if (Array.isArray(e)) {
            var t = e[1];
            e = e[0],
            u(A, e, t),
            A.removeChild(t)
        }
        A.removeChild(e)
    }
    function a(A, e, t, n) {
        for (var r = e; ; ) {
            var o = r.nextSibling;
            if (I(A, r, n),
            r === t)
                break;
            r = o
        }
    }
    function u(A, e, t) {
        for (; ; ) {
            var n = e.nextSibling;
            if (n === t)
                break;
            A.removeChild(n)
        }
    }
    function l(A, e, t) {
        var n = A.parentNode
          , r = A.nextSibling;
        r === e ? t && I(n, document.createTextNode(t), r) : t ? (g(r, t),
        u(n, r, e)) : u(n, A, e)
    }
    var c = t(40)
      , s = t(694)
      , p = (t(13),
    t(19),
    t(129))
      , f = t(80)
      , g = t(293)
      , I = p(function(A, e, t) {
        A.insertBefore(e, t)
    })
      , d = s.dangerouslyReplaceNodeWithMarkup
      , q = {
        dangerouslyReplaceNodeWithMarkup: d,
        replaceDelimitedText: l,
        processUpdates: function(A, e) {
            for (var t = 0; t < e.length; t++) {
                var a = e[t];
                switch (a.type) {
                case "INSERT_MARKUP":
                    r(A, a.content, n(A, a.afterNode));
                    break;
                case "MOVE_EXISTING":
                    o(A, a.fromNode, n(A, a.afterNode));
                    break;
                case "SET_MARKUP":
                    f(A, a.content);
                    break;
                case "TEXT_CONTENT":
                    g(A, a.content);
                    break;
                case "REMOVE_NODE":
                    i(A, a.fromNode)
                }
            }
        }
    };
    A.exports = q
}
, function(A, e) {
    "use strict";
    var t = {
        html: "http://www.w3.org/1999/xhtml",
        mathml: "http://www.w3.org/1998/Math/MathML",
        svg: "http://www.w3.org/2000/svg"
    };
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n() {
        if (a)
            for (var A in u) {
                var e = u[A]
                  , t = a.indexOf(A);
                if (t > -1 ? void 0 : i("96", A),
                !l.plugins[t]) {
                    e.extractEvents ? void 0 : i("97", A),
                    l.plugins[t] = e;
                    var n = e.eventTypes;
                    for (var o in n)
                        r(n[o], e, o) ? void 0 : i("98", o, A)
                }
            }
    }
    function r(A, e, t) {
        l.eventNameDispatchConfigs.hasOwnProperty(t) ? i("99", t) : void 0,
        l.eventNameDispatchConfigs[t] = A;
        var n = A.phasedRegistrationNames;
        if (n) {
            for (var r in n)
                if (n.hasOwnProperty(r)) {
                    var a = n[r];
                    o(a, e, t)
                }
            return !0
        }
        return !!A.registrationName && (o(A.registrationName, e, t),
        !0)
    }
    function o(A, e, t) {
        l.registrationNameModules[A] ? i("100", A) : void 0,
        l.registrationNameModules[A] = e,
        l.registrationNameDependencies[A] = e.eventTypes[t].dependencies
    }
    var i = t(8)
      , a = (t(5),
    null)
      , u = {}
      , l = {
        plugins: [],
        eventNameDispatchConfigs: {},
        registrationNameModules: {},
        registrationNameDependencies: {},
        possibleRegistrationNames: null,
        injectEventPluginOrder: function(A) {
            a ? i("101") : void 0,
            a = Array.prototype.slice.call(A),
            n()
        },
        injectEventPluginsByName: function(A) {
            var e = !1;
            for (var t in A)
                if (A.hasOwnProperty(t)) {
                    var r = A[t];
                    u.hasOwnProperty(t) && u[t] === r || (u[t] ? i("102", t) : void 0,
                    u[t] = r,
                    e = !0)
                }
            e && n()
        },
        getPluginModuleForEvent: function(A) {
            var e = A.dispatchConfig;
            if (e.registrationName)
                return l.registrationNameModules[e.registrationName] || null;
            if (void 0 !== e.phasedRegistrationNames) {
                var t = e.phasedRegistrationNames;
                for (var n in t)
                    if (t.hasOwnProperty(n)) {
                        var r = l.registrationNameModules[t[n]];
                        if (r)
                            return r
                    }
            }
            return null
        },
        _resetEventPlugins: function() {
            a = null;
            for (var A in u)
                u.hasOwnProperty(A) && delete u[A];
            l.plugins.length = 0;
            var e = l.eventNameDispatchConfigs;
            for (var t in e)
                e.hasOwnProperty(t) && delete e[t];
            var n = l.registrationNameModules;
            for (var r in n)
                n.hasOwnProperty(r) && delete n[r]
        }
    };
    A.exports = l
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return "topMouseUp" === A || "topTouchEnd" === A || "topTouchCancel" === A
    }
    function r(A) {
        return "topMouseMove" === A || "topTouchMove" === A
    }
    function o(A) {
        return "topMouseDown" === A || "topTouchStart" === A
    }
    function i(A, e, t, n) {
        var r = A.type || "unknown-event";
        A.currentTarget = q.getNodeFromInstance(n),
        e ? I.invokeGuardedCallbackWithCatch(r, t, A) : I.invokeGuardedCallback(r, t, A),
        A.currentTarget = null
    }
    function a(A, e) {
        var t = A._dispatchListeners
          , n = A._dispatchInstances;
        if (Array.isArray(t))
            for (var r = 0; r < t.length && !A.isPropagationStopped(); r++)
                i(A, e, t[r], n[r]);
        else
            t && i(A, e, t, n);
        A._dispatchListeners = null,
        A._dispatchInstances = null
    }
    function u(A) {
        var e = A._dispatchListeners
          , t = A._dispatchInstances;
        if (Array.isArray(e)) {
            for (var n = 0; n < e.length && !A.isPropagationStopped(); n++)
                if (e[n](A, t[n]))
                    return t[n]
        } else if (e && e(A, t))
            return t;
        return null
    }
    function l(A) {
        var e = u(A);
        return A._dispatchInstances = null,
        A._dispatchListeners = null,
        e
    }
    function c(A) {
        var e = A._dispatchListeners
          , t = A._dispatchInstances;
        Array.isArray(e) ? g("103") : void 0,
        A.currentTarget = e ? q.getNodeFromInstance(t) : null;
        var n = e ? e(A) : null;
        return A.currentTarget = null,
        A._dispatchListeners = null,
        A._dispatchInstances = null,
        n
    }
    function s(A) {
        return !!A._dispatchListeners
    }
    var p, f, g = t(8), I = t(127), d = (t(5),
    t(7),
    {
        injectComponentTree: function(A) {
            p = A
        },
        injectTreeTraversal: function(A) {
            f = A
        }
    }), q = {
        isEndish: n,
        isMoveish: r,
        isStartish: o,
        executeDirectDispatch: c,
        executeDispatchesInOrder: a,
        executeDispatchesInOrderStopAtTrue: l,
        hasDispatches: s,
        getInstanceFromNode: function(A) {
            return p.getInstanceFromNode(A)
        },
        getNodeFromInstance: function(A) {
            return p.getNodeFromInstance(A)
        },
        isAncestor: function(A, e) {
            return f.isAncestor(A, e)
        },
        getLowestCommonAncestor: function(A, e) {
            return f.getLowestCommonAncestor(A, e)
        },
        getParentInstance: function(A) {
            return f.getParentInstance(A)
        },
        traverseTwoPhase: function(A, e, t) {
            return f.traverseTwoPhase(A, e, t)
        },
        traverseEnterLeave: function(A, e, t, n, r) {
            return f.traverseEnterLeave(A, e, t, n, r)
        },
        injection: d
    };
    A.exports = q
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = /[=:]/g
          , t = {
            "=": "=0",
            ":": "=2"
        }
          , n = ("" + A).replace(e, function(A) {
            return t[A]
        });
        return "$" + n
    }
    function n(A) {
        var e = /(=0|=2)/g
          , t = {
            "=0": "=",
            "=2": ":"
        }
          , n = "." === A[0] && "$" === A[1] ? A.substring(2) : A.substring(1);
        return ("" + n).replace(e, function(A) {
            return t[A]
        })
    }
    var r = {
        escape: t,
        unescape: n
    };
    A.exports = r
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        null != A.checkedLink && null != A.valueLink ? a("87") : void 0
    }
    function r(A) {
        n(A),
        null != A.value || null != A.onChange ? a("88") : void 0
    }
    function o(A) {
        n(A),
        null != A.checked || null != A.onChange ? a("89") : void 0
    }
    function i(A) {
        if (A) {
            var e = A.getName();
            if (e)
                return " Check the render method of `" + e + "`."
        }
        return ""
    }
    var a = t(8)
      , u = t(723)
      , l = t(272)
      , c = t(43)
      , s = l(c.isValidElement)
      , p = (t(5),
    t(7),
    {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
    })
      , f = {
        value: function(A, e, t) {
            return !A[e] || p[A.type] || A.onChange || A.readOnly || A.disabled ? null : new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")
        },
        checked: function(A, e, t) {
            return !A[e] || A.onChange || A.readOnly || A.disabled ? null : new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")
        },
        onChange: s.func
    }
      , g = {}
      , I = {
        checkPropTypes: function(A, e, t) {
            for (var n in f) {
                if (f.hasOwnProperty(n))
                    var r = f[n](e, n, A, "prop", null, u);
                if (r instanceof Error && !(r.message in g)) {
                    g[r.message] = !0;
                    i(t)
                }
            }
        },
        getValue: function(A) {
            return A.valueLink ? (r(A),
            A.valueLink.value) : A.value
        },
        getChecked: function(A) {
            return A.checkedLink ? (o(A),
            A.checkedLink.value) : A.checked
        },
        executeOnChange: function(A, e) {
            return A.valueLink ? (r(A),
            A.valueLink.requestChange(e.target.value)) : A.checkedLink ? (o(A),
            A.checkedLink.requestChange(e.target.checked)) : A.onChange ? A.onChange.call(void 0, e) : void 0
        }
    };
    A.exports = I
}
, function(A, e, t) {
    "use strict";
    var n = t(8)
      , r = (t(5),
    !1)
      , o = {
        replaceNodeWithMarkup: null,
        processChildrenUpdates: null,
        injection: {
            injectEnvironment: function(A) {
                r ? n("104") : void 0,
                o.replaceNodeWithMarkup = A.replaceNodeWithMarkup,
                o.processChildrenUpdates = A.processChildrenUpdates,
                r = !0
            }
        }
    };
    A.exports = o
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t) {
        try {
            e(t)
        } catch (A) {
            null === r && (r = A)
        }
    }
    var r = null
      , o = {
        invokeGuardedCallback: n,
        invokeGuardedCallbackWithCatch: n,
        rethrowCaughtError: function() {
            if (r) {
                var A = r;
                throw r = null,
                A
            }
        }
    };
    A.exports = o
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        u.enqueueUpdate(A)
    }
    function r(A) {
        var e = typeof A;
        if ("object" !== e)
            return e;
        var t = A.constructor && A.constructor.name || e
          , n = Object.keys(A);
        return n.length > 0 && n.length < 20 ? t + " (keys: " + n.join(", ") + ")" : t
    }
    function o(A, e) {
        var t = a.get(A);
        if (!t) {
            return null
        }
        return t
    }
    var i = t(8)
      , a = (t(26),
    t(56))
      , u = (t(19),
    t(22))
      , l = (t(5),
    t(7),
    {
        isMounted: function(A) {
            var e = a.get(A);
            return !!e && !!e._renderedComponent
        },
        enqueueCallback: function(A, e, t) {
            l.validateCallback(e, t);
            var r = o(A);
            return r ? (r._pendingCallbacks ? r._pendingCallbacks.push(e) : r._pendingCallbacks = [e],
            void n(r)) : null
        },
        enqueueCallbackInternal: function(A, e) {
            A._pendingCallbacks ? A._pendingCallbacks.push(e) : A._pendingCallbacks = [e],
            n(A)
        },
        enqueueForceUpdate: function(A) {
            var e = o(A, "forceUpdate");
            e && (e._pendingForceUpdate = !0,
            n(e))
        },
        enqueueReplaceState: function(A, e, t) {
            var r = o(A, "replaceState");
            r && (r._pendingStateQueue = [e],
            r._pendingReplaceState = !0,
            void 0 !== t && null !== t && (l.validateCallback(t, "replaceState"),
            r._pendingCallbacks ? r._pendingCallbacks.push(t) : r._pendingCallbacks = [t]),
            n(r))
        },
        enqueueSetState: function(A, e) {
            var t = o(A, "setState");
            if (t) {
                var r = t._pendingStateQueue || (t._pendingStateQueue = []);
                r.push(e),
                n(t)
            }
        },
        enqueueElementInternal: function(A, e, t) {
            A._pendingElement = e,
            A._context = t,
            n(A)
        },
        validateCallback: function(A, e) {
            A && "function" != typeof A ? i("122", e, r(A)) : void 0
        }
    });
    A.exports = l
}
, function(A, e) {
    "use strict";
    var t = function(A) {
        return "undefined" != typeof MSApp && MSApp.execUnsafeLocalFunction ? function(e, t, n, r) {
            MSApp.execUnsafeLocalFunction(function() {
                return A(e, t, n, r)
            })
        }
        : A
    };
    A.exports = t
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e, t = A.keyCode;
        return "charCode"in A ? (e = A.charCode,
        0 === e && 13 === t && (e = 13)) : e = t,
        e >= 32 || 13 === e ? e : 0
    }
    A.exports = t
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = this
          , t = e.nativeEvent;
        if (t.getModifierState)
            return t.getModifierState(A);
        var n = r[A];
        return !!n && !!t[n]
    }
    function n(A) {
        return t
    }
    var r = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
    };
    A.exports = n
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = A.target || A.srcElement || window;
        return e.correspondingUseElement && (e = e.correspondingUseElement),
        3 === e.nodeType ? e.parentNode : e
    }
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        if (!o.canUseDOM || e && !("addEventListener"in document))
            return !1;
        var t = "on" + A
          , n = t in document;
        if (!n) {
            var i = document.createElement("div");
            i.setAttribute(t, "return;"),
            n = "function" == typeof i[t]
        }
        return !n && r && "wheel" === A && (n = document.implementation.hasFeature("Events.wheel", "3.0")),
        n
    }
    var r, o = t(16);
    o.canUseDOM && (r = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature("", "") !== !0),
    A.exports = n
}
, function(A, e) {
    "use strict";
    function t(A, e) {
        var t = null === A || A === !1
          , n = null === e || e === !1;
        if (t || n)
            return t === n;
        var r = typeof A
          , o = typeof e;
        return "string" === r || "number" === r ? "string" === o || "number" === o : "object" === o && A.type === e.type && A.key === e.key
    }
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    var n = (t(11),
    t(18))
      , r = (t(7),
    n);
    A.exports = r
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = {};
        for (var t in A)
            Object.prototype.hasOwnProperty.call(A, t) && (e[t] = 0);
        return e
    }
    e.__esModule = !0,
    e.default = t,
    A.exports = e.default
}
, function(A, e) {
    "use strict";
    function t(A, e, t) {
        for (var n in e)
            if (Object.prototype.hasOwnProperty.call(e, n)) {
                if (0 !== t[n])
                    return !1;
                var r = "number" == typeof e[n] ? e[n] : e[n].val;
                if (A[n] !== r)
                    return !1
            }
        return !0
    }
    e.__esModule = !0,
    e.default = t,
    A.exports = e.default
}
, function(A, e) {
    "use strict";
    function t(A, e, t, r, o, i, a) {
        var u = -o * (e - r)
          , l = -i * t
          , c = u + l
          , s = t + c * A
          , p = e + s * A;
        return Math.abs(s) < a && Math.abs(p - r) < a ? (n[0] = r,
        n[1] = 0,
        n) : (n[0] = p,
        n[1] = s,
        n)
    }
    e.__esModule = !0,
    e.default = t;
    var n = [0, 0];
    A.exports = e.default
}
, function(A, e) {
    "use strict";
    function t(A) {
        "undefined" != typeof console && "function" == typeof console.error && console.error(A);
        try {
            throw new Error(A)
        } catch (A) {}
    }
    e.__esModule = !0,
    e.default = t
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        for (var t in e) {
            var n = e[t];
            n.configurable = n.enumerable = !0,
            "value"in n && (n.writable = !0),
            Object.defineProperty(A, t, n)
        }
        return A
    }
    function r(A) {
        if (Array.isArray(A)) {
            for (var e = 0, t = Array(A.length); e < A.length; e++)
                t[e] = A[e];
            return t
        }
        return Array.from(A)
    }
    function o(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function i(A) {
        return ("*" === A ? m.wildcard : s.is.array(A) ? m.array : s.is.stringableFunc(A) ? m.default : s.is.func(A) ? m.predicate : m.default)(A)
    }
    function a(A, e, t) {
        function n(A) {
            o(),
            t(A, !0)
        }
        function r(A) {
            i.push(A),
            A.cont = function(r, o) {
                u || ((0,
                s.remove)(i, A),
                A.cont = s.noop,
                o ? n(r) : (A === e && (a = r),
                i.length || (u = !0,
                t(a))))
            }
        }
        function o() {
            u || (u = !0,
            i.forEach(function(A) {
                A.cont = s.noop,
                A.cancel()
            }),
            i = [])
        }
        var i = []
          , a = void 0
          , u = !1;
        return r(e),
        {
            addTask: r,
            cancelAll: o,
            abort: n,
            getTasks: function() {
                return i
            },
            taskNames: function() {
                return i.map(function(A) {
                    return A.name
                })
            }
        }
    }
    function u(A) {
        var e = A.context
          , t = A.fn
          , n = A.args;
        if (s.is.iterator(t))
            return t;
        var r = void 0
          , o = void 0;
        try {
            r = t.apply(e, n)
        } catch (A) {
            o = A
        }
        return s.is.iterator(r) ? r : o ? (0,
        s.makeIterator)(function() {
            throw o
        }) : (0,
        s.makeIterator)(function() {
            var A = void 0
              , e = {
                done: !1,
                value: r
            }
              , t = function(A) {
                return {
                    done: !0,
                    value: A
                }
            };
            return function(n) {
                return A ? t(n) : (A = !0,
                e)
            }
        }())
    }
    function l(A) {
        function e() {
            eA.isRunning && !eA.isCancelled && (eA.isCancelled = !0,
            c(C))
        }
        function t() {
            A._isRunning && !A._isCancelled && (A._isCancelled = !0,
            tA.cancelAll(),
            m(C))
        }
        function c(e, t) {
            if (!eA.isRunning)
                throw new Error("Trying to resume an already finished generator");
            try {
                var n = void 0;
                t ? n = A.throw(e) : e === C ? (eA.isCancelled = !0,
                c.cancel(),
                n = s.is.func(A.return) ? A.return(C) : {
                    done: !0,
                    value: C
                }) : n = e === q ? s.is.func(A.return) ? A.return() : {
                    done: !0
                } : A.next(e),
                n.done ? (eA.isMainRunning = !1,
                eA.cont && eA.cont(n.value)) : h(n.value, z, "", c)
            } catch (A) {
                eA.isCancelled && H("error", "uncaught at " + x, A.message),
                eA.isMainRunning = !1,
                eA.cont(A, !0)
            }
        }
        function m(e, t) {
            A._isRunning = !1,
            _.close(),
            t ? (e instanceof Error && (e.sagaStack = "at " + x + " \n " + (e.sagaStack || e.stack)),
            AA.cont || (H("error", "uncaught", e.sagaStack || e.stack),
            e instanceof Error && X && X(e)),
            A._error = e,
            A._isAborted = !0,
            A._deferredEnd && A._deferredEnd.reject(e)) : (e === C && s.isDev && H("info", x + " has been cancelled", ""),
            A._result = e,
            A._deferredEnd && A._deferredEnd.resolve(e)),
            AA.cont && AA.cont(e, t),
            AA.joiners.forEach(function(A) {
                return A.cb(e, t)
            }),
            AA.joiners = null
        }
        function h(A, e) {
            function t(A, e) {
                i || (i = !0,
                r.cancel = s.noop,
                F && (e ? F.effectRejected(o, A) : F.effectResolved(o, A)),
                r(A, e))
            }
            var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : ""
              , r = arguments[3]
              , o = (0,
            s.uid)();
            F && F.effectTriggered({
                effectId: o,
                parentEffectId: e,
                label: n,
                effect: A
            });
            var i = void 0;
            t.cancel = s.noop,
            r.cancel = function() {
                if (!i) {
                    i = !0;
                    try {
                        t.cancel()
                    } catch (A) {
                        H("error", "uncaught at " + x, A.message)
                    }
                    t.cancel = s.noop,
                    F && F.effectCancelled(o)
                }
            }
            ;
            var a = void 0;
            return s.is.promise(A) ? M(A, t) : s.is.helper(A) ? v(y(A), o, t) : s.is.iterator(A) ? V(A, o, x, t) : s.is.array(A) ? G(A, o, t) : s.is.notUndef(a = f.asEffect.take(A)) ? E(a, t) : s.is.notUndef(a = f.asEffect.put(A)) ? S(a, t) : s.is.notUndef(a = f.asEffect.race(A)) ? Q(a, o, t) : s.is.notUndef(a = f.asEffect.call(A)) ? k(a, o, t) : s.is.notUndef(a = f.asEffect.cps(A)) ? b(a, t) : s.is.notUndef(a = f.asEffect.fork(A)) ? v(a, o, t) : s.is.notUndef(a = f.asEffect.join(A)) ? R(a, t) : s.is.notUndef(a = f.asEffect.cancel(A)) ? U(a, t) : s.is.notUndef(a = f.asEffect.select(A)) ? Z(a, t) : s.is.notUndef(a = f.asEffect.actionChannel(A)) ? O(a, t) : s.is.notUndef(a = f.asEffect.flush(A)) ? B(a, t) : s.is.notUndef(a = f.asEffect.cancelled(A)) ? j(a, t) : s.is.notUndef(a = f.asEffect.getContext(A)) ? w(a, t) : s.is.notUndef(a = f.asEffect.setContext(A)) ? Y(a, t) : t(A)
        }
        function M(A, e) {
            var t = A[s.CANCEL];
            "function" == typeof t && (e.cancel = t),
            A.then(e, function(A) {
                return e(A, !0)
            })
        }
        function V(A, e, t, n) {
            l(A, D, K, N, $, W, e, t, n)
        }
        function E(A, e) {
            var t = A.channel
              , n = A.pattern
              , r = A.maybe;
            t = t || _;
            var o = function(A) {
                return A instanceof Error ? e(A, !0) : e((0,
                g.isEnd)(A) && !r ? q : A)
            };
            try {
                t.take(o, i(n))
            } catch (A) {
                return e(A, !0)
            }
            e.cancel = o.cancel
        }
        function S(A, e) {
            var t = A.channel
              , n = A.action
              , r = A.resolve;
            (0,
            p.asap)(function() {
                var A = void 0;
                try {
                    A = (t ? t.put : K)(n)
                } catch (A) {
                    if (t || r)
                        return e(A, !0);
                    H("error", "uncaught at " + x, A.stack || A.message || A)
                }
                return r && s.is.promise(A) ? void M(A, e) : e(A)
            })
        }
        function k(A, e, t) {
            var n = A.context
              , r = A.fn
              , o = A.args
              , i = void 0;
            try {
                i = r.apply(n, o)
            } catch (A) {
                return t(A, !0)
            }
            return s.is.promise(i) ? M(i, t) : s.is.iterator(i) ? V(i, e, r.name, t) : t(i)
        }
        function b(A, e) {
            var t = A.context
              , n = A.fn
              , r = A.args;
            try {
                var o = function(A, t) {
                    return s.is.undef(A) ? e(t) : e(A, !0)
                };
                n.apply(t, r.concat(o)),
                o.cancel && (e.cancel = function() {
                    return o.cancel()
                }
                )
            } catch (A) {
                return e(A, !0)
            }
        }
        function v(A, e, t) {
            var n = A.context
              , r = A.fn
              , o = A.args
              , i = A.detached
              , a = u({
                context: n,
                fn: r,
                args: o
            });
            try {
                (0,
                p.suspend)();
                var c = l(a, D, K, N, $, W, e, r.name, i ? null : s.noop);
                i ? t(c) : a._isRunning ? (tA.addTask(c),
                t(c)) : a._error ? tA.abort(a._error) : t(c)
            } finally {
                (0,
                p.flush)()
            }
        }
        function R(A, e) {
            if (A.isRunning()) {
                var t = {
                    task: AA,
                    cb: e
                };
                e.cancel = function() {
                    return (0,
                    s.remove)(A.joiners, t)
                }
                ,
                A.joiners.push(t)
            } else
                A.isAborted() ? e(A.error(), !0) : e(A.result())
        }
        function U(A, e) {
            A === s.SELF_CANCELLATION && (A = AA),
            A.isRunning() && A.cancel(),
            e()
        }
        function G(A, e, t) {
            function n() {
                r === i.length && (o = !0,
                t(i))
            }
            if (!A.length)
                return t([]);
            var r = 0
              , o = void 0
              , i = Array(A.length)
              , a = A.map(function(A, e) {
                var a = function(A, a) {
                    o || (a || (0,
                    g.isEnd)(A) || A === q || A === C ? (t.cancel(),
                    t(A, a)) : (i[e] = A,
                    r++,
                    n()))
                };
                return a.cancel = s.noop,
                a
            });
            t.cancel = function() {
                o || (o = !0,
                a.forEach(function(A) {
                    return A.cancel()
                }))
            }
            ,
            A.forEach(function(A, t) {
                return h(A, e, t, a[t])
            })
        }
        function Q(A, e, t) {
            var n = void 0
              , r = Object.keys(A)
              , i = {};
            r.forEach(function(A) {
                var e = function(e, r) {
                    n || (r ? (t.cancel(),
                    t(e, !0)) : (0,
                    g.isEnd)(e) || e === q || e === C || (t.cancel(),
                    n = !0,
                    t(o({}, A, e))))
                };
                e.cancel = s.noop,
                i[A] = e
            }),
            t.cancel = function() {
                n || (n = !0,
                r.forEach(function(A) {
                    return i[A].cancel()
                }))
            }
            ,
            r.forEach(function(t) {
                n || h(A[t], e, t, i[t])
            })
        }
        function Z(A, e) {
            var t = A.selector
              , n = A.args;
            try {
                var o = t.apply(void 0, [N()].concat(r(n)));
                e(o)
            } catch (A) {
                e(A, !0)
            }
        }
        function O(A, e) {
            var t = A.pattern
              , n = A.buffer
              , r = i(t);
            r.pattern = t,
            e((0,
            g.eventChannel)(D, n || I.buffers.fixed(), r))
        }
        function j(A, e) {
            e(!!eA.isCancelled)
        }
        function B(A, e) {
            A.flush(e)
        }
        function w(A, e) {
            e($[A])
        }
        function Y(A, e) {
            s.object.assign($, A),
            e()
        }
        function T(A, e, r, i) {
            var a, u, l;
            return r._deferredEnd = null,
            u = {},
            o(u, s.TASK, !0),
            o(u, "id", A),
            o(u, "name", e),
            a = "done",
            l = {},
            l[a] = l[a] || {},
            l[a].get = function() {
                if (r._deferredEnd)
                    return r._deferredEnd.promise;
                var A = (0,
                s.deferred)();
                return r._deferredEnd = A,
                r._isRunning || (r._error ? A.reject(r._error) : A.resolve(r._result)),
                A.promise
            }
            ,
            o(u, "cont", i),
            o(u, "joiners", []),
            o(u, "cancel", t),
            o(u, "isRunning", function() {
                return r._isRunning
            }),
            o(u, "isCancelled", function() {
                return r._isCancelled
            }),
            o(u, "isAborted", function() {
                return r._isAborted
            }),
            o(u, "result", function() {
                return r._result
            }),
            o(u, "error", function() {
                return r._error
            }),
            o(u, "setContext", function(A) {
                (0,
                s.check)(A, s.is.object, (0,
                s.createSetContextWarning)("task", A)),
                s.object.assign($, A)
            }),
            n(u, l),
            u
        }
        var D = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function() {
            return s.noop
        }
          , K = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : s.noop
          , N = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : s.noop
          , J = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {}
          , W = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : {}
          , z = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0
          , x = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "anonymous"
          , L = arguments[8];
        (0,
        s.check)(A, s.is.iterator, d);
        var F = W.sagaMonitor
          , P = W.logger
          , X = W.onError
          , H = P || s.log
          , _ = (0,
        g.stdChannel)(D)
          , $ = Object.create(J);
        c.cancel = s.noop;
        var AA = T(z, x, A, L)
          , eA = {
            name: x,
            cancel: e,
            isRunning: !0
        }
          , tA = a(x, eA, m);
        return L && (L.cancel = t),
        A._isRunning = !0,
        c(),
        AA
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.TASK_CANCEL = e.CHANNEL_END = e.NOT_ITERATOR_ERROR = void 0;
    var c = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(A) {
        return typeof A
    }
    : function(A) {
        return A && "function" == typeof Symbol && A.constructor === Symbol && A !== Symbol.prototype ? "symbol" : typeof A
    }
    ;
    e.default = l;
    var s = t(27)
      , p = t(311)
      , f = t(84)
      , g = t(83)
      , I = t(82)
      , d = e.NOT_ITERATOR_ERROR = "proc first argument (Saga function result) must be an iterator"
      , q = e.CHANNEL_END = {
        toString: function() {
            return "@@redux-saga/CHANNEL_END"
        }
    }
      , C = e.TASK_CANCEL = {
        toString: function() {
            return "@@redux-saga/TASK_CANCEL"
        }
    }
      , m = {
        wildcard: function() {
            return s.kTrue
        },
        default: function(A) {
            return function(e) {
                return e.type === ("symbol" === ("undefined" == typeof A ? "undefined" : c(A)) ? A : String(A))
            }
        },
        array: function(A) {
            return function(e) {
                return A.some(function(A) {
                    return i(A)(e)
                })
            }
        },
        predicate: function(A) {
            return function(e) {
                return A(e)
            }
        }
    }
      , y = function(A) {
        return {
            fn: A
        }
    }
}
, function(A, e, t) {
    function n(A) {
        var e = -1
          , t = A ? A.length : 0;
        for (this.clear(); ++e < t; ) {
            var n = A[e];
            this.set(n[0], n[1])
        }
    }
    var r = t(870)
      , o = t(871)
      , i = t(872)
      , a = t(873)
      , u = t(874);
    n.prototype.clear = r,
    n.prototype.delete = o,
    n.prototype.get = i,
    n.prototype.has = a,
    n.prototype.set = u,
    A.exports = n
}
, function(A, e, t) {
    function n(A, e, t, a, u) {
        return A === e || (null == A || null == e || !o(A) && !i(e) ? A !== A && e !== e : r(A, e, n, t, a, u))
    }
    var r = t(830)
      , o = t(35)
      , i = t(60);
    A.exports = n
}
, function(A, e) {
    function t(A, e) {
        return e = null == e ? n : e,
        !!e && ("number" == typeof A || r.test(A)) && A > -1 && A % 1 == 0 && A < e
    }
    var n = 9007199254740991
      , r = /^(?:0|[1-9]\d*)$/;
    A.exports = t
}
, function(A, e) {
    function t(A) {
        var e = -1
          , t = Array(A.size);
        return A.forEach(function(A) {
            t[++e] = A
        }),
        t
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        return r(A) && a.call(A, "callee") && (!l.call(A, "callee") || u.call(A) == o)
    }
    var r = t(335)
      , o = "[object Arguments]"
      , i = Object.prototype
      , a = i.hasOwnProperty
      , u = i.toString
      , l = i.propertyIsEnumerable;
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        return "string" == typeof A || !r(A) && o(A) && u.call(A) == i
    }
    var r = t(28)
      , o = t(60)
      , i = "[object String]"
      , a = Object.prototype
      , u = a.toString;
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.store = void 0;
    var r = t(15)
      , o = n(r)
      , i = t(346)
      , a = n(i);
    (0,
    a.default)(),
    e.store = o.default
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.sagaMiddleware = void 0;
    var r = t(309)
      , o = n(r)
      , i = t(177)
      , a = n(i)
      , u = t(794)
      , l = t(176)
      , c = n(l)
      , s = t(795)
      , p = n(s)
      , f = [];
    e.default = f;
    var g = e.sagaMiddleware = (0,
    o.default)();
    f.push(g),
    a.default && f.push((0,
    u.createLogger)()),
    c.default && f.push(p.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , i = t(4)
      , a = t(68)
      , u = n(a)
      , l = t(2)
      , c = n(l)
      , s = (0,
    c.default)("ABCya-paint:src/CNS/sagas/DocumentEvents.js")
      , p = function() {
        function A(e) {
            r(this, A),
            this.handler = e,
            (0,
            u.default)(this, ["attach", "detach"])
        }
        return o(A, null, [{
            key: "onGesture",
            value: function(e) {
                return new A(e)
            }
        }]),
        o(A, [{
            key: "attach",
            value: function() {
                var A = this;
                return this.detach(),
                s("Attaching listener"),
                i.sketch.await().then(function(e) {
                    A.listener = e.doc.on("gesture", A.handler)
                })
            }
        }, {
            key: "detach",
            value: function() {
                this.listener && (s("Detaching listener %j", this.listener),
                this.listener.detach())
            }
        }]),
        A
    }();
    e.default = p
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        for (var n = arguments.length, r = Array(n > 3 ? n - 3 : 0), o = 3; o < n; o++)
            r[o - 3] = arguments[o];
        var c, s, p, f;
        return i.default.wrap(function(n) {
            for (; ; )
                switch (n.prev = n.next) {
                case 0:
                    s = function(A) {
                        return i.default.wrap(function(n) {
                            for (; ; )
                                switch (n.prev = n.next) {
                                case 0:
                                    return n.next = 2,
                                    (0,
                                    a.call)(u.delay, t);
                                case 2:
                                    return n.next = 4,
                                    a.call.apply(void 0, [e, A].concat(r));
                                case 4:
                                case "end":
                                    return n.stop()
                                }
                        }, c[0], this)
                    }
                    ,
                    c = [s].map(i.default.mark),
                    p = void 0;
                case 3:
                    return n.next = 6,
                    (0,
                    a.take)(A);
                case 6:
                    if (f = n.sent,
                    !p) {
                        n.next = 10;
                        break
                    }
                    return n.next = 10,
                    (0,
                    a.cancel)(p);
                case 10:
                    return n.next = 12,
                    (0,
                    a.fork)(s, f);
                case 12:
                    p = n.sent,
                    n.next = 3;
                    break;
                case 15:
                case "end":
                    return n.stop()
                }
        }, l[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(14)
      , u = t(309)
      , l = [r].map(i.default.mark)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        var e, t = A.tool;
        return i.default.wrap(function(A) {
            for (; ; )
                switch (A.prev = A.next) {
                case 0:
                    if (!t) {
                        A.next = 11;
                        break
                    }
                    return A.prev = 1,
                    e = l.default.byName(t),
                    f("Found handler %j for tool %s", e, t),
                    A.next = 6,
                    (0,
                    a.call)(e.use);
                case 6:
                    A.next = 11;
                    break;
                case 8:
                    A.prev = 8,
                    A.t0 = A.catch(1),
                    f(A.t0);
                case 11:
                case "end":
                    return A.stop()
                }
        }, p[0], this, [[1, 8]])
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(14)
      , u = t(10)
      , l = n(u)
      , c = t(2)
      , s = n(c)
      , p = [r].map(i.default.mark)
      , f = (0,
    s.default)("ABCya-paint:src/CNS/sketchSaga/handlers/setTool.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return function() {
            var e = A.apply(this, arguments);
            return new Promise(function(A, t) {
                function n(r, o) {
                    try {
                        var i = e[r](o)
                          , a = i.value
                    } catch (A) {
                        return void t(A)
                    }
                    return i.done ? void A(a) : Promise.resolve(a).then(function(A) {
                        n("next", A)
                    }, function(A) {
                        n("throw", A)
                    })
                }
                return n("next")
            }
            )
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.refreshBackground = void 0;
    var o = t(9)
      , i = n(o)
      , a = (e.refreshBackground = function() {
        var A = r(i.default.mark(function A() {
            var e = this;
            return i.default.wrap(function(A) {
                for (; ; )
                    switch (A.prev = A.next) {
                    case 0:
                        return A.abrupt("return", a.sketch.await().then(function() {
                            var A = r(i.default.mark(function A(t) {
                                var n, r;
                                return i.default.wrap(function(A) {
                                    for (; ; )
                                        switch (A.prev = A.next) {
                                        case 0:
                                            return A.next = 2,
                                            t.exec("new");
                                        case 2:
                                            n = t.Canvas2D,
                                            r = t.doc,
                                            r.resetCache(),
                                            r.setBackground({
                                                pattern: {
                                                    src: n(32, 32).toDataURL(),
                                                    repeat: "no-repeat"
                                                }
                                            });
                                        case 6:
                                        case "end":
                                            return A.stop()
                                        }
                                }, A, e)
                            }));
                            return function(e) {
                                return A.apply(this, arguments)
                            }
                        }()));
                    case 1:
                    case "end":
                        return A.stop()
                    }
            }, A, this)
        }));
        return function() {
            return A.apply(this, arguments)
        }
    }(),
    t(4))
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.sketch = void 0;
    var r = t(46)
      , o = n(r)
      , i = e.sketch = new o.default({
        displayName: "sketch",
        isObjectAvailable: function() {
            return !!window.opentype && !!window.sketch
        },
        getObject: function() {
            return window.sketch
        }
    });
    e.default = i
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.toolAssets = void 0;
    var o = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , i = t(46)
      , a = r(i)
      , u = t(153)
      , l = r(u)
      , c = t(424)
      , s = n(c)
      , p = t(179)
      , f = n(p)
      , g = t(370)
      , I = t(15)
      , d = r(I)
      , q = t(3)
      , C = r(q)
      , m = t(2)
      , y = r(m)
      , h = t(65)
      , M = (0,
    y.default)("ABCya-paint:src/asyncObjects/toolAssets.js")
      , V = h.env.getString("THUMBNAILER", "THUMBNAILER")
      , E = e.toolAssets = new a.default({
        displayName: "toolAssets",
        isObjectAvailable: l.default.isObjectAvailable,
        getObject: function() {
            return E._p || (E._p = new Promise(function(A, e) {
                M("Converting tool assets to blob URLs"),
                l.default.await().then(function(t) {
                    var n = new g.AssetConverter({
                        thumbnailFn: function(A) {
                            switch (V) {
                            case "THUMBNAILER":
                                return t.vector.createSVG({
                                    src: A,
                                    viewBox: !0
                                }).then(function(A) {
                                    return t.thumbnailer(A, {
                                        resample: "nearest-neighbor"
                                    })
                                });
                            case "CANVAS_FROM_FILE":
                                return t.convert.canvasFromFile(A)
                            }
                        }
                    });
                    return n.add(s),
                    n.add(f),
                    n.await().then(function(e) {
                        for (var t = {}, n = 0; n < e.length; n++) {
                            var r = o(e[n], 2)
                              , i = r[0]
                              , a = r[1];
                            t[i] = a
                        }
                        A(t)
                    }).catch(function(A) {
                        e(A),
                        M('Something happened while converting tool assets! "%s"', A),
                        d.default.dispatch({
                            type: C.default.FATAL_ERROR
                        })
                    })
                })
            }
            )),
            E._p
        }
    });
    e.default = E
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(51)
      , s = n(c)
      , p = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                return l.default.createElement("div", {
                    className: (0,
                    s.default)("MainArea")
                }, this.props.children)
            }
        }]),
        e
    }(u.Component);
    e.default = p
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    function a(A) {
        return A.preventDefault(),
        A.stopPropagation(),
        !1
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , l = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , c = t(1)
      , s = n(c)
      , p = t(75)
      , f = n(p)
      , g = t(61)
      , I = n(g)
      , d = t(167)
      , q = n(d)
      , C = t(70)
      , m = n(C)
      , y = t(659)
      , h = n(y)
      , M = t(4)
      , V = t(2)
      , E = n(V)
      , S = (0,
    E.default)("ABCya-paint:src/components/dialogs/ColorPickerDialog.js")
      , k = {
        backgroundImage: "url(" + m.default + ")"
    }
      , b = function(A) {
        function e(A) {
            r(this, e);
            var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                activeColor: null
            },
            t
        }
        return i(e, A),
        l(e, [{
            key: "componentDidMount",
            value: function() {
                var A = this
                  , e = f.default.findDOMNode(this);
                e && (S("Attaching gestures to color picker dialog"),
                M.AsyncObject.waitFor(M.Gesture, M.sketch).then(function(t) {
                    var n = u(t, 2)
                      , r = n[0];
                    n[1];
                    A.ghandle = r.drag(e, function(e) {
                        e.cancel();
                        var t = e.elementFromPoint(function(A) {
                            return A.getAttribute("data-is-swatch")
                        });
                        if (t) {
                            var n = t.getAttribute("data-color");
                            n !== e.env.color && (e.env.color = n,
                            A.setState({
                                activeColor: n
                            }))
                        }
                        "end" === e.state && A.props.onPick(A.state.activeColor)
                    })
                }))
            }
        }, {
            key: "componentWillUnmount",
            value: function() {
                this.ghandle && (S("Detaching gesture handler from color picker dialog"),
                this.ghandle.detach())
            }
        }, {
            key: "renderSwatches",
            value: function() {
                var A = this.state.activeColor;
                return h.default.map(function(e, t) {
                    return s.default.createElement(q.default, {
                        color: e,
                        isActive: e === A,
                        key: t
                    })
                })
            }
        }, {
            key: "render",
            value: function() {
                return s.default.createElement(I.default, {
                    type: "ColorPickerDialog",
                    tailPosition: "8_of_10",
                    tailStyle: k,
                    insetTop: .4,
                    insetBottom: 1.4,
                    onSelect: a
                }, this.renderSwatches())
            }
        }]),
        e
    }(c.Component);
    b.propTypes = {
        activeColor: c.PropTypes.string,
        attachGestures: c.PropTypes.func
    },
    e.default = b
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(20)
      , a = n(i)
      , u = t(654)
      , l = n(u)
      , c = t(220)
      , s = n(c)
      , p = function(A) {
        var e = A.onClick
          , t = A.color
          , n = A.isActive
          , r = void 0 === n || n
          , i = (0,
        l.default)();
        return o.default.createElement(a.default, {
            id: i,
            iconURL: s.default,
            type: "ColorPicker",
            isActive: r,
            onClick: e,
            inline: !0
        }, o.default.createElement("style", null, "#" + i + " #color_spots {fill: " + t + "}"))
    };
    e.default = p
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        if (Array.isArray(A)) {
            for (var e = 0, t = Array(A.length); e < A.length; e++)
                t[e] = A[e];
            return t
        }
        return Array.from(A)
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , l = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , c = t(1)
      , s = n(c)
      , p = t(381)
      , f = n(p)
      , g = t(12)
      , I = t(4)
      , d = [8, 10, 13, 16, 20, 24, 28, 32, 36, 40]
      , q = 5
      , C = 6
      , m = function(A) {
        function e() {
            return o(this, e),
            i(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return a(e, A),
        l(e, [{
            key: "shouldComponentUpdate",
            value: function() {
                return !1
            }
        }, {
            key: "render",
            value: function() {
                return s.default.createElement("div", {
                    className: (0,
                    g.classnames)("nib-spacer"),
                    style: {
                        flexGrow: C
                    }
                })
            }
        }]),
        e
    }(c.Component)
      , y = function(A) {
        function e(A) {
            o(this, e);
            var t = i(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                activeNibSize: A.activeNibSize
            },
            t
        }
        return a(e, A),
        l(e, [{
            key: "componentDidMount",
            value: function() {
                var A = this;
                I.AsyncObject.waitFor(I.Gesture, I.sketch).then(function(e) {
                    var t = u(e, 2)
                      , n = t[0];
                    t[1];
                    n.drag(A.refs.NibSize, function(e) {
                        e.prevent();
                        var t = e.elementFromPoint(function(A) {
                            return A.getAttribute("data-is-nib")
                        });
                        if (t) {
                            var n = parseInt(t.getAttribute("data-nib-size"), 10);
                            switch (e.state) {
                            case "start":
                            case "change":
                                n !== A.state.activeNibSize && A.setState({
                                    activeNibSize: n
                                })
                            }
                        }
                        "end" === e.state && A.props.activeNibSize !== A.state.activeNibSize && A.props.setNibSize(A.state.activeNibSize)
                    })
                })
            }
        }, {
            key: "renderNibs",
            value: function() {
                var A = this.state.activeNibSize;
                return [s.default.createElement(m, {
                    key: "FirstSpacer"
                })].concat(r(d.map(function(e, t) {
                    return [s.default.createElement(f.default, {
                        flexForce: q + 2 * t,
                        isActive: e === A,
                        key: "Nib-" + e,
                        nibSize: e
                    }), s.default.createElement(m, {
                        key: "Spacer-" + e
                    })]
                })), [s.default.createElement(m, {
                    key: "LastSpacer"
                })])
            }
        }, {
            key: "render",
            value: function() {
                return s.default.createElement("div", {
                    className: (0,
                    g.classnames)("NibSize"),
                    ref: "NibSize"
                }, this.renderNibs())
            }
        }]),
        e
    }(c.Component);
    e.default = y
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.OptionsContainer = e.OptionItem = void 0;
    var r = t(1)
      , o = n(r)
      , i = t(12)
      , a = t(188)
      , u = n(a)
      , l = t(2)
      , c = n(l)
      , s = (0,
    c.default)("ABCya-paint:src/components/editor/OptionsContainer.js")
      , p = e.OptionItem = function(A) {
        var e = A.isActive
          , t = A.itemWidth
          , n = A.children;
        return o.default.createElement("div", {
            className: (0,
            i.classnames)("OptionItem", {
                "OptionItem--active": e
            }),
            style: {
                width: t + "%",
                backgroundImage: "url(" + u.default + ")"
            }
        }, n)
    }
    ;
    e.OptionsContainer = function(A) {
        for (var e = A.type, t = A.activeOption, n = A.itemsPerPage, a = void 0 === n ? 6 : n, u = A.children, l = (0,
        i.classnames)(e, "OptionsContainer"), c = 100 / a, f = [], g = r.Children.count(u); g < a; g += 1)
            f.push(o.default.createElement(p, {
                key: g,
                itemWidth: c
            }));
        return s("Rendering options for tool: %o", {
            type: e,
            activeOption: t,
            itemsPerPage: a,
            children: r.Children.toArray(u),
            spacers: f
        }),
        o.default.createElement("div", {
            className: l
        }, r.Children.map(u, function(A, e) {
            return o.default.createElement(p, {
                itemWidth: c,
                isActive: A.props.option === t,
                key: A.props.option
            }, A)
        }), f)
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(773)
      , s = n(c)
      , p = t(47)
      , f = n(p)
      , g = t(17)
      , I = n(g);
    t(445);
    var d = t(2)
      , q = n(d)
      , C = (0,
    q.default)("ABCya-paint:src/components/layers/KeyboardLayer.js")
      , m = function(A) {
        function e(A) {
            r(this, e);
            var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                text: ""
            },
            t.inputEl = document.createElement("input"),
            t.inputEl.addEventListener("input", function() {
                t.setState({
                    text: t.inputEl.value
                })
            }),
            t
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                var A = this;
                return l.default.createElement(I.default, {
                    type: "KeyboardLayer",
                    scaleFrom: .5
                }, l.default.createElement(f.default, {
                    text: this.state.text
                }), l.default.createElement(s.default, {
                    inputNode: this.inputEl,
                    rightButtons: [l.default.createElement(c.KeyboardButton, {
                        key: "submitButton",
                        onClick: function() {
                            var e = A.inputEl.value;
                            e && (C('Passing off input "%s"', e),
                            A.props.handleText(e))
                        },
                        value: "Submit",
                        classes: "keyboard-submit-button"
                    })],
                    layouts: [c.LatinLayout]
                }))
            }
        }]),
        e
    }(u.Component);
    e.default = m
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(17)
      , s = n(c)
      , p = t(12)
      , f = t(62)
      , g = n(f)
      , I = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "componentDidMount",
            value: function() {
                g.default.addMaskingElement(this.refs.toolbar)
            }
        }, {
            key: "shouldComponentUpdate",
            value: function() {
                return !1
            }
        }, {
            key: "render",
            value: function() {
                return l.default.createElement(s.default, {
                    type: "ToolbarLayer",
                    scaleFrom: .8,
                    scaleTo: 1
                }, l.default.createElement("div", {
                    className: (0,
                    p.classnames)("toolbar"),
                    ref: "toolbar"
                }, this.props.children))
            }
        }]),
        e
    }(u.Component);
    e.default = I
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.Tooltip = void 0;
    var o = t(1)
      , i = n(o)
      , a = t(17)
      , u = n(a)
      , l = t(12)
      , c = t(33)
      , s = t(295)
      , p = n(s)
      , f = t(37)
      , g = n(f)
      , I = t(245)
      , d = n(I)
      , q = e.Tooltip = function(A) {
        var e = A.contents
          , t = A.anchor
          , n = A.style;
        return i.default.createElement("div", {
            className: (0,
            l.classnames)("Tooltip"),
            style: Object.assign({}, n, {
                bottom: 100 - t.y + "%",
                left: t.x + "%"
            })
        }, i.default.createElement("div", {
            className: (0,
            l.classnames)("TooltipContents")
        }, e), i.default.createElement(g.default, {
            src: d.default,
            type: "TooltipTail"
        }))
    }
      , C = function(A) {
        var e = A.tooltip
          , t = A.anchor;
        r(A, ["tooltip", "anchor"]);
        return i.default.createElement(u.default, {
            type: "TooltipLayer",
            scaleFrom: 2,
            scaleTo: 1
        }, i.default.createElement(p.default, {
            component: !1,
            appear: {
                scaleY: 0,
                opacity: 1
            },
            enter: {
                scaleY: (0,
                c.spring)(1, c.presets.wobbly),
                opacity: 1
            },
            leave: {
                scaleY: 0,
                opacity: 0
            }
        }, e && i.default.createElement(q, {
            key: "tooltip",
            contents: e,
            anchor: t
        }), !e && null))
    };
    e.default = C
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(62);
    Object.defineProperty(e, "CursorLayer", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(160);
    Object.defineProperty(e, "KeyboardLayer", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(17);
    Object.defineProperty(e, "Layer", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(161);
    Object.defineProperty(e, "ToolbarLayer", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(162);
    Object.defineProperty(e, "TooltipLayer", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(99)
      , s = n(c)
      , p = t(49)
      , f = function(A) {
        function e(A) {
            r(this, e);
            for (var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A)), n = u.Children.toArray(A.children), i = n.length; i < 6; i += 1)
                n.push(l.default.createElement(p.EmptySlotRegion, {
                    key: "EmptySlotRegion-" + i
                }));
            return t.regions = n.slice(0, 6),
            t
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                var A = this.props
                  , e = A.category
                  , t = A.iconURL
                  , n = A.onClickCategoryIcon
                  , r = A.bgColor;
                return l.default.createElement(s.default, {
                    type: [e, "CategoryPane"],
                    bgColor: r
                }, l.default.createElement(p.ClickRegion, {
                    type: "CategorySelector",
                    iconURL: t,
                    onClick: n
                }), this.regions, l.default.createElement(p.SpacerRegion, null))
            }
        }]),
        e
    }(u.PureComponent);
    e.default = f
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    function u(A) {
        return v("Revealing %o", A),
        function(e) {
            function t() {
                return o(this, t),
                i(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments))
            }
            return a(t, e),
            l(t, [{
                key: "render",
                value: function() {
                    var e = this;
                    return s.default.createElement(p.Motion, {
                        defaultStyle: {
                            offsetY: .5,
                            rotate: -10 + 20 * Math.random()
                        },
                        style: {
                            offsetY: (0,
                            p.spring)(1, {
                                stiffness: 150 + 100 * Math.random(),
                                damping: 12
                            }),
                            rotate: (0,
                            p.spring)(0, p.presets.wobbly)
                        }
                    }, function(t) {
                        var n = t.offsetY
                          , r = t.rotate;
                        return s.default.createElement(A, Object.assign({}, e.props, {
                            style: {
                                transform: "scale3d(1, " + n + ", 1) rotate(" + r + "deg)"
                            }
                        }))
                    })
                }
            }]),
            t
        }(s.default.Component)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var l = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , c = t(1)
      , s = n(c)
      , p = t(33)
      , f = t(99)
      , g = n(f)
      , I = t(12)
      , d = t(207)
      , q = n(d)
      , C = t(20)
      , m = n(C)
      , y = t(63)
      , h = n(y)
      , M = t(100)
      , V = n(M)
      , E = t(50)
      , S = n(E)
      , k = t(2)
      , b = n(k)
      , v = (0,
    b.default)("ABCya-paint:src/components/panes/EditorPane.js")
      , R = function(A) {
        var e = A.type
          , t = A.editorIcon
          , n = A.onBack
          , o = A.bgColor
          , i = A.children
          , a = m.default
          , l = h.default
          , c = function(A) {
            var e = A.children
              , t = r(A, ["children"]);
            return s.default.createElement("div", Object.assign({
                className: (0,
                I.classnames)("EditorContainer")
            }, t), e)
        };
        return S.default && (a = u(a),
        l = u(l),
        c = u(c)),
        s.default.createElement(g.default, {
            type: [e, "EditorPane"],
            bgColor: o
        }, s.default.createElement(a, {
            iconURL: q.default,
            onClick: n
        }), s.default.createElement(l, {
            iconURL: t
        }), s.default.createElement(c, null, i), s.default.createElement(V.default, null))
    };
    e.default = R
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(20)
      , a = n(i)
      , u = t(210)
      , l = n(u)
      , c = function(A) {
        var e = A.onClick;
        return o.default.createElement(a.default, {
            type: "MenuRegion",
            iconURL: l.default,
            onClick: e
        })
    };
    e.default = c
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(1)
      , i = n(o)
      , a = t(64)
      , u = n(a)
      , l = t(12)
      , c = 5
      , s = 85
      , p = 20
      , f = {
        x: c,
        y: c,
        width: s,
        height: s,
        rx: p,
        ry: p
    }
      , g = 30
      , I = 40
      , d = 50
      , q = {
        x: g,
        y: g,
        width: I,
        height: I,
        rx: d,
        ry: d
    }
      , C = function(A) {
        var e = A.color
          , t = A.isActive
          , n = r(A, ["color", "isActive"])
          , o = t ? q : f;
        return i.default.createElement(u.default, Object.assign({}, n, {
            type: ["Swatch", {
                "Swatch--active": t
            }],
            "data-is-swatch": !0,
            "data-color": e
        }), i.default.createElement("svg", {
            className: (0,
            l.classnames)("SwatchElement"),
            viewBox: "0 0 100 100",
            fill: e
        }, i.default.createElement("rect", o)))
    };
    e.default = C
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(20)
      , a = n(i)
      , u = t(224)
      , l = n(u)
      , c = t(223)
      , s = n(c)
      , p = function(A) {
        var e = A.isOpen
          , t = A.onClick;
        return o.default.createElement(a.default, {
            type: "TrayToggle",
            iconURL: e ? s.default : l.default,
            onClick: t
        })
    };
    e.default = p
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(17)
      , a = n(i)
      , u = function() {
        return o.default.createElement(a.default, {
            type: "ErrorScreen"
        }, o.default.createElement("h1", null, "Oh no!"), o.default.createElement("p", null, "Something happened. Try reloading."))
    };
    e.default = u
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(17)
      , s = n(c)
      , p = t(12)
      , f = t(2)
      , g = n(f)
      , I = t(52)
      , d = n(I)
      , q = (0,
    g.default)("ABCya-paint:src/components/screens/SplashScreen.js")
      , C = new d.default({
        data: {
            1: "The fetching of the associated resource was aborted by the user's request.",
            2: "Some kind of network error occurred which prevented the media from being successfully fetched, despite having previously been available.",
            3: "Despite having previously been determined to be usable, an error occurred while trying to decode the media resource, resulting in an error.",
            4: "The associated resource or media provider object (such as a MediaStream has been found to be unsuitable."
        },
        defaultValue: "Unknown!"
    })
      , m = function(A) {
        function e(A) {
            r(this, e);
            var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                movieReady: !1,
                movieURL: null
            },
            t
        }
        return i(e, A),
        a(e, [{
            key: "getMovieURL",
            value: function() {
                var A = this.props.transitionToMainScreen
                  , e = "%PUBLIC_URL%/Loading-Logo.mp4";
                return e ? e.replace("%PUBLIC_URL%", ".") : (q('Your environment is missing the "REACT_APP_INTRO_MOVIE_URL" key. Please add it and try again.'),
                A(),
                null)
            }
        }, {
            key: "componentDidMount",
            value: function() {
                var A = this
                  , e = this.props.transitionToMainScreen
                  , t = new XMLHttpRequest;
                t.open("GET", this.getMovieURL(), !0),
                t.responseType = "blob",
                t.addEventListener("load", function() {
                    t.status >= 200 && t.status <= 299 ? (q("The intro movie was fetched successfully, and will be played."),
                    A.setState({
                        movieReady: !0,
                        movieURL: URL.createObjectURL(t.response)
                    })) : (q("The response status is not OK: %j", {
                        status: t.status,
                        responseText: t.responseText
                    }),
                    e())
                }),
                t.addEventListener("error", function(A) {
                    q("Something happened while fetching the movie: %s", A),
                    e()
                }),
                t.send()
            }
        }, {
            key: "render",
            value: function() {
                var A = this.props.transitionToMainScreen
                  , e = this.state
                  , t = e.movieReady
                  , n = e.movieURL;
                return t ? l.default.createElement(s.default, {
                    type: "SplashScreen"
                }, l.default.createElement("video", {
                    alt: "SplashScreen",
                    className: (0,
                    p.classnames)("SplashScreenCanvas"),
                    src: n,
                    autoPlay: !0,
                    muted: !0,
                    playsInline: !0,
                    onError: function(e) {
                        q('Something happened while displaying the SplashScreen because "%s". The specific error was "%s"', C.get(e.target.error.code), e.target.error.message),
                        A()
                    },
                    onEnded: A
                })) : null
            }
        }]),
        e
    }(u.Component);
    e.default = m
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(101)
      , a = n(i)
      , u = t(20)
      , l = n(u)
      , c = t(258)
      , s = n(c)
      , p = t(244)
      , f = n(p)
      , g = function(A) {
        var e = A.canUndo
          , t = A.isOpen
          , n = A.onUndo
          , r = A.onRedo;
        return o.default.createElement(a.default, {
            type: "HistoryTray",
            isOpen: t
        }, o.default.createElement(l.default, {
            type: "UndoRegion",
            iconURL: s.default,
            onClick: n,
            isDisabled: !e
        }), o.default.createElement(l.default, {
            type: "RedoRegion",
            iconURL: f.default,
            onClick: r
        }))
    };
    e.default = g
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(101)
      , s = n(c)
      , p = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                return l.default.createElement(s.default, {
                    type: "MainTray",
                    isOpen: this.props.isMainTrayOpen
                }, this.props.children)
            }
        }]),
        e
    }(u.PureComponent);
    e.default = p
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(1)
      , i = r(o)
      , a = t(6)
      , u = t(398)
      , l = n(u)
      , c = t(2)
      , s = r(c)
      , p = (0,
    s.default)("ABCya-paint:src/containers/ActiveDialog.js")
      , f = function(A) {
        var e = A.dialog;
        if (e) {
            var t = l[e];
            if (t)
                return i.default.createElement(t, null)
        }
        return p('A dialog for "' + e + '" was not found.'),
        null
    };
    e.default = (0,
    a.connect)(function(A) {
        var e = A.dialog;
        return {
            dialog: e
        }
    })(f)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(6)
      , s = t(3)
      , p = n(s)
      , f = t(4)
      , g = t(17)
      , I = n(g)
      , d = t(48)
      , q = n(d)
      , C = t(2)
      , m = n(C)
      , y = (0,
    m.default)("ABCya-paint:src/containers/SketchLayer.js");
    e.default = (0,
    c.connect)()(function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "componentDidMount",
            value: function() {
                var A = this;
                f.sketch.await().then(function(e) {
                    e.Document({
                        width: "100%",
                        height: "100%",
                        element: "#sketch-root"
                    }).then(function() {
                        y("The SketchAPI is rooted in %o", A.docEl),
                        e.doc.setSize("100%", "100%"),
                        A.props.dispatch({
                            type: p.default.SKETCH_DOCUMENT_INIT
                        })
                    })
                })
            }
        }, {
            key: "render",
            value: function() {
                var A = this;
                return l.default.createElement(I.default, {
                    type: "SketchLayer"
                }, l.default.createElement("div", {
                    id: "sketch-root",
                    ref: function(e) {
                        return A.docEl = e
                    }
                }), l.default.createElement(q.default, {
                    regions: 1
                }))
            }
        }]),
        e
    }(u.Component))
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(31)
      , o = n(r);
    e.default = (0,
    o.default)({
        feature: "custom cursors",
        sigil: "CUSTOM_CURSORS",
        defaults: {}
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(31)
      , o = n(r);
    e.default = (0,
    o.default)({
        feature: "the perf middleware",
        sigil: "PERF_MIDDLEWARE",
        defaults: {
            global: !1
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(31)
      , o = n(r);
    e.default = (0,
    o.default)({
        feature: "the redux action logger",
        sigil: "ACTION_LOGGER",
        defaults: {
            global: !1
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(31)
      , o = n(r);
    e.default = (0,
    o.default)({
        feature: "the update describer",
        sigil: "WHY_DID_YOU_UPDATE",
        defaults: {
            global: !1
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(504);
    Object.defineProperty(e, "Page_1", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(505);
    Object.defineProperty(e, "Page_10", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(506);
    Object.defineProperty(e, "Page_11", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(507);
    Object.defineProperty(e, "Page_12", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(508);
    Object.defineProperty(e, "Page_13", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(509);
    Object.defineProperty(e, "Page_14", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(510);
    Object.defineProperty(e, "Page_15", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    });
    var s = t(511);
    Object.defineProperty(e, "Page_16", {
        enumerable: !0,
        get: function() {
            return n(s).default
        }
    });
    var p = t(512);
    Object.defineProperty(e, "Page_17", {
        enumerable: !0,
        get: function() {
            return n(p).default
        }
    });
    var f = t(513);
    Object.defineProperty(e, "Page_18", {
        enumerable: !0,
        get: function() {
            return n(f).default
        }
    });
    var g = t(514);
    Object.defineProperty(e, "Page_19", {
        enumerable: !0,
        get: function() {
            return n(g).default
        }
    });
    var I = t(515);
    Object.defineProperty(e, "Page_2", {
        enumerable: !0,
        get: function() {
            return n(I).default
        }
    });
    var d = t(516);
    Object.defineProperty(e, "Page_20", {
        enumerable: !0,
        get: function() {
            return n(d).default
        }
    });
    var q = t(517);
    Object.defineProperty(e, "Page_21", {
        enumerable: !0,
        get: function() {
            return n(q).default
        }
    });
    var C = t(518);
    Object.defineProperty(e, "Page_22", {
        enumerable: !0,
        get: function() {
            return n(C).default
        }
    });
    var m = t(519);
    Object.defineProperty(e, "Page_23", {
        enumerable: !0,
        get: function() {
            return n(m).default
        }
    });
    var y = t(520);
    Object.defineProperty(e, "Page_24", {
        enumerable: !0,
        get: function() {
            return n(y).default
        }
    });
    var h = t(521);
    Object.defineProperty(e, "Page_25", {
        enumerable: !0,
        get: function() {
            return n(h).default
        }
    });
    var M = t(522);
    Object.defineProperty(e, "Page_26", {
        enumerable: !0,
        get: function() {
            return n(M).default
        }
    });
    var V = t(523);
    Object.defineProperty(e, "Page_3", {
        enumerable: !0,
        get: function() {
            return n(V).default
        }
    });
    var E = t(524);
    Object.defineProperty(e, "Page_4", {
        enumerable: !0,
        get: function() {
            return n(E).default
        }
    });
    var S = t(525);
    Object.defineProperty(e, "Page_5", {
        enumerable: !0,
        get: function() {
            return n(S).default
        }
    });
    var k = t(526);
    Object.defineProperty(e, "Page_6", {
        enumerable: !0,
        get: function() {
            return n(k).default
        }
    });
    var b = t(527);
    Object.defineProperty(e, "Page_7", {
        enumerable: !0,
        get: function() {
            return n(b).default
        }
    });
    var v = t(528);
    Object.defineProperty(e, "Page_8", {
        enumerable: !0,
        get: function() {
            return n(v).default
        }
    });
    var R = t(529);
    Object.defineProperty(e, "Page_9", {
        enumerable: !0,
        get: function() {
            return n(R).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = function A(e, t, n) {
        null === e && (e = Function.prototype);
        var r = Object.getOwnPropertyDescriptor(e, t);
        if (void 0 === r) {
            var o = Object.getPrototypeOf(e);
            return null === o ? void 0 : A(o, t, n)
        }
        if ("value"in r)
            return r.value;
        var i = r.get;
        if (void 0 !== i)
            return i.call(n)
    }
      , c = t(10)
      , s = n(c)
      , p = t(181)
      , f = n(p)
      , g = t(4)
      , I = t(15)
      , d = n(I)
      , q = function(A) {
        function e(A) {
            var t = A.textureURL
              , n = r(A, ["textureURL"]);
            o(this, e);
            var a = i(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, n));
            return a.texture = new f.default(t),
            a
        }
        return a(e, A),
        u(e, [{
            key: "getNibSize",
            value: function() {
                var A = d.default.getState()
                  , e = A.nibSize;
                return e
            }
        }, {
            key: "updateSketch",
            value: function() {
                var A = this;
                return g.sketch.await().then(function(e) {
                    var t = d.default.getState()
                      , n = t.color;
                    return A.texture.tint(n).then(function(t) {
                        e.config(A.sketchTool, {
                            globalized: "no",
                            fill: {
                                enabled: !1
                            },
                            stroke: {
                                type: "pattern",
                                pattern: {
                                    src: t
                                }
                            },
                            diameter: A.getNibSize(),
                            tileMode: "repeat"
                        })
                    })
                }).then(l(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), "updateSketch", this))
            }
        }]),
        e
    }(s.default);
    e.default = q
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , i = t(2)
      , a = n(i)
      , u = (0,
    a.default)("ABCya-paint:src/tools/TintableTexture.js")
      , l = function() {
        function A(e) {
            r(this, A),
            this.drawingResources = new Promise(function(A, t) {
                var n = new Image;
                n.addEventListener("load", function() {
                    var e = document.createElement("canvas");
                    e.width = n.width,
                    e.height = n.height;
                    var t = e.getContext("2d");
                    t.drawImage(n, 0, 0),
                    t.globalCompositeOperation = "source-atop",
                    A({
                        canvas: e,
                        context: t
                    })
                }),
                n.addEventListener("error", t),
                n.src = e
            }
            )
        }
        return o(A, [{
            key: "tint",
            value: function(A) {
                var e = this;
                return this.drawingResources.then(function(t) {
                    var n = t.canvas
                      , r = t.context;
                    return r.fillStyle = A,
                    r.fillRect(0, 0, n.width, n.height),
                    new Promise(function(A, t) {
                        return n.toBlob(function(t) {
                            e._blobURL && (u("Revoking existing blobURL: %s", e._blobURL),
                            URL.revokeObjectURL(e._blobURL)),
                            e._blobURL = URL.createObjectURL(t),
                            A(e._blobURL)
                        })
                    }
                    )
                })
            }
        }]),
        A
    }();
    e.default = l
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(10)
      , s = n(c)
      , p = t(404)
      , f = n(p)
      , g = t(4)
      , I = t(247)
      , d = n(I)
      , q = t(71)
      , C = n(q);
    e.default = new (function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "updateSketch",
            value: function() {
                return g.sketch.await().then(function(A) {})
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: C.default,
                    shouldRotate: !1,
                    height: 50
                }
            }
        }]),
        e
    }(s.default))({
        tool: "select",
        tooltip: "Selection Tool",
        sketchTool: "select",
        toolIcon: d.default,
        Editor: function() {
            return l.default.createElement(f.default, null)
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = function A(e, t, n) {
        null === e && (e = Function.prototype);
        var r = Object.getOwnPropertyDescriptor(e, t);
        if (void 0 === r) {
            var o = Object.getPrototypeOf(e);
            return null === o ? void 0 : A(o, t, n)
        }
        if ("value"in r)
            return r.value;
        var i = r.get;
        if (void 0 !== i)
            return i.call(n)
    }
      , l = t(1)
      , c = n(l)
      , s = t(4)
      , p = t(15)
      , f = n(p)
      , g = t(10)
      , I = n(g)
      , d = t(52)
      , q = n(d)
      , C = t(3)
      , m = n(C)
      , y = t(2)
      , h = n(y)
      , M = t(256)
      , V = n(M)
      , E = t(257)
      , S = n(E)
      , k = t(243)
      , b = n(k)
      , v = t(38)
      , R = n(v)
      , U = t(105)
      , G = n(U)
      , Q = (0,
    h.default)("ABCya-paint:src/tools/Text.js")
      , Z = new q.default({
        data: {
            option_text_1: 20,
            option_text_2: 40,
            option_text_3: 60,
            option_text_4: 80,
            option_text_5: 100
        },
        defaultValue: 60
    })
      , O = ["option_text_1", "option_text_2", "option_text_3", "option_text_4", "option_text_5"];
    e.default = new (function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "updateSketch",
            value: function() {
                return s.sketch.await().then(function(A) {
                    var e = f.default.getState()
                      , t = e.color
                      , n = e.text_option
                      , r = Z.get(n);
                    Q("Setting the text tool's font size: %s", r),
                    A.config("fancyText", {
                        fitText: !0,
                        whiteSpace: "nowrap",
                        fontFamily: "Asap",
                        fontSize: r,
                        fill: {
                            type: "color",
                            color: t
                        },
                        stroke: {
                            enabled: !1
                        }
                    })
                }).then(u(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), "updateSketch", this))
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: b.default,
                    shouldRotate: !1,
                    height: 22
                }
            }
        }, {
            key: "capturesInput",
            value: function() {
                return G.default
            }
        }, {
            key: "handleInputEvent",
            value: function(A) {
                "end" === A.state && f.default.dispatch({
                    type: m.default.OPEN_OSK
                })
            }
        }]),
        e
    }(I.default))({
        tool: "text",
        tooltip: "Type Tool",
        sketchTool: "fancyText",
        toolIcon: V.default,
        Editor: function() {
            return c.default.createElement(R.default, {
                tool: "text",
                category: "geometry",
                options: O,
                editorIcon: S.default
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A
    }
    function r(A, e, t) {
        function r(A, e) {
            var t = C.hasOwnProperty(e) ? C[e] : null;
            M.hasOwnProperty(e) && u("OVERRIDE_BASE" === t, "ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.", e),
            A && u("DEFINE_MANY" === t || "DEFINE_MANY_MERGED" === t, "ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", e)
        }
        function o(A, t) {
            if (t) {
                u("function" != typeof t, "ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),
                u(!e(t), "ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");
                var n = A.prototype
                  , o = n.__reactAutoBindPairs;
                t.hasOwnProperty(l) && m.mixins(A, t.mixins);
                for (var i in t)
                    if (t.hasOwnProperty(i) && i !== l) {
                        var a = t[i]
                          , c = n.hasOwnProperty(i);
                        if (r(c, i),
                        m.hasOwnProperty(i))
                            m[i](A, a);
                        else {
                            var s = C.hasOwnProperty(i)
                              , g = "function" == typeof a
                              , I = g && !s && !c && t.autobind !== !1;
                            if (I)
                                o.push(i, a),
                                n[i] = a;
                            else if (c) {
                                var d = C[i];
                                u(s && ("DEFINE_MANY_MERGED" === d || "DEFINE_MANY" === d), "ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.", d, i),
                                "DEFINE_MANY_MERGED" === d ? n[i] = p(n[i], a) : "DEFINE_MANY" === d && (n[i] = f(n[i], a))
                            } else
                                n[i] = a
                        }
                    }
            } else
                ;
        }
        function c(A, e) {
            if (e)
                for (var t in e) {
                    var n = e[t];
                    if (e.hasOwnProperty(t)) {
                        var r = t in m;
                        u(!r, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', t);
                        var o = t in A;
                        u(!o, "ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", t),
                        A[t] = n
                    }
                }
        }
        function s(A, e) {
            u(A && e && "object" == typeof A && "object" == typeof e, "mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.");
            for (var t in e)
                e.hasOwnProperty(t) && (u(void 0 === A[t], "mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.", t),
                A[t] = e[t]);
            return A
        }
        function p(A, e) {
            return function() {
                var t = A.apply(this, arguments)
                  , n = e.apply(this, arguments);
                if (null == t)
                    return n;
                if (null == n)
                    return t;
                var r = {};
                return s(r, t),
                s(r, n),
                r
            }
        }
        function f(A, e) {
            return function() {
                A.apply(this, arguments),
                e.apply(this, arguments)
            }
        }
        function g(A, e) {
            var t = e.bind(A);
            return t
        }
        function I(A) {
            for (var e = A.__reactAutoBindPairs, t = 0; t < e.length; t += 2) {
                var n = e[t]
                  , r = e[t + 1];
                A[n] = g(A, r)
            }
        }
        function d(A) {
            var e = n(function(A, n, r) {
                this.__reactAutoBindPairs.length && I(this),
                this.props = A,
                this.context = n,
                this.refs = a,
                this.updater = r || t,
                this.state = null;
                var o = this.getInitialState ? this.getInitialState() : null;
                u("object" == typeof o && !Array.isArray(o), "%s.getInitialState(): must return an object or null", e.displayName || "ReactCompositeComponent"),
                this.state = o
            });
            e.prototype = new V,
            e.prototype.constructor = e,
            e.prototype.__reactAutoBindPairs = [],
            q.forEach(o.bind(null, e)),
            o(e, y),
            o(e, A),
            o(e, h),
            e.getDefaultProps && (e.defaultProps = e.getDefaultProps()),
            u(e.prototype.render, "createClass(...): Class specification must implement a `render` method.");
            for (var r in C)
                e.prototype[r] || (e.prototype[r] = null);
            return e
        }
        var q = []
          , C = {
            mixins: "DEFINE_MANY",
            statics: "DEFINE_MANY",
            propTypes: "DEFINE_MANY",
            contextTypes: "DEFINE_MANY",
            childContextTypes: "DEFINE_MANY",
            getDefaultProps: "DEFINE_MANY_MERGED",
            getInitialState: "DEFINE_MANY_MERGED",
            getChildContext: "DEFINE_MANY_MERGED",
            render: "DEFINE_ONCE",
            componentWillMount: "DEFINE_MANY",
            componentDidMount: "DEFINE_MANY",
            componentWillReceiveProps: "DEFINE_MANY",
            shouldComponentUpdate: "DEFINE_ONCE",
            componentWillUpdate: "DEFINE_MANY",
            componentDidUpdate: "DEFINE_MANY",
            componentWillUnmount: "DEFINE_MANY",
            updateComponent: "OVERRIDE_BASE"
        }
          , m = {
            displayName: function(A, e) {
                A.displayName = e
            },
            mixins: function(A, e) {
                if (e)
                    for (var t = 0; t < e.length; t++)
                        o(A, e[t])
            },
            childContextTypes: function(A, e) {
                A.childContextTypes = i({}, A.childContextTypes, e)
            },
            contextTypes: function(A, e) {
                A.contextTypes = i({}, A.contextTypes, e)
            },
            getDefaultProps: function(A, e) {
                A.getDefaultProps ? A.getDefaultProps = p(A.getDefaultProps, e) : A.getDefaultProps = e
            },
            propTypes: function(A, e) {
                A.propTypes = i({}, A.propTypes, e)
            },
            statics: function(A, e) {
                c(A, e)
            },
            autobind: function() {}
        }
          , y = {
            componentDidMount: function() {
                this.__isMounted = !0
            }
        }
          , h = {
            componentWillUnmount: function() {
                this.__isMounted = !1
            }
        }
          , M = {
            replaceState: function(A, e) {
                this.updater.enqueueReplaceState(this, A, e)
            },
            isMounted: function() {
                return !!this.__isMounted
            }
        }
          , V = function() {};
        return i(V.prototype, A.prototype, M),
        d
    }
    var o, i = t(11), a = t(69), u = t(5), l = "mixins";
    o = {},
    A.exports = r
}
, function(A, e, t) {
    "use strict";
    var n = t(18)
      , r = {
        listen: function(A, e, t) {
            return A.addEventListener ? (A.addEventListener(e, t, !1),
            {
                remove: function() {
                    A.removeEventListener(e, t, !1)
                }
            }) : A.attachEvent ? (A.attachEvent("on" + e, t),
            {
                remove: function() {
                    A.detachEvent("on" + e, t)
                }
            }) : void 0
        },
        capture: function(A, e, t) {
            return A.addEventListener ? (A.addEventListener(e, t, !0),
            {
                remove: function() {
                    A.removeEventListener(e, t, !0)
                }
            }) : {
                remove: n
            }
        },
        registerDefault: function() {}
    };
    A.exports = r
}
, function(A, e) {
    "use strict";
    function t(A) {
        try {
            A.focus()
        } catch (A) {}
    }
    A.exports = t
}
, function(A, e) {
    "use strict";
    function t(A) {
        if (A = A || ("undefined" != typeof document ? document : void 0),
        "undefined" == typeof A)
            return null;
        try {
            return A.activeElement || A.body
        } catch (e) {
            return A.body
        }
    }
    A.exports = t
}
, function(A, e, t) {
    A.exports = t.p + "static/media/active_option.66559dbf.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_bucket.cd5e21e2.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_bucket_editor.d712642b.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_eraser.3853b6cc.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_eraser_editor.8e3a271e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_magic.395cbc31.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_magic_editor.4b255a0c.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_mirror.cd6a1828.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_mirror_editor.d2baf848.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_pattern.9616cc23.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_pattern_editor.a44e56cf.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_roller.4d9312b3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_roller_editor.f4a01961.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_solid.e87f63ed.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_solid_editor.bc8cdc13.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_spraycan.81a1ab4d.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_spraycan_editor.77722a57.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_translucent.d2e994ff.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_translucent_editor.31c87802.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/button_back.331d8931.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/button_delete.2a2bcc06.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/button_import_background.a94afe69.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/button_menu.2857e6c7.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/button_new.8b14eb9d.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/button_no.caa61c58.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/button_print.3bf814d4.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/button_save.6d42f546.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/button_watch.b864a49b.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/button_yes.631f946a.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/category_fun.5ce4b429.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/category_geometry.292f601d.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/category_painting.ce399769.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/color_picker.50fbe527.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/dialog_tail_right.06d03f80.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/empty_slot.50ad6c8b.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/main_tray_down.24ce5b32.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/main_tray_up.5b933d3f.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/nib_active.cc1fa7b4.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/nib_default.25a2ce14.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/page_indicator_active.81482bb1.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/page_indicator_inactive.6983ce78.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/page_next.434482dc.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/page_previous.527e5ecd.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_brush_bucket.d775d2e8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_brush_eraser.c0e22a7a.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_brush_magic.7610686b.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_brush_mirror.debb401c.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_brush_pattern.1d2bd035.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_brush_roller.4235964e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_brush_solid.1d529a26.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_brush_spraycan.c5317dc3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_brush_translucent.87f6e127.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_tool_shapes.ea6e0be9.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_tool_splat.8a391299.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_tool_stamp.2c2fe8e3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_tool_text.5763dce5.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/redo.1ba88581.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tail_tooltip.04ca77a4.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_coloring_pages.919a3430.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_select.68f77cd0.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_select_editor.583319ce.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_shapes.1bbbf8fc.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_shapes_editor.3d334965.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_splat.2f072d04.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_splat_editor.092db462.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_stamp.e1823c2c.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_stamp_editor.48c0b21e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_stickers.59bca0d0.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_text.fe56af3f.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/tool_text_editor.d68dc69b.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/undo.6b790c29.svg"
}
, function(A, e) {
    A.exports = {
        asyncActions: 0,
        isDocumentReady: !1,
        areToolAssetsReady: !1,
        showUI: !1,
        isWaiting: !1,
        isHistoryTrayOpen: !1,
        isMainTrayOpen: !1,
        isEditorOpen: !1,
        isKeyboardOpen: !1,
        screen: "SPLASH_SCREEN",
        category: "painting",
        dialog: null,
        tool: null,
        tooltip: null,
        tooltipAnchorX: 0,
        tooltipAnchorY: 0,
        color: "#990033",
        nibSize: 20,
        canvasSound: null,
        cursorHeight: 0,
        spraycan_option: "option_spraycan_circle",
        pattern_brush_option: "option_pattern_rainbow",
        stamp_option: "option_stamp_hands",
        splat_option: "option_splat_1",
        text_option: "option_text_1",
        shapes_option: "option_shape_line",
        sticker: "Sticker_1",
        canUndo: !1
    }
}
, function(A, e) {
    A.exports = "abcya-paint"
}
, [901, 667], function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        o(A, e),
        i.MIDI.note(A, e) && (console.log("START SOUND", A, e, t, i.MIDI.currentTime),
        i.sounds.set(A, e, new s.ATSound({
            channelID: A,
            noteID: e,
            velocity: t,
            startTime: i.MIDI.currentTime
        })))
    }
    function o(A, e) {
        var t = i.sounds.get(A, e);
        t && t.stop()
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.AudioTag = void 0;
    var i = t(24)
      , a = t(671)
      , u = t(117)
      , l = n(u)
      , c = (t(53),
    t(670))
      , s = (t(21),
    t(72),
    t(669));
    c.FastTimer.start(function() {
        i.sounds.forEach(function(A) {
            A.forEach(function(A) {
                var e = A.note
                  , t = (A.startTime,
                A.tag);
                if (e.loopEnd) {
                    var n = t.currentTime;
                    if (n >= e.loopEnd) {
                        var r = e.loopStart || 0;
                        t.currentTime = r
                    }
                }
            })
        })
    });
    var p = e.AudioTag = {
        name: "AudioTag",
        timeouts: [],
        sounds: i.sounds,
        tags: new a.ObjectPool(10,function() {
            return new Audio
        }
        ),
        isSupported: function() {
            return window.Audio
        },
        understands: function(A) {
            var e = A.container
              , t = A.codec
              , n = A.sample
              , r = "audio/" + e + '; codecs="' + t + '"'
              , o = "data:" + r + ";base64," + n;
            return new Promise(function(A, e) {
                var t = new Audio;
                return t.canPlayType(r).replace(/no/i, "") ? (t.id = "audio",
                t.controls = !1,
                t.setAttribute("autobuffer", !0),
                t.setAttribute("preload", "auto"),
                t.addEventListener("error", function e(n) {
                    URL.createObjectURL && !t.testedBlobURL ? (t.testedBlobURL = !0,
                    t.src = URL.createObjectURL(l.default.toBlob(o))) : (t.removeEventListener("error", e),
                    A(!1))
                }),
                t.addEventListener("canplaythrough", function e() {
                    t.removeEventListener("canplaythrough", e),
                    A(!0)
                }),
                t.src = o,
                void t.load()) : void A(!1)
            }
            )
        },
        connect: function() {
            if (!p.isSupported())
                throw new Error("SoundModule cannot be connected");
            i.MIDI.SoundModule && i.MIDI.SoundModule.disconnect(),
            i.MIDI.SoundModule = p,
            c.FastTimer.attach()
        },
        disconnect: function() {
            AudioTags.timeouts.forEach(function(A) {
                clearTimeout(A)
            }),
            AudioTags.tags.forEach(function(A) {
                A.stop()
            }),
            AudioTags.drain(),
            c.FastTimer.detach()
        },
        noteOn: function(A, e, t) {
            var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
            n ? p.timeouts.push(setTimeout(function() {
                r(A, e, t)
            }, 1e3 * n)) : r(A, e, t)
        },
        noteOff: function(A, e) {
            var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
            t ? p.timeouts.push(setTimeout(function() {
                o(A, e)
            }, 1e3 * t)) : o(A, e)
        },
        currentTime: function() {
            return performance.now() / 1e3
        }
    }
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(262);
    Object.defineProperty(e, "AudioTag", {
        enumerable: !0,
        get: function() {
            return n.AudioTag
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.knobs = void 0;
    var r = t(116)
      , o = n(r)
      , i = t(53)
      , a = (t(21),
    t(114))
      , u = t(72)
      , l = i.Hooray.create({
        name: "knobs"
    })
      , c = e.knobs = {
        onChange: (0,
        o.default)(),
        add: function(A) {
            var e = A.property
              , t = A.comparator
              , n = A.defaultValue
              , r = A.addMaster
              , o = void 0 !== r && r;
            Object.defineProperty(u.Channel.prototype, e, {
                get: function() {
                    var A = l.get(this.channelID, e);
                    return "undefined" == typeof A ? (l.set(this.channelID, e, n),
                    n) : A
                },
                set: function(A) {
                    var n = l.get(this.channelID, e);
                    n !== A && t(A) && (l.set(this.channelID, e, A),
                    c.onChange.trigger(this, e, A))
                }
            }),
            o && Object.defineProperty(a.MIDI, e, {
                get: function() {
                    var A = l.get("MIDI", e);
                    return "undefined" == typeof A ? (l.set("MIDI", e, n),
                    n) : A
                },
                set: function(A) {
                    var n = l.get("MIDI", e);
                    n !== A && t(A) && (l.set("MIDI", e, A),
                    c.onChange.trigger(this, e, A))
                }
            })
        }
    };
    window.data = l
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.sounds = void 0;
    var n = t(53)
      , r = t(264)
      , o = t(72)
      , i = t(21)
      , a = e.sounds = n.Hooray.create({
        name: "sounds"
    });
    r.knobs.onChange(function(A, e, t) {
        if (A instanceof o.Channel) {
            var n = a.get(A.channelID);
            (0,
            i.forEach)(n, function(A) {
                A.updateProperty(e)
            })
        } else
            (0,
            i.forEach)(a, function(A) {
                (0,
                i.forEach)(A, function(A) {
                    A.updateProperty(e)
                })
            })
    })
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.Sound = void 0;
    var r = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , o = t(24);
    e.Sound = function() {
        function A(e) {
            var t = e.channelID
              , r = e.noteID
              , o = e.velocity
              , i = e.startTime;
            n(this, A),
            this.channelID = t,
            this.noteID = r,
            this.velocity = o,
            this.startTime = i
        }
        return r(A, [{
            key: "stop",
            value: function() {}
        }, {
            key: "dump",
            value: function() {
                console.table(this)
            }
        }, {
            key: "channel",
            get: function() {
                return o.MIDI.channels[this.channelID]
            }
        }, {
            key: "note",
            get: function() {
                return o.MIDI.note(this.channelID, this.noteID)
            }
        }]),
        A
    }()
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.buffers = void 0;
    var r = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , o = t(117)
      , i = n(o)
      , a = t(113)
      , u = t(115)
      , l = t(24)
      , c = t(53)
      , s = t(680)
      , p = void 0
      , f = e.buffers = c.Hooray.create({
        name: "WebAudio buffers"
    });
    (0,
    s.ezDefine)(f, {
        startProcessing: function() {
            l.MIDI.programs.map(function(A, e) {
                return f.processProgram(e, A)
            }),
            p = l.MIDI.programs.onLoad(f.processProgram)
        },
        stopProcessing: function() {
            p.cancel()
        },
        processProgram: function(A, e, t) {
            var n = (arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : l.MIDI.onProgress,
            [])
              , o = !0
              , i = !1
              , a = void 0;
            try {
                for (var u, c = e.notes.entries()[Symbol.iterator](); !(o = (u = c.next()).done); o = !0) {
                    var s = r(u.value, 2)
                      , p = s[0]
                      , g = s[1];
                    if (g) {
                        var I = g.noteData;
                        n.push(f.processNote(A, p, I))
                    }
                }
            } catch (A) {
                i = !0,
                a = A
            } finally {
                try {
                    !o && c.return && c.return()
                } finally {
                    if (i)
                        throw a
                }
            }
            var d = Promise.all(n);
            return l.MIDI.jobs.track(d, "process program " + A + "."),
            d
        },
        processNote: function(A, e, t) {
            var n = void 0;
            if (a.Base64.test(t))
                n = u.WebAudio.context.decodeAudioData(a.Base64.toBuffer(t));
            else if (i.default.test(t)) {
                var r = i.default.toBuffer(t);
                n = u.WebAudio.context.decodeAudioData(r)
            } else
                n = l.MIDI.fetch({
                    URL: t,
                    onProgress: onProgress,
                    responseType: "arraybuffer"
                }).then(function(A) {
                    var e = new ArrayBuffer;
                    return u.WebAudio.context.decodeAudioData(e)
                });
            return n.then(function(t) {
                return f.set(A, e, t)
            }).catch(function(A) {
                return console.log(A)
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(115);
    Object.defineProperty(e, "WebAudio", {
        enumerable: !0,
        get: function() {
            return n.WebAudio
        }
    })
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(679);
    Object.defineProperty(e, "WebMIDI", {
        enumerable: !0,
        get: function() {
            return n.WebMIDI
        }
    })
}
, function(A, e) {
    "use strict";
    function t() {
        (console.table ? console.table : console.log).bind(console)(arguments)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = t
}
, function(A, e, t) {
    "use strict";
    function n() {}
    function r(A) {
        try {
            return A.then
        } catch (A) {
            return q = A,
            C
        }
    }
    function o(A, e) {
        try {
            return A(e)
        } catch (A) {
            return q = A,
            C
        }
    }
    function i(A, e, t) {
        try {
            A(e, t)
        } catch (A) {
            return q = A,
            C
        }
    }
    function a(A) {
        if ("object" != typeof this)
            throw new TypeError("Promises must be constructed via new");
        if ("function" != typeof A)
            throw new TypeError("not a function");
        this._45 = 0,
        this._81 = 0,
        this._65 = null,
        this._54 = null,
        A !== n && I(A, this)
    }
    function u(A, e, t) {
        return new A.constructor(function(r, o) {
            var i = new a(n);
            i.then(r, o),
            l(A, new g(e,t,i))
        }
        )
    }
    function l(A, e) {
        for (; 3 === A._81; )
            A = A._65;
        return a._10 && a._10(A),
        0 === A._81 ? 0 === A._45 ? (A._45 = 1,
        void (A._54 = e)) : 1 === A._45 ? (A._45 = 2,
        void (A._54 = [A._54, e])) : void A._54.push(e) : void c(A, e)
    }
    function c(A, e) {
        d(function() {
            var t = 1 === A._81 ? e.onFulfilled : e.onRejected;
            if (null === t)
                return void (1 === A._81 ? s(e.promise, A._65) : p(e.promise, A._65));
            var n = o(t, A._65);
            n === C ? p(e.promise, q) : s(e.promise, n)
        })
    }
    function s(A, e) {
        if (e === A)
            return p(A, new TypeError("A promise cannot be resolved with itself."));
        if (e && ("object" == typeof e || "function" == typeof e)) {
            var t = r(e);
            if (t === C)
                return p(A, q);
            if (t === A.then && e instanceof a)
                return A._81 = 3,
                A._65 = e,
                void f(A);
            if ("function" == typeof t)
                return void I(t.bind(e), A)
        }
        A._81 = 1,
        A._65 = e,
        f(A)
    }
    function p(A, e) {
        A._81 = 2,
        A._65 = e,
        a._97 && a._97(A, e),
        f(A)
    }
    function f(A) {
        if (1 === A._45 && (l(A, A._54),
        A._54 = null),
        2 === A._45) {
            for (var e = 0; e < A._54.length; e++)
                l(A, A._54[e]);
            A._54 = null
        }
    }
    function g(A, e, t) {
        this.onFulfilled = "function" == typeof A ? A : null,
        this.onRejected = "function" == typeof e ? e : null,
        this.promise = t
    }
    function I(A, e) {
        var t = !1
          , n = i(A, function(A) {
            t || (t = !0,
            s(e, A))
        }, function(A) {
            t || (t = !0,
            p(e, A))
        });
        t || n !== C || (t = !0,
        p(e, q))
    }
    var d = t(336)
      , q = null
      , C = {};
    A.exports = a,
    a._10 = null,
    a._97 = null,
    a._61 = n,
    a.prototype.then = function(A, e) {
        if (this.constructor !== a)
            return u(this, A, e);
        var t = new a(n);
        return l(this, new g(A,e,t)),
        t
    }
}
, function(A, e, t) {
    "use strict";
    var n = t(686);
    A.exports = function(A) {
        var e = !1;
        return n(A, e)
    }
}
, function(A, e) {
    "use strict";
    var t = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    A.exports = t
}
, function(A, e) {
    "use strict";
    function t(A, e) {
        return A + e.charAt(0).toUpperCase() + e.substring(1)
    }
    var n = {
        animationIterationCount: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
    }
      , r = ["Webkit", "ms", "Moz", "O"];
    Object.keys(n).forEach(function(A) {
        r.forEach(function(e) {
            n[t(e, A)] = n[A]
        })
    });
    var o = {
        background: {
            backgroundAttachment: !0,
            backgroundColor: !0,
            backgroundImage: !0,
            backgroundPositionX: !0,
            backgroundPositionY: !0,
            backgroundRepeat: !0
        },
        backgroundPosition: {
            backgroundPositionX: !0,
            backgroundPositionY: !0
        },
        border: {
            borderWidth: !0,
            borderStyle: !0,
            borderColor: !0
        },
        borderBottom: {
            borderBottomWidth: !0,
            borderBottomStyle: !0,
            borderBottomColor: !0
        },
        borderLeft: {
            borderLeftWidth: !0,
            borderLeftStyle: !0,
            borderLeftColor: !0
        },
        borderRight: {
            borderRightWidth: !0,
            borderRightStyle: !0,
            borderRightColor: !0
        },
        borderTop: {
            borderTopWidth: !0,
            borderTopStyle: !0,
            borderTopColor: !0
        },
        font: {
            fontStyle: !0,
            fontVariant: !0,
            fontWeight: !0,
            fontSize: !0,
            lineHeight: !0,
            fontFamily: !0
        },
        outline: {
            outlineWidth: !0,
            outlineStyle: !0,
            outlineColor: !0
        }
    }
      , i = {
        isUnitlessNumber: n,
        shorthandPropertyExpansions: o
    };
    A.exports = i
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    var r = t(8)
      , o = t(32)
      , i = (t(5),
    function() {
        function A(e) {
            n(this, A),
            this._callbacks = null,
            this._contexts = null,
            this._arg = e
        }
        return A.prototype.enqueue = function(A, e) {
            this._callbacks = this._callbacks || [],
            this._callbacks.push(A),
            this._contexts = this._contexts || [],
            this._contexts.push(e)
        }
        ,
        A.prototype.notifyAll = function() {
            var A = this._callbacks
              , e = this._contexts
              , t = this._arg;
            if (A && e) {
                A.length !== e.length ? r("24") : void 0,
                this._callbacks = null,
                this._contexts = null;
                for (var n = 0; n < A.length; n++)
                    A[n].call(e[n], t);
                A.length = 0,
                e.length = 0
            }
        }
        ,
        A.prototype.checkpoint = function() {
            return this._callbacks ? this._callbacks.length : 0
        }
        ,
        A.prototype.rollback = function(A) {
            this._callbacks && this._contexts && (this._callbacks.length = A,
            this._contexts.length = A)
        }
        ,
        A.prototype.reset = function() {
            this._callbacks = null,
            this._contexts = null
        }
        ,
        A.prototype.destructor = function() {
            this.reset()
        }
        ,
        A
    }());
    A.exports = o.addPoolingTo(i)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return !!l.hasOwnProperty(A) || !u.hasOwnProperty(A) && (a.test(A) ? (l[A] = !0,
        !0) : (u[A] = !0,
        !1))
    }
    function r(A, e) {
        return null == e || A.hasBooleanValue && !e || A.hasNumericValue && isNaN(e) || A.hasPositiveNumericValue && e < 1 || A.hasOverloadedBooleanValue && e === !1
    }
    var o = t(41)
      , i = (t(13),
    t(19),
    t(750))
      , a = (t(7),
    new RegExp("^[" + o.ATTRIBUTE_NAME_START_CHAR + "][" + o.ATTRIBUTE_NAME_CHAR + "]*$"))
      , u = {}
      , l = {}
      , c = {
        createMarkupForID: function(A) {
            return o.ID_ATTRIBUTE_NAME + "=" + i(A)
        },
        setAttributeForID: function(A, e) {
            A.setAttribute(o.ID_ATTRIBUTE_NAME, e)
        },
        createMarkupForRoot: function() {
            return o.ROOT_ATTRIBUTE_NAME + '=""'
        },
        setAttributeForRoot: function(A) {
            A.setAttribute(o.ROOT_ATTRIBUTE_NAME, "")
        },
        createMarkupForProperty: function(A, e) {
            var t = o.properties.hasOwnProperty(A) ? o.properties[A] : null;
            if (t) {
                if (r(t, e))
                    return "";
                var n = t.attributeName;
                return t.hasBooleanValue || t.hasOverloadedBooleanValue && e === !0 ? n + '=""' : n + "=" + i(e)
            }
            return o.isCustomAttribute(A) ? null == e ? "" : A + "=" + i(e) : null
        },
        createMarkupForCustomAttribute: function(A, e) {
            return n(A) && null != e ? A + "=" + i(e) : ""
        },
        setValueForProperty: function(A, e, t) {
            var n = o.properties.hasOwnProperty(e) ? o.properties[e] : null;
            if (n) {
                var i = n.mutationMethod;
                if (i)
                    i(A, t);
                else {
                    if (r(n, t))
                        return void this.deleteValueForProperty(A, e);
                    if (n.mustUseProperty)
                        A[n.propertyName] = t;
                    else {
                        var a = n.attributeName
                          , u = n.attributeNamespace;
                        u ? A.setAttributeNS(u, a, "" + t) : n.hasBooleanValue || n.hasOverloadedBooleanValue && t === !0 ? A.setAttribute(a, "") : A.setAttribute(a, "" + t)
                    }
                }
            } else if (o.isCustomAttribute(e))
                return void c.setValueForAttribute(A, e, t)
        },
        setValueForAttribute: function(A, e, t) {
            if (n(e)) {
                null == t ? A.removeAttribute(e) : A.setAttribute(e, "" + t)
            }
        },
        deleteValueForAttribute: function(A, e) {
            A.removeAttribute(e)
        },
        deleteValueForProperty: function(A, e) {
            var t = o.properties.hasOwnProperty(e) ? o.properties[e] : null;
            if (t) {
                var n = t.mutationMethod;
                if (n)
                    n(A, void 0);
                else if (t.mustUseProperty) {
                    var r = t.propertyName;
                    t.hasBooleanValue ? A[r] = !1 : A[r] = ""
                } else
                    A.removeAttribute(t.attributeName)
            } else
                o.isCustomAttribute(e) && A.removeAttribute(e)
        }
    };
    A.exports = c
}
, function(A, e) {
    "use strict";
    var t = {
        hasCachedChildNodes: 1
    };
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n() {
        if (this._rootNodeID && this._wrapperState.pendingUpdate) {
            this._wrapperState.pendingUpdate = !1;
            var A = this._currentElement.props
              , e = a.getValue(A);
            null != e && r(this, Boolean(A.multiple), e)
        }
    }
    function r(A, e, t) {
        var n, r, o = u.getNodeFromInstance(A).options;
        if (e) {
            for (n = {},
            r = 0; r < t.length; r++)
                n["" + t[r]] = !0;
            for (r = 0; r < o.length; r++) {
                var i = n.hasOwnProperty(o[r].value);
                o[r].selected !== i && (o[r].selected = i)
            }
        } else {
            for (n = "" + t,
            r = 0; r < o.length; r++)
                if (o[r].value === n)
                    return void (o[r].selected = !0);
            o.length && (o[0].selected = !0)
        }
    }
    function o(A) {
        var e = this._currentElement.props
          , t = a.executeOnChange(e, A);
        return this._rootNodeID && (this._wrapperState.pendingUpdate = !0),
        l.asap(n, this),
        t
    }
    var i = t(11)
      , a = t(125)
      , u = t(13)
      , l = t(22)
      , c = (t(7),
    !1)
      , s = {
        getHostProps: function(A, e) {
            return i({}, e, {
                onChange: A._wrapperState.onChange,
                value: void 0
            })
        },
        mountWrapper: function(A, e) {
            var t = a.getValue(e);
            A._wrapperState = {
                pendingUpdate: !1,
                initialValue: null != t ? t : e.defaultValue,
                listeners: null,
                onChange: o.bind(A),
                wasMultiple: Boolean(e.multiple)
            },
            void 0 === e.value || void 0 === e.defaultValue || c || (c = !0)
        },
        getSelectValueContext: function(A) {
            return A._wrapperState.initialValue
        },
        postUpdateWrapper: function(A) {
            var e = A._currentElement.props;
            A._wrapperState.initialValue = void 0;
            var t = A._wrapperState.wasMultiple;
            A._wrapperState.wasMultiple = Boolean(e.multiple);
            var n = a.getValue(e);
            null != n ? (A._wrapperState.pendingUpdate = !1,
            r(A, Boolean(e.multiple), n)) : t !== Boolean(e.multiple) && (null != e.defaultValue ? r(A, Boolean(e.multiple), e.defaultValue) : r(A, Boolean(e.multiple), e.multiple ? [] : ""))
        }
    };
    A.exports = s
}
, function(A, e) {
    "use strict";
    var t, n = {
        injectEmptyComponentFactory: function(A) {
            t = A
        }
    }, r = {
        create: function(A) {
            return t(A)
        }
    };
    r.injection = n,
    A.exports = r
}
, function(A, e) {
    "use strict";
    var t = {
        logTopLevelRenders: !1
    };
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return a ? void 0 : i("111", A.type),
        new a(A)
    }
    function r(A) {
        return new u(A)
    }
    function o(A) {
        return A instanceof u
    }
    var i = t(8)
      , a = (t(5),
    null)
      , u = null
      , l = {
        injectGenericComponentClass: function(A) {
            a = A
        },
        injectTextComponentClass: function(A) {
            u = A
        }
    }
      , c = {
        createInternalComponent: n,
        createInstanceForText: r,
        isTextComponent: o,
        injection: l
    };
    A.exports = c
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return o(document.documentElement, A)
    }
    var r = t(710)
      , o = t(449)
      , i = t(186)
      , a = t(187)
      , u = {
        hasSelectionCapabilities: function(A) {
            var e = A && A.nodeName && A.nodeName.toLowerCase();
            return e && ("input" === e && "text" === A.type || "textarea" === e || "true" === A.contentEditable)
        },
        getSelectionInformation: function() {
            var A = a();
            return {
                focusedElem: A,
                selectionRange: u.hasSelectionCapabilities(A) ? u.getSelection(A) : null
            }
        },
        restoreSelection: function(A) {
            var e = a()
              , t = A.focusedElem
              , r = A.selectionRange;
            e !== t && n(t) && (u.hasSelectionCapabilities(t) && u.setSelection(t, r),
            i(t))
        },
        getSelection: function(A) {
            var e;
            if ("selectionStart"in A)
                e = {
                    start: A.selectionStart,
                    end: A.selectionEnd
                };
            else if (document.selection && A.nodeName && "input" === A.nodeName.toLowerCase()) {
                var t = document.selection.createRange();
                t.parentElement() === A && (e = {
                    start: -t.moveStart("character", -A.value.length),
                    end: -t.moveEnd("character", -A.value.length)
                })
            } else
                e = r.getOffsets(A);
            return e || {
                start: 0,
                end: 0
            }
        },
        setSelection: function(A, e) {
            var t = e.start
              , n = e.end;
            if (void 0 === n && (n = t),
            "selectionStart"in A)
                A.selectionStart = t,
                A.selectionEnd = Math.min(n, A.value.length);
            else if (document.selection && A.nodeName && "input" === A.nodeName.toLowerCase()) {
                var o = A.createTextRange();
                o.collapse(!0),
                o.moveStart("character", t),
                o.moveEnd("character", n - t),
                o.select()
            } else
                r.setOffsets(A, e)
        }
    };
    A.exports = u
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        for (var t = Math.min(A.length, e.length), n = 0; n < t; n++)
            if (A.charAt(n) !== e.charAt(n))
                return n;
        return A.length === e.length ? -1 : t
    }
    function r(A) {
        return A ? A.nodeType === O ? A.documentElement : A.firstChild : null
    }
    function o(A) {
        return A.getAttribute && A.getAttribute(G) || ""
    }
    function i(A, e, t, n, r) {
        var o;
        if (h.logTopLevelRenders) {
            var i = A._currentElement.props.child
              , a = i.type;
            o = "React mount: " + ("string" == typeof a ? a : a.displayName || a.name),
            console.time(o)
        }
        var u = E.mountComponent(A, t, null, m(A, e), r, 0);
        o && console.timeEnd(o),
        A._renderedComponent._topLevelWrapper = A,
        T._mountImageIntoNode(u, e, A, n, t)
    }
    function a(A, e, t, n) {
        var r = k.ReactReconcileTransaction.getPooled(!t && y.useCreateElement);
        r.perform(i, null, A, e, r, t, n),
        k.ReactReconcileTransaction.release(r)
    }
    function u(A, e, t) {
        for (E.unmountComponent(A, t),
        e.nodeType === O && (e = e.documentElement); e.lastChild; )
            e.removeChild(e.lastChild)
    }
    function l(A) {
        var e = r(A);
        if (e) {
            var t = C.getInstanceFromNode(e);
            return !(!t || !t._hostParent)
        }
    }
    function c(A) {
        return !(!A || A.nodeType !== Z && A.nodeType !== O && A.nodeType !== j)
    }
    function s(A) {
        var e = r(A)
          , t = e && C.getInstanceFromNode(e);
        return t && !t._hostParent ? t : null
    }
    function p(A) {
        var e = s(A);
        return e ? e._hostContainerInfo._topLevelWrapper : null
    }
    var f = t(8)
      , g = t(40)
      , I = t(41)
      , d = t(43)
      , q = t(76)
      , C = (t(26),
    t(13))
      , m = t(704)
      , y = t(706)
      , h = t(280)
      , M = t(56)
      , V = (t(19),
    t(720))
      , E = t(42)
      , S = t(128)
      , k = t(22)
      , b = t(69)
      , v = t(291)
      , R = (t(5),
    t(80))
      , U = t(134)
      , G = (t(7),
    I.ID_ATTRIBUTE_NAME)
      , Q = I.ROOT_ATTRIBUTE_NAME
      , Z = 1
      , O = 9
      , j = 11
      , B = {}
      , w = 1
      , Y = function() {
        this.rootID = w++
    };
    Y.prototype.isReactComponent = {},
    Y.prototype.render = function() {
        return this.props.child
    }
    ,
    Y.isReactTopLevelWrapper = !0;
    var T = {
        TopLevelWrapper: Y,
        _instancesByReactRootID: B,
        scrollMonitor: function(A, e) {
            e()
        },
        _updateRootComponent: function(A, e, t, n, r) {
            return T.scrollMonitor(n, function() {
                S.enqueueElementInternal(A, e, t),
                r && S.enqueueCallbackInternal(A, r)
            }),
            A
        },
        _renderNewRootComponent: function(A, e, t, n) {
            c(e) ? void 0 : f("37"),
            q.ensureScrollValueMonitoring();
            var r = v(A, !1);
            k.batchedUpdates(a, r, e, t, n);
            var o = r._instance.rootID;
            return B[o] = r,
            r
        },
        renderSubtreeIntoContainer: function(A, e, t, n) {
            return null != A && M.has(A) ? void 0 : f("38"),
            T._renderSubtreeIntoContainer(A, e, t, n)
        },
        _renderSubtreeIntoContainer: function(A, e, t, n) {
            S.validateCallback(n, "ReactDOM.render"),
            d.isValidElement(e) ? void 0 : f("39", "string" == typeof e ? " Instead of passing a string like 'div', pass React.createElement('div') or <div />." : "function" == typeof e ? " Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />." : null != e && void 0 !== e.props ? " This may be caused by unintentionally loading two independent copies of React." : "");
            var i, a = d.createElement(Y, {
                child: e
            });
            if (A) {
                var u = M.get(A);
                i = u._processChildContext(u._context)
            } else
                i = b;
            var c = p(t);
            if (c) {
                var s = c._currentElement
                  , g = s.props.child;
                if (U(g, e)) {
                    var I = c._renderedComponent.getPublicInstance()
                      , q = n && function() {
                        n.call(I)
                    }
                    ;
                    return T._updateRootComponent(c, a, i, t, q),
                    I
                }
                T.unmountComponentAtNode(t)
            }
            var C = r(t)
              , m = C && !!o(C)
              , y = l(t)
              , h = m && !c && !y
              , V = T._renderNewRootComponent(a, t, h, i)._renderedComponent.getPublicInstance();
            return n && n.call(V),
            V
        },
        render: function(A, e, t) {
            return T._renderSubtreeIntoContainer(null, A, e, t)
        },
        unmountComponentAtNode: function(A) {
            c(A) ? void 0 : f("40");
            var e = p(A);
            if (!e) {
                l(A),
                1 === A.nodeType && A.hasAttribute(Q);
                return !1
            }
            return delete B[e._instance.rootID],
            k.batchedUpdates(u, e, A, !1),
            !0
        },
        _mountImageIntoNode: function(A, e, t, o, i) {
            if (c(e) ? void 0 : f("41"),
            o) {
                var a = r(e);
                if (V.canReuseMarkup(A, a))
                    return void C.precacheNode(t, a);
                var u = a.getAttribute(V.CHECKSUM_ATTR_NAME);
                a.removeAttribute(V.CHECKSUM_ATTR_NAME);
                var l = a.outerHTML;
                a.setAttribute(V.CHECKSUM_ATTR_NAME, u);
                var s = A
                  , p = n(s, l)
                  , I = " (client) " + s.substring(p - 20, p + 20) + "\n (server) " + l.substring(p - 20, p + 20);
                e.nodeType === O ? f("42", I) : void 0
            }
            if (e.nodeType === O ? f("43") : void 0,
            i.useCreateElement) {
                for (; e.lastChild; )
                    e.removeChild(e.lastChild);
                g.insertTreeBefore(e, A, null)
            } else
                R(e, A),
                C.precacheNode(t, e.firstChild)
        }
    };
    A.exports = T
}
, function(A, e, t) {
    "use strict";
    var n = t(8)
      , r = t(43)
      , o = (t(5),
    {
        HOST: 0,
        COMPOSITE: 1,
        EMPTY: 2,
        getType: function(A) {
            return null === A || A === !1 ? o.EMPTY : r.isValidElement(A) ? "function" == typeof A.type ? o.COMPOSITE : o.HOST : void n("26", A)
        }
    });
    A.exports = o
}
, function(A, e) {
    "use strict";
    var t = {
        currentScrollLeft: 0,
        currentScrollTop: 0,
        refreshScrollValues: function(A) {
            t.currentScrollLeft = A.x,
            t.currentScrollTop = A.y
        }
    };
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        return null == e ? r("30") : void 0,
        null == A ? e : Array.isArray(A) ? Array.isArray(e) ? (A.push.apply(A, e),
        A) : (A.push(e),
        A) : Array.isArray(e) ? [A].concat(e) : [A, e]
    }
    var r = t(8);
    t(5);
    A.exports = n
}
, function(A, e) {
    "use strict";
    function t(A, e, t) {
        Array.isArray(A) ? A.forEach(e, t) : A && e.call(t, A)
    }
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        for (var e; (e = A._renderedNodeType) === r.COMPOSITE; )
            A = A._renderedComponent;
        return e === r.HOST ? A._renderedComponent : e === r.EMPTY ? null : void 0
    }
    var r = t(284);
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n() {
        return !o && r.canUseDOM && (o = "textContent"in document.documentElement ? "textContent" : "innerText"),
        o
    }
    var r = t(16)
      , o = null;
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        var e = A.type
          , t = A.nodeName;
        return t && "input" === t.toLowerCase() && ("checkbox" === e || "radio" === e)
    }
    function r(A) {
        return A._wrapperState.valueTracker
    }
    function o(A, e) {
        A._wrapperState.valueTracker = e
    }
    function i(A) {
        delete A._wrapperState.valueTracker
    }
    function a(A) {
        var e;
        return A && (e = n(A) ? "" + A.checked : A.value),
        e
    }
    var u = t(13)
      , l = {
        _getTrackerFromNode: function(A) {
            return r(u.getInstanceFromNode(A))
        },
        track: function(A) {
            if (!r(A)) {
                var e = u.getNodeFromInstance(A)
                  , t = n(e) ? "checked" : "value"
                  , a = Object.getOwnPropertyDescriptor(e.constructor.prototype, t)
                  , l = "" + e[t];
                e.hasOwnProperty(t) || "function" != typeof a.get || "function" != typeof a.set || (Object.defineProperty(e, t, {
                    enumerable: a.enumerable,
                    configurable: !0,
                    get: function() {
                        return a.get.call(this)
                    },
                    set: function(A) {
                        l = "" + A,
                        a.set.call(this, A)
                    }
                }),
                o(A, {
                    getValue: function() {
                        return l
                    },
                    setValue: function(A) {
                        l = "" + A
                    },
                    stopTracking: function() {
                        i(A),
                        delete e[t]
                    }
                }))
            }
        },
        updateValueIfChanged: function(A) {
            if (!A)
                return !1;
            var e = r(A);
            if (!e)
                return l.track(A),
                !0;
            var t = e.getValue()
              , n = a(u.getNodeFromInstance(A));
            return n !== t && (e.setValue(n),
            !0)
        },
        stopTracking: function(A) {
            var e = r(A);
            e && e.stopTracking()
        }
    };
    A.exports = l
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A) {
            var e = A.getName();
            if (e)
                return " Check the render method of `" + e + "`."
        }
        return ""
    }
    function r(A) {
        return "function" == typeof A && "undefined" != typeof A.prototype && "function" == typeof A.prototype.mountComponent && "function" == typeof A.prototype.receiveComponent
    }
    function o(A, e) {
        var t;
        if (null === A || A === !1)
            t = l.create(o);
        else if ("object" == typeof A) {
            var a = A
              , u = a.type;
            if ("function" != typeof u && "string" != typeof u) {
                var p = "";
                p += n(a._owner),
                i("130", null == u ? u : typeof u, p)
            }
            "string" == typeof a.type ? t = c.createInternalComponent(a) : r(a.type) ? (t = new a.type(a),
            t.getHostNode || (t.getHostNode = t.getNativeNode)) : t = new s(a)
        } else
            "string" == typeof A || "number" == typeof A ? t = c.createInstanceForText(A) : i("131", typeof A);
        return t._mountIndex = 0,
        t._mountImage = null,
        t
    }
    var i = t(8)
      , a = t(11)
      , u = t(701)
      , l = t(279)
      , c = t(281)
      , s = (t(789),
    t(5),
    t(7),
    function(A) {
        this.construct(A)
    }
    );
    a(s.prototype, u, {
        _instantiateReactComponent: o
    }),
    A.exports = o
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = A && A.nodeName && A.nodeName.toLowerCase();
        return "input" === e ? !!n[A.type] : "textarea" === e
    }
    var n = {
        color: !0,
        date: !0,
        datetime: !0,
        "datetime-local": !0,
        email: !0,
        month: !0,
        number: !0,
        password: !0,
        range: !0,
        search: !0,
        tel: !0,
        text: !0,
        time: !0,
        url: !0,
        week: !0
    };
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    var n = t(16)
      , r = t(79)
      , o = t(80)
      , i = function(A, e) {
        if (e) {
            var t = A.firstChild;
            if (t && t === A.lastChild && 3 === t.nodeType)
                return void (t.nodeValue = e)
        }
        A.textContent = e
    };
    n.canUseDOM && ("textContent"in document.documentElement || (i = function(A, e) {
        return 3 === A.nodeType ? void (A.nodeValue = e) : void o(A, r(e))
    }
    )),
    A.exports = i
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        return A && "object" == typeof A && null != A.key ? l.escape(A.key) : e.toString(36)
    }
    function r(A, e, t, o) {
        var p = typeof A;
        if ("undefined" !== p && "boolean" !== p || (A = null),
        null === A || "string" === p || "number" === p || "object" === p && A.$$typeof === a)
            return t(o, A, "" === e ? c + n(A, 0) : e),
            1;
        var f, g, I = 0, d = "" === e ? c : e + s;
        if (Array.isArray(A))
            for (var q = 0; q < A.length; q++)
                f = A[q],
                g = d + n(f, q),
                I += r(f, g, t, o);
        else {
            var C = u(A);
            if (C) {
                var m, y = C.call(A);
                if (C !== A.entries)
                    for (var h = 0; !(m = y.next()).done; )
                        f = m.value,
                        g = d + n(f, h++),
                        I += r(f, g, t, o);
                else
                    for (; !(m = y.next()).done; ) {
                        var M = m.value;
                        M && (f = M[1],
                        g = d + l.escape(M[0]) + s + n(f, 0),
                        I += r(f, g, t, o))
                    }
            } else if ("object" === p) {
                var V = ""
                  , E = String(A);
                i("31", "[object Object]" === E ? "object with keys {" + Object.keys(A).join(", ") + "}" : E, V)
            }
        }
        return I
    }
    function o(A, e, t) {
        return null == A ? 0 : r(A, "", e, t)
    }
    var i = t(8)
      , a = (t(26),
    t(716))
      , u = t(747)
      , l = (t(5),
    t(124))
      , c = (t(7),
    ".")
      , s = ":";
    A.exports = o
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = void 0;
    var r = t(752)
      , o = n(r);
    e.default = o.default
}
, function(A, e) {
    "use strict";
    e.__esModule = !0,
    e.default = {
        noWobble: {
            stiffness: 170,
            damping: 26
        },
        gentle: {
            stiffness: 120,
            damping: 14
        },
        wobbly: {
            stiffness: 180,
            damping: 12
        },
        stiff: {
            stiffness: 210,
            damping: 20
        }
    },
    A.exports = e.default
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    function a(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function u() {}
    function l(A, e) {
        var t = {
            run: function(n) {
                try {
                    var r = A(e.getState(), n);
                    (r !== t.props || t.error) && (t.shouldComponentUpdate = !0,
                    t.props = r,
                    t.error = null)
                } catch (A) {
                    t.shouldComponentUpdate = !0,
                    t.error = A
                }
            }
        };
        return t
    }
    function c(A) {
        var e, t, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, c = n.getDisplayName, p = void 0 === c ? function(A) {
            return "ConnectAdvanced(" + A + ")"
        }
        : c, g = n.methodName, q = void 0 === g ? "connectAdvanced" : g, M = n.renderCountProp, V = void 0 === M ? void 0 : M, E = n.shouldHandleStateChanges, S = void 0 === E || E, k = n.storeKey, b = void 0 === k ? "store" : k, v = n.withRef, R = void 0 !== v && v, U = a(n, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef"]), G = b + "Subscription", Q = y++, Z = (e = {},
        e[b] = m.storeShape,
        e[G] = m.subscriptionShape,
        e), O = (t = {},
        t[G] = m.subscriptionShape,
        t);
        return function(e) {
            (0,
            I.default)("function" == typeof e, "You must pass a component to the function returned by connect. Instead received " + JSON.stringify(e));
            var t = e.displayName || e.name || "Component"
              , n = p(t)
              , a = s({}, U, {
                getDisplayName: p,
                methodName: q,
                renderCountProp: V,
                shouldHandleStateChanges: S,
                storeKey: b,
                withRef: R,
                displayName: n,
                wrappedComponentName: t,
                WrappedComponent: e
            })
              , c = function(t) {
                function c(A, e) {
                    r(this, c);
                    var i = o(this, t.call(this, A, e));
                    return i.version = Q,
                    i.state = {},
                    i.renderCount = 0,
                    i.store = A[b] || e[b],
                    i.propsMode = Boolean(A[b]),
                    i.setWrappedInstance = i.setWrappedInstance.bind(i),
                    (0,
                    I.default)(i.store, 'Could not find "' + b + '" in either the context or props of ' + ('"' + n + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + b + '" as a prop to "' + n + '".')),
                    i.initSelector(),
                    i.initSubscription(),
                    i
                }
                return i(c, t),
                c.prototype.getChildContext = function() {
                    var A, e = this.propsMode ? null : this.subscription;
                    return A = {},
                    A[G] = e || this.context[G],
                    A
                }
                ,
                c.prototype.componentDidMount = function() {
                    S && (this.subscription.trySubscribe(),
                    this.selector.run(this.props),
                    this.selector.shouldComponentUpdate && this.forceUpdate())
                }
                ,
                c.prototype.componentWillReceiveProps = function(A) {
                    this.selector.run(A)
                }
                ,
                c.prototype.shouldComponentUpdate = function() {
                    return this.selector.shouldComponentUpdate
                }
                ,
                c.prototype.componentWillUnmount = function() {
                    this.subscription && this.subscription.tryUnsubscribe(),
                    this.subscription = null,
                    this.notifyNestedSubs = u,
                    this.store = null,
                    this.selector.run = u,
                    this.selector.shouldComponentUpdate = !1
                }
                ,
                c.prototype.getWrappedInstance = function() {
                    return (0,
                    I.default)(R, "To access the wrapped instance, you need to specify " + ("{ withRef: true } in the options argument of the " + q + "() call.")),
                    this.wrappedInstance
                }
                ,
                c.prototype.setWrappedInstance = function(A) {
                    this.wrappedInstance = A
                }
                ,
                c.prototype.initSelector = function() {
                    var e = A(this.store.dispatch, a);
                    this.selector = l(e, this.store),
                    this.selector.run(this.props)
                }
                ,
                c.prototype.initSubscription = function() {
                    if (S) {
                        var A = (this.propsMode ? this.props : this.context)[G];
                        this.subscription = new C.default(this.store,A,this.onStateChange.bind(this)),
                        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription)
                    }
                }
                ,
                c.prototype.onStateChange = function() {
                    this.selector.run(this.props),
                    this.selector.shouldComponentUpdate ? (this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate,
                    this.setState(h)) : this.notifyNestedSubs()
                }
                ,
                c.prototype.notifyNestedSubsOnComponentDidUpdate = function() {
                    this.componentDidUpdate = void 0,
                    this.notifyNestedSubs()
                }
                ,
                c.prototype.isSubscribed = function() {
                    return Boolean(this.subscription) && this.subscription.isSubscribed()
                }
                ,
                c.prototype.addExtraProps = function(A) {
                    if (!(R || V || this.propsMode && this.subscription))
                        return A;
                    var e = s({}, A);
                    return R && (e.ref = this.setWrappedInstance),
                    V && (e[V] = this.renderCount++),
                    this.propsMode && this.subscription && (e[G] = this.subscription),
                    e
                }
                ,
                c.prototype.render = function() {
                    var A = this.selector;
                    if (A.shouldComponentUpdate = !1,
                    A.error)
                        throw A.error;
                    return (0,
                    d.createElement)(e, this.addExtraProps(A.props))
                }
                ,
                c
            }(d.Component);
            return c.WrappedComponent = e,
            c.displayName = n,
            c.childContextTypes = O,
            c.contextTypes = Z,
            c.propTypes = Z,
            (0,
            f.default)(c, e)
        }
    }
    e.__esModule = !0;
    var s = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
    ;
    e.default = c;
    var p = t(656)
      , f = n(p)
      , g = t(657)
      , I = n(g)
      , d = t(1)
      , q = t(771)
      , C = n(q)
      , m = t(299)
      , y = 0
      , h = {}
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return function(e, t) {
            function n() {
                return r
            }
            var r = A(e, t);
            return n.dependsOnOwnProps = !1,
            n
        }
    }
    function o(A) {
        return null !== A.dependsOnOwnProps && void 0 !== A.dependsOnOwnProps ? Boolean(A.dependsOnOwnProps) : 1 !== A.length
    }
    function i(A, e) {
        return function(e, t) {
            var n = (t.displayName,
            function(A, e) {
                return n.dependsOnOwnProps ? n.mapToProps(A, e) : n.mapToProps(A)
            }
            );
            return n.dependsOnOwnProps = !0,
            n.mapToProps = function(e, t) {
                n.mapToProps = A,
                n.dependsOnOwnProps = o(A);
                var r = n(e, t);
                return "function" == typeof r && (n.mapToProps = r,
                n.dependsOnOwnProps = o(r),
                r = n(e, t)),
                r
            }
            ,
            n
        }
    }
    e.__esModule = !0,
    e.wrapMapToPropsConstant = r,
    e.getDependsOnOwnProps = o,
    e.wrapMapToPropsFunc = i;
    var a = t(300);
    n(a)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    e.__esModule = !0,
    e.storeShape = e.subscriptionShape = void 0;
    var r = t(29)
      , o = n(r);
    e.subscriptionShape = o.default.shape({
        trySubscribe: o.default.func.isRequired,
        tryUnsubscribe: o.default.func.isRequired,
        notifyNestedSubs: o.default.func.isRequired,
        isSubscribed: o.default.func.isRequired
    }),
    e.storeShape = o.default.shape({
        subscribe: o.default.func.isRequired,
        dispatch: o.default.func.isRequired,
        getState: o.default.func.isRequired
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        (0,
        i.default)(A) || (0,
        u.default)(t + "() in " + e + " must return a plain object. Instead received " + A + ".")
    }
    e.__esModule = !0,
    e.default = r;
    var o = t(112)
      , i = n(o)
      , a = t(139)
      , u = n(a)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(29)
      , s = n(c)
      , p = function(A) {
        function e() {
            var A, t, n, i;
            r(this, e);
            for (var a = arguments.length, u = Array(a), l = 0; l < a; l++)
                u[l] = arguments[l];
            return t = n = o(this, (A = e.__proto__ || Object.getPrototypeOf(e)).call.apply(A, [this].concat(u))),
            n.handleClick = function() {
                return n.props.onClick(n.props.value)
            }
            ,
            i = t,
            o(n, i)
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                return l.default.createElement("button", {
                    type: "button",
                    className: "keyboard-button " + this.props.classes,
                    onClick: this.props.isDisabled ? null : this.handleClick,
                    autoFocus: this.props.autofocus,
                    disabled: this.props.isDisabled
                }, this.props.value)
            }
        }]),
        e
    }(u.PureComponent);
    p.propTypes = {
        value: s.default.oneOfType([s.default.string.isRequired, s.default.node.isRequired]),
        classes: s.default.string,
        onClick: s.default.func.isRequired,
        autofocus: s.default.bool,
        isDisabled: s.default.bool
    },
    p.defaultProps = {
        classes: "",
        autofocus: !1,
        isDisabled: !1
    },
    e.default = p
}
, function(A, e) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = {
        symbolsKeyValue: "Абв",
        layout: [["й", "ц", "у", "к", "е", "н", "г", "ш", "щ", "з", "х", "ъ"], ["ф", "ы", "в", "а", "п", "р", "о", "л", "д", "ж", "э"], ["я", "ч", "с", "м", "и", "т", "ь", "б", "ю"]]
    }
}
, function(A, e) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = {
        symbolsKeyValue: "Abc",
        layout: [["q", "w", "e", "r", "t", "y", "u", "i", "o", "p"], ["a", "s", "d", "f", "g", "h", "j", "k", "l"], ["z", "x", "c", "v", "b", "n", "m"]]
    }
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t) {
        this.props = A,
        this.context = e,
        this.refs = l,
        this.updater = t || u
    }
    function r(A, e, t) {
        this.props = A,
        this.context = e,
        this.refs = l,
        this.updater = t || u
    }
    function o() {}
    var i = t(58)
      , a = t(11)
      , u = t(307)
      , l = (t(308),
    t(69));
    t(5),
    t(790);
    n.prototype.isReactComponent = {},
    n.prototype.setState = function(A, e) {
        "object" != typeof A && "function" != typeof A && null != A ? i("85") : void 0,
        this.updater.enqueueSetState(this, A),
        e && this.updater.enqueueCallback(this, e, "setState")
    }
    ,
    n.prototype.forceUpdate = function(A) {
        this.updater.enqueueForceUpdate(this),
        A && this.updater.enqueueCallback(this, A, "forceUpdate")
    }
    ;
    o.prototype = n.prototype,
    r.prototype = new o,
    r.prototype.constructor = r,
    a(r.prototype, n.prototype),
    r.prototype.isPureReactComponent = !0,
    A.exports = {
        Component: n,
        PureComponent: r
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        var e = Function.prototype.toString
          , t = Object.prototype.hasOwnProperty
          , n = RegExp("^" + e.call(t).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        try {
            var r = e.call(A);
            return n.test(r)
        } catch (A) {
            return !1
        }
    }
    function r(A) {
        var e = l(A);
        if (e) {
            var t = e.childIDs;
            c(A),
            t.forEach(r)
        }
    }
    function o(A, e, t) {
        return "\n    in " + (A || "Unknown") + (e ? " (at " + e.fileName.replace(/^.*[\\\/]/, "") + ":" + e.lineNumber + ")" : t ? " (created by " + t + ")" : "")
    }
    function i(A) {
        return null == A ? "#empty" : "string" == typeof A || "number" == typeof A ? "#text" : "string" == typeof A.type ? A.type : A.type.displayName || A.type.name || "Unknown"
    }
    function a(A) {
        var e, t = S.getDisplayName(A), n = S.getElement(A), r = S.getOwnerID(A);
        return r && (e = S.getDisplayName(r)),
        o(t, n && n._source, e)
    }
    var u, l, c, s, p, f, g, I = t(58), d = t(26), q = (t(5),
    t(7),
    "function" == typeof Array.from && "function" == typeof Map && n(Map) && null != Map.prototype && "function" == typeof Map.prototype.keys && n(Map.prototype.keys) && "function" == typeof Set && n(Set) && null != Set.prototype && "function" == typeof Set.prototype.keys && n(Set.prototype.keys));
    if (q) {
        var C = new Map
          , m = new Set;
        u = function(A, e) {
            C.set(A, e)
        }
        ,
        l = function(A) {
            return C.get(A)
        }
        ,
        c = function(A) {
            C.delete(A)
        }
        ,
        s = function() {
            return Array.from(C.keys())
        }
        ,
        p = function(A) {
            m.add(A)
        }
        ,
        f = function(A) {
            m.delete(A)
        }
        ,
        g = function() {
            return Array.from(m.keys())
        }
    } else {
        var y = {}
          , h = {}
          , M = function(A) {
            return "." + A
        }
          , V = function(A) {
            return parseInt(A.substr(1), 10)
        };
        u = function(A, e) {
            var t = M(A);
            y[t] = e
        }
        ,
        l = function(A) {
            var e = M(A);
            return y[e]
        }
        ,
        c = function(A) {
            var e = M(A);
            delete y[e]
        }
        ,
        s = function() {
            return Object.keys(y).map(V)
        }
        ,
        p = function(A) {
            var e = M(A);
            h[e] = !0
        }
        ,
        f = function(A) {
            var e = M(A);
            delete h[e]
        }
        ,
        g = function() {
            return Object.keys(h).map(V)
        }
    }
    var E = []
      , S = {
        onSetChildren: function(A, e) {
            var t = l(A);
            t ? void 0 : I("144"),
            t.childIDs = e;
            for (var n = 0; n < e.length; n++) {
                var r = e[n]
                  , o = l(r);
                o ? void 0 : I("140"),
                null == o.childIDs && "object" == typeof o.element && null != o.element ? I("141") : void 0,
                o.isMounted ? void 0 : I("71"),
                null == o.parentID && (o.parentID = A),
                o.parentID !== A ? I("142", r, o.parentID, A) : void 0
            }
        },
        onBeforeMountComponent: function(A, e, t) {
            var n = {
                element: e,
                parentID: t,
                text: null,
                childIDs: [],
                isMounted: !1,
                updateCount: 0
            };
            u(A, n)
        },
        onBeforeUpdateComponent: function(A, e) {
            var t = l(A);
            t && t.isMounted && (t.element = e)
        },
        onMountComponent: function(A) {
            var e = l(A);
            e ? void 0 : I("144"),
            e.isMounted = !0;
            var t = 0 === e.parentID;
            t && p(A)
        },
        onUpdateComponent: function(A) {
            var e = l(A);
            e && e.isMounted && e.updateCount++
        },
        onUnmountComponent: function(A) {
            var e = l(A);
            if (e) {
                e.isMounted = !1;
                var t = 0 === e.parentID;
                t && f(A)
            }
            E.push(A)
        },
        purgeUnmountedComponents: function() {
            if (!S._preventPurging) {
                for (var A = 0; A < E.length; A++) {
                    var e = E[A];
                    r(e)
                }
                E.length = 0
            }
        },
        isMounted: function(A) {
            var e = l(A);
            return !!e && e.isMounted
        },
        getCurrentStackAddendum: function(A) {
            var e = "";
            if (A) {
                var t = i(A)
                  , n = A._owner;
                e += o(t, A._source, n && n.getName())
            }
            var r = d.current
              , a = r && r._debugID;
            return e += S.getStackAddendumByID(a)
        },
        getStackAddendumByID: function(A) {
            for (var e = ""; A; )
                e += a(A),
                A = S.getParentID(A);
            return e
        },
        getChildIDs: function(A) {
            var e = l(A);
            return e ? e.childIDs : []
        },
        getDisplayName: function(A) {
            var e = S.getElement(A);
            return e ? i(e) : null
        },
        getElement: function(A) {
            var e = l(A);
            return e ? e.element : null
        },
        getOwnerID: function(A) {
            var e = S.getElement(A);
            return e && e._owner ? e._owner._debugID : null
        },
        getParentID: function(A) {
            var e = l(A);
            return e ? e.parentID : null
        },
        getSource: function(A) {
            var e = l(A)
              , t = e ? e.element : null
              , n = null != t ? t._source : null;
            return n
        },
        getText: function(A) {
            var e = S.getElement(A);
            return "string" == typeof e ? e : "number" == typeof e ? "" + e : null
        },
        getUpdateCount: function(A) {
            var e = l(A);
            return e ? e.updateCount : 0
        },
        getRootIDs: g,
        getRegisteredIDs: s,
        pushNonStandardWarningStack: function(A, e) {
            if ("function" == typeof console.reactStack) {
                var t = []
                  , n = d.current
                  , r = n && n._debugID;
                try {
                    for (A && t.push({
                        name: r ? S.getDisplayName(r) : null,
                        fileName: e ? e.fileName : null,
                        lineNumber: e ? e.lineNumber : null
                    }); r; ) {
                        var o = S.getElement(r)
                          , i = S.getParentID(r)
                          , a = S.getOwnerID(r)
                          , u = a ? S.getDisplayName(a) : null
                          , l = o && o._source;
                        t.push({
                            name: u,
                            fileName: l ? l.fileName : null,
                            lineNumber: l ? l.lineNumber : null
                        }),
                        r = i
                    }
                } catch (A) {}
                console.reactStack(t)
            }
        },
        popNonStandardWarningStack: function() {
            "function" == typeof console.reactStackEnd && console.reactStackEnd()
        }
    };
    A.exports = S
}
, function(A, e) {
    "use strict";
    var t = "function" == typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {}
    var r = (t(7),
    {
        isMounted: function(A) {
            return !1
        },
        enqueueCallback: function(A, e) {},
        enqueueForceUpdate: function(A) {
            n(A, "forceUpdate")
        },
        enqueueReplaceState: function(A, e) {
            n(A, "replaceState")
        },
        enqueueSetState: function(A, e) {
            n(A, "setState")
        }
    });
    A.exports = r
}
, function(A, e, t) {
    "use strict";
    var n = !1;
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.utils = e.effects = e.CANCEL = e.delay = e.throttle = e.takeLatest = e.takeEvery = e.buffers = e.channel = e.eventChannel = e.END = e.runSaga = void 0;
    var o = t(798);
    Object.defineProperty(e, "runSaga", {
        enumerable: !0,
        get: function() {
            return o.runSaga
        }
    });
    var i = t(83);
    Object.defineProperty(e, "END", {
        enumerable: !0,
        get: function() {
            return i.END
        }
    }),
    Object.defineProperty(e, "eventChannel", {
        enumerable: !0,
        get: function() {
            return i.eventChannel
        }
    }),
    Object.defineProperty(e, "channel", {
        enumerable: !0,
        get: function() {
            return i.channel
        }
    });
    var a = t(82);
    Object.defineProperty(e, "buffers", {
        enumerable: !0,
        get: function() {
            return a.buffers
        }
    });
    var u = t(310);
    Object.defineProperty(e, "takeEvery", {
        enumerable: !0,
        get: function() {
            return u.takeEvery
        }
    }),
    Object.defineProperty(e, "takeLatest", {
        enumerable: !0,
        get: function() {
            return u.takeLatest
        }
    }),
    Object.defineProperty(e, "throttle", {
        enumerable: !0,
        get: function() {
            return u.throttle
        }
    });
    var l = t(27);
    Object.defineProperty(e, "delay", {
        enumerable: !0,
        get: function() {
            return l.delay
        }
    }),
    Object.defineProperty(e, "CANCEL", {
        enumerable: !0,
        get: function() {
            return l.CANCEL
        }
    });
    var c = t(797)
      , s = r(c)
      , p = t(14)
      , f = n(p)
      , g = t(799)
      , I = n(g);
    e.default = s.default,
    e.effects = f,
    e.utils = I
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        function t(e, t) {
            if (o === g)
                return f;
            if (t)
                throw o = g,
                t;
            r && r(e);
            var n = A[o]()
              , i = u(n, 3)
              , a = i[0]
              , l = i[1]
              , c = i[2];
            return o = a,
            r = c,
            o === g ? f : l
        }
        var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "iterator"
          , r = void 0
          , o = e;
        return (0,
        c.makeIterator)(t, function(A) {
            return t(null, A)
        }, n, !0)
    }
    function r(A) {
        return c.is.channel(A) ? "channel" : Array.isArray(A) ? String(A.map(function(A) {
            return String(A)
        })) : String(A)
    }
    function o(A, e) {
        for (var t = arguments.length, o = Array(t > 2 ? t - 2 : 0), i = 2; i < t; i++)
            o[i - 2] = arguments[i];
        var a = {
            done: !1,
            value: (0,
            s.take)(A)
        }
          , u = function(A) {
            return {
                done: !1,
                value: s.fork.apply(void 0, [e].concat(o, [A]))
            }
        }
          , c = void 0
          , p = function(A) {
            return c = A
        };
        return n({
            q1: function() {
                return ["q2", a, p]
            },
            q2: function() {
                return c === l.END ? [g] : ["q1", u(c)]
            }
        }, "q1", "takeEvery(" + r(A) + ", " + e.name + ")")
    }
    function i(A, e) {
        for (var t = arguments.length, o = Array(t > 2 ? t - 2 : 0), i = 2; i < t; i++)
            o[i - 2] = arguments[i];
        var a = {
            done: !1,
            value: (0,
            s.take)(A)
        }
          , u = function(A) {
            return {
                done: !1,
                value: s.fork.apply(void 0, [e].concat(o, [A]))
            }
        }
          , c = function(A) {
            return {
                done: !1,
                value: (0,
                s.cancel)(A)
            }
        }
          , p = void 0
          , f = void 0
          , I = function(A) {
            return p = A
        }
          , d = function(A) {
            return f = A
        };
        return n({
            q1: function() {
                return ["q2", a, d]
            },
            q2: function() {
                return f === l.END ? [g] : p ? ["q3", c(p)] : ["q1", u(f), I]
            },
            q3: function() {
                return ["q1", u(f), I]
            }
        }, "q1", "takeLatest(" + r(A) + ", " + e.name + ")")
    }
    function a(A, e, t) {
        for (var o = arguments.length, i = Array(o > 3 ? o - 3 : 0), a = 3; a < o; a++)
            i[a - 3] = arguments[a];
        var u = void 0
          , f = void 0
          , I = {
            done: !1,
            value: (0,
            s.actionChannel)(e, p.buffers.sliding(1))
        }
          , d = function() {
            return {
                done: !1,
                value: (0,
                s.take)(f)
            }
        }
          , q = function(A) {
            return {
                done: !1,
                value: s.fork.apply(void 0, [t].concat(i, [A]))
            }
        }
          , C = {
            done: !1,
            value: (0,
            s.call)(c.delay, A)
        }
          , m = function(A) {
            return u = A
        }
          , y = function(A) {
            return f = A
        };
        return n({
            q1: function() {
                return ["q2", I, y]
            },
            q2: function() {
                return ["q3", d(), m]
            },
            q3: function() {
                return u === l.END ? [g] : ["q4", q(u)]
            },
            q4: function() {
                return ["q2", C]
            }
        }, "q1", "throttle(" + r(e) + ", " + t.name + ")")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.throttle = e.takeLatest = e.takeEvery = void 0;
    var u = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }();
    e.takeEveryHelper = o,
    e.takeLatestHelper = i,
    e.throttleHelper = a;
    var l = t(83)
      , c = t(27)
      , s = t(84)
      , p = t(82)
      , f = {
        done: !0,
        value: void 0
    }
      , g = {}
      , I = function(A) {
        return "import " + A + " from 'redux-saga' has been deprecated in favor of import " + A + " from 'redux-saga/effects'.\nThe latter will not work with yield*, as helper effects are wrapped automatically for you in fork effect.\nTherefore yield " + A + " will return task descriptor to your saga and execute next lines of code."
    };
    e.takeEvery = (0,
    c.deprecate)(o, I("takeEvery")),
    e.takeLatest = (0,
    c.deprecate)(i, I("takeLatest")),
    e.throttle = (0,
    c.deprecate)(a, I("throttle"))
}
, function(A, e) {
    "use strict";
    function t(A) {
        try {
            r(),
            A()
        } finally {
            o()
        }
    }
    function n(A) {
        a.push(A),
        u || (r(),
        i())
    }
    function r() {
        u++
    }
    function o() {
        u--
    }
    function i() {
        o();
        for (var A = void 0; !u && void 0 !== (A = a.shift()); )
            t(A)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.asap = n,
    e.suspend = r,
    e.flush = i;
    var a = []
      , u = 0
}
, function(A, e) {
    "use strict";
    function t() {
        for (var A = arguments.length, e = Array(A), t = 0; t < A; t++)
            e[t] = arguments[t];
        return 0 === e.length ? function(A) {
            return A
        }
        : 1 === e.length ? e[0] : e.reduce(function(A, e) {
            return function() {
                return A(e.apply(void 0, arguments))
            }
        })
    }
    e.__esModule = !0,
    e.default = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        function n() {
            q === d && (q = d.slice())
        }
        function o() {
            return I
        }
        function a(A) {
            if ("function" != typeof A)
                throw new Error("Expected listener to be a function.");
            var e = !0;
            return n(),
            q.push(A),
            function() {
                if (e) {
                    e = !1,
                    n();
                    var t = q.indexOf(A);
                    q.splice(t, 1)
                }
            }
        }
        function c(A) {
            if (!(0,
            i.default)(A))
                throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
            if ("undefined" == typeof A.type)
                throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');
            if (C)
                throw new Error("Reducers may not dispatch actions.");
            try {
                C = !0,
                I = g(I, A)
            } finally {
                C = !1
            }
            for (var e = d = q, t = 0; t < e.length; t++) {
                var n = e[t];
                n()
            }
            return A
        }
        function s(A) {
            if ("function" != typeof A)
                throw new Error("Expected the nextReducer to be a function.");
            g = A,
            c({
                type: l.INIT
            })
        }
        function p() {
            var A, e = a;
            return A = {
                subscribe: function(A) {
                    function t() {
                        A.next && A.next(o())
                    }
                    if ("object" != typeof A)
                        throw new TypeError("Expected the observer to be an object.");
                    t();
                    var n = e(t);
                    return {
                        unsubscribe: n
                    }
                }
            },
            A[u.default] = function() {
                return this
            }
            ,
            A
        }
        var f;
        if ("function" == typeof e && "undefined" == typeof t && (t = e,
        e = void 0),
        "undefined" != typeof t) {
            if ("function" != typeof t)
                throw new Error("Expected the enhancer to be a function.");
            return t(r)(A, e)
        }
        if ("function" != typeof A)
            throw new Error("Expected the reducer to be a function.");
        var g = A
          , I = e
          , d = []
          , q = d
          , C = !1;
        return c({
            type: l.INIT
        }),
        f = {
            dispatch: c,
            subscribe: a,
            getState: o,
            replaceReducer: s
        },
        f[u.default] = p,
        f
    }
    e.__esModule = !0,
    e.ActionTypes = void 0,
    e.default = r;
    var o = t(112)
      , i = n(o)
      , a = t(805)
      , u = n(a)
      , l = e.ActionTypes = {
        INIT: "@@redux/INIT"
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    e.__esModule = !0,
    e.compose = e.applyMiddleware = e.bindActionCreators = e.combineReducers = e.createStore = void 0;
    var r = t(313)
      , o = n(r)
      , i = t(802)
      , a = n(i)
      , u = t(801)
      , l = n(u)
      , c = t(800)
      , s = n(c)
      , p = t(312)
      , f = n(p)
      , g = t(315);
    n(g);
    e.createStore = o.default,
    e.combineReducers = a.default,
    e.bindActionCreators = l.default,
    e.applyMiddleware = s.default,
    e.compose = f.default
}
, function(A, e) {
    "use strict";
    function t(A) {
        "undefined" != typeof console && "function" == typeof console.error && console.error(A);
        try {
            throw new Error(A)
        } catch (A) {}
    }
    e.__esModule = !0,
    e.default = t
}
, function(A, e) {
    A.exports = function(A) {
        return A.webpackPolyfill || (A.deprecate = function() {}
        ,
        A.paths = [],
        A.children = [],
        A.webpackPolyfill = 1),
        A
    }
}
, function(A, e, t) {
    var n = t(45)
      , r = t(34)
      , o = n(r, "Map");
    A.exports = o
}
, function(A, e, t) {
    var n = t(45)
      , r = t(34)
      , o = n(r, "Set");
    A.exports = o
}
, function(A, e, t) {
    function n(A) {
        var e = -1
          , t = A ? A.length : 0;
        for (this.__data__ = new r; ++e < t; )
            this.add(A[e])
    }
    var r = t(141)
      , o = t(875)
      , i = t(876);
    n.prototype.add = n.prototype.push = o,
    n.prototype.has = i,
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        this.__data__ = new r(A)
    }
    var r = t(85)
      , o = t(878)
      , i = t(879)
      , a = t(880)
      , u = t(881)
      , l = t(882);
    n.prototype.clear = o,
    n.prototype.delete = i,
    n.prototype.get = a,
    n.prototype.has = u,
    n.prototype.set = l,
    A.exports = n
}
, [901, 34], function(A, e) {
    function t(A, e) {
        for (var t = -1, n = A.length; ++t < n; )
            if (e(A[t], t, A))
                return !0;
        return !1
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A, e) {
        e = o(e, A) ? [e] : r(e);
        for (var t = 0, n = e.length; null != A && t < n; )
            A = A[i(e[t++])];
        return t && t == n ? A : void 0
    }
    var r = t(326)
      , o = t(88)
      , i = t(90);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        return i.call(A, e) || "object" == typeof A && e in A && null === r(A)
    }
    var r = t(852)
      , o = Object.prototype
      , i = o.hasOwnProperty;
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return function(e) {
            return null == e ? void 0 : e[A]
        }
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        return r(A) ? A : o(A)
    }
    var r = t(28)
      , o = t(883);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e, t, n, u, l) {
        var c = u & a
          , s = A.length
          , p = e.length;
        if (s != p && !(c && p > s))
            return !1;
        var f = l.get(A);
        if (f)
            return f == e;
        var g = -1
          , I = !0
          , d = u & i ? new r : void 0;
        for (l.set(A, e); ++g < s; ) {
            var q = A[g]
              , C = e[g];
            if (n)
                var m = c ? n(C, q, g, e, A, l) : n(q, C, g, A, e, l);
            if (void 0 !== m) {
                if (m)
                    continue;
                I = !1;
                break
            }
            if (d) {
                if (!o(e, function(A, e) {
                    if (!d.has(e) && (q === A || t(q, A, n, u, l)))
                        return d.add(e)
                })) {
                    I = !1;
                    break
                }
            } else if (q !== C && !t(q, C, n, u, l)) {
                I = !1;
                break
            }
        }
        return l.delete(A),
        I
    }
    var r = t(319)
      , o = t(322)
      , i = 1
      , a = 2;
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        return q.call(A)
    }
    var r = t(814)
      , o = t(317)
      , i = t(816)
      , a = t(318)
      , u = t(818)
      , l = t(333)
      , c = "[object Map]"
      , s = "[object Object]"
      , p = "[object Promise]"
      , f = "[object Set]"
      , g = "[object WeakMap]"
      , I = "[object DataView]"
      , d = Object.prototype
      , q = d.toString
      , C = l(r)
      , m = l(o)
      , y = l(i)
      , h = l(a)
      , M = l(u);
    (r && n(new r(new ArrayBuffer(1))) != I || o && n(new o) != c || i && n(i.resolve()) != p || a && n(new a) != f || u && n(new u) != g) && (n = function(A) {
        var e = q.call(A)
          , t = e == s ? A.constructor : void 0
          , n = t ? l(t) : void 0;
        if (n)
            switch (n) {
            case C:
                return I;
            case m:
                return c;
            case y:
                return p;
            case h:
                return f;
            case M:
                return g
            }
        return e
    }
    ),
    A.exports = n
}
, function(A, e) {
    function t(A) {
        var e = !1;
        if (null != A && "function" != typeof A.toString)
            try {
                e = !!(A + "")
            } catch (A) {}
        return e
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        return A === A && !r(A)
    }
    var r = t(35);
    A.exports = n
}
, function(A, e) {
    function t(A) {
        var e = -1
          , t = Array(A.size);
        return A.forEach(function(A, n) {
            t[++e] = [n, A]
        }),
        t
    }
    A.exports = t
}
, function(A, e) {
    function t(A, e) {
        return function(t) {
            return null != t && (t[A] === e && (void 0 !== e || A in Object(t)))
        }
    }
    A.exports = t
}
, function(A, e) {
    function t(A) {
        if (null != A) {
            try {
                return n.call(A)
            } catch (A) {}
            try {
                return A + ""
            } catch (A) {}
        }
        return ""
    }
    var n = Function.prototype.toString;
    A.exports = t
}
, function(A, e) {
    function t(A, e) {
        return A === e || A !== A && e !== e
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        return o(A) && r(A)
    }
    var r = t(91)
      , o = t(60);
    A.exports = n
}
, function(A, e) {
    (function(e) {
        "use strict";
        function t(A) {
            a.length || (i(),
            u = !0),
            a[a.length] = A
        }
        function n() {
            for (; l < a.length; ) {
                var A = l;
                if (l += 1,
                a[A].call(),
                l > c) {
                    for (var e = 0, t = a.length - l; e < t; e++)
                        a[e] = a[e + l];
                    a.length -= l,
                    l = 0
                }
            }
            a.length = 0,
            l = 0,
            u = !1
        }
        function r(A) {
            var e = 1
              , t = new p(A)
              , n = document.createTextNode("");
            return t.observe(n, {
                characterData: !0
            }),
            function() {
                e = -e,
                n.data = e
            }
        }
        function o(A) {
            return function() {
                function e() {
                    clearTimeout(t),
                    clearInterval(n),
                    A()
                }
                var t = setTimeout(e, 0)
                  , n = setInterval(e, 50)
            }
        }
        A.exports = t;
        var i, a = [], u = !1, l = 0, c = 1024, s = "undefined" != typeof e ? e : self, p = s.MutationObserver || s.WebKitMutationObserver;
        i = "function" == typeof p ? r(n) : o(n),
        t.requestFlush = i,
        t.makeRequestCallFromTimer = o
    }
    ).call(e, function() {
        return this
    }())
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        switch (e.type) {
        case i.default.SET_TOOL:
            var t = u.default.byName(e.tool);
            if (t) {
                var n = t.cursorAttributes();
                return Object.assign({}, A, {
                    cursorHeight: n.height
                })
            }
            return A;
        case i.default.INCREASE_CURSOR_HEIGHT:
            return Object.assign({}, A, {
                cursorHeight: A.cursorHeight + e.by
            });
        case i.default.RESET_CURSOR_HEIGHT:
            var r = (0,
            c.default)();
            if (r) {
                var o = r.cursorAttributes();
                return Object.assign({}, A, {
                    cursorHeight: o.height
                })
            }
            return A;
        default:
            return A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = r;
    var o = t(3)
      , i = n(o)
      , a = t(10)
      , u = n(a)
      , l = t(66)
      , c = n(l)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = e.dialog;
        switch (e.type) {
        case i.default.SET_TOOL:
            t = p.get(e.tool);
        case i.default.TOGGLE_DIALOG:
            if (t && t !== A.dialog)
                return s("Opening dialog: %s", t),
                Object.assign({}, A, {
                    dialog: t,
                    isMainTrayOpen: !1
                });
        case i.default.CLOSE_DIALOG:
            if (t)
                return s("Closing dialog: %s", A.dialog),
                Object.assign({}, A, {
                    dialog: null
                });
        case i.default.ADD_STICKER:
        case i.default.ADD_PAGE:
        case i.default.SAVE:
        case i.default.IMPORT_BACKGROUND:
        case i.default.WATCH_TUTORIAL:
            return Object.assign({}, A, {
                dialog: null
            });
        default:
            return A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = r;
    var o = t(3)
      , i = n(o)
      , a = t(52)
      , u = n(a)
      , l = t(2)
      , c = n(l)
      , s = (0,
    c.default)("ABCya-paint:src/CNS/reducers/dialogReducer.js")
      , p = new u.default({
        data: {
            stickers: "StickerPicker",
            coloring_pages: "PagePicker"
        },
        defaultValue: ""
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = e.type
          , n = e.canUndo
          , r = e.canRedo;
        switch (t) {
        case i.default.UPDATE_HISTORY_TRAY:
            return l("The history tray will %s.", r ? "open" : "close"),
            Object.assign({}, A, {
                canUndo: n,
                isHistoryTrayOpen: r
            });
        case i.default.FINISH_UNDO:
            return l("Finishing undo action; the history tray will %s.", r ? "open" : "close"),
            Object.assign({}, A, {
                canUndo: n,
                isHistoryTrayOpen: r,
                dialog: null
            });
        case i.default.FINISH_REDO:
            return l("Finishing redo action; the history tray will %s.", r ? "open" : "close"),
            Object.assign({}, A, {
                canUndo: n,
                isHistoryTrayOpen: r,
                dialog: null
            });
        default:
            return A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = r;
    var o = t(3)
      , i = n(o)
      , a = t(2)
      , u = n(a)
      , l = (0,
    u.default)("ABCya-paint:src/CNS/reducers/historyReducer.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(337);
    Object.defineProperty(e, "cursorReducer", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(338);
    Object.defineProperty(e, "dialogReducer", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(339);
    Object.defineProperty(e, "historyReducer", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(341);
    Object.defineProperty(e, "mainReducer", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(342);
    Object.defineProperty(e, "textReducer", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(343);
    Object.defineProperty(e, "tooltipReducer", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(344);
    Object.defineProperty(e, "waitingReducer", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function o(A, e) {
        return d[e.type] ? d[e.type](A, e) : A
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var i;
    e.default = o;
    var a = t(3)
      , u = n(a)
      , l = t(259)
      , c = n(l)
      , s = t(10)
      , p = n(s)
      , f = t(2)
      , g = n(f)
      , I = (0,
    g.default)("ABCya-paint:src/CNS/reducers/mainReducer.js")
      , d = (i = {},
    r(i, u.default.FATAL_ERROR, function(A, e) {
        return Object.assign({}, A, {
            screen: "ERROR_SCREEN"
        })
    }),
    r(i, u.default.FINISH_SPLASH_SCREEN, function(A, e) {
        return Object.assign({}, A, {
            screen: "MAIN_SCREEN"
        })
    }),
    r(i, u.default.FINISH_SKETCH_DOCUMENT_INIT, function(A, e) {
        var t = Object.assign({}, A, {
            isDocumentReady: !0
        });
        return t.areToolAssetsReady && (t.showUI = !0),
        t
    }),
    r(i, u.default.FINISH_PREPARING_TOOL_ASSETS, function(A, e) {
        var t = Object.assign({}, A, {
            areToolAssetsReady: !0
        });
        return t.isDocumentReady && (t.showUI = !0),
        t
    }),
    r(i, u.default.NEW_DOCUMENT, function(A, e) {
        return I("Creating a new document"),
        Object.assign({}, c.default, {
            screen: "MAIN_SCREEN",
            showUI: !0
        })
    }),
    r(i, u.default.FINISH_SAVE, function(A, e) {
        return window.saveAs(e.imageContents, "ABCya-paint.png"),
        Object.assign({}, A, {
            isSaving: !1
        })
    }),
    r(i, u.default.IMPORT_BACKGROUND, function(A, e) {
        return I("Opening a background importer"),
        A
    }),
    r(i, u.default.TOGGLE_MAIN_TRAY, function(A, e) {
        return I((A.isMainTrayOpen ? "Closing" : "Opening") + " main tray"),
        Object.assign({}, A, {
            isMainTrayOpen: !A.isMainTrayOpen,
            dialog: null
        })
    }),
    r(i, u.default.CLOSE_MAIN_TRAY, function(A, e) {
        return Object.assign({}, A, {
            isMainTrayOpen: !1
        })
    }),
    r(i, u.default.OPEN_EDITOR, function(A, e) {
        return I("Opening editor"),
        Object.assign({}, A, {
            activeEditor: e.editor,
            isMainTrayOpen: !1
        })
    }),
    r(i, u.default.CLOSE_EDITOR, function(A, e) {
        return I("Closing editor"),
        Object.assign({}, A, {
            isEditorOpen: !1,
            dialog: null
        })
    }),
    r(i, u.default.SET_TOOL, function(A, e) {
        var t = e.tool
          , n = e.category
          , r = void 0 === n ? "painting" : n
          , o = p.default.byName(t);
        return o ? (I('Setting tool "%s" in category "%s"', t, r),
        Object.assign({}, A, {
            tool: t,
            category: r,
            isMainTrayOpen: !1,
            isEditorOpen: !!o.Editor
        })) : (I('No tool class exists for the tool "%s"', t),
        A)
    }),
    r(i, u.default.SET_CATEGORY, function(A, e) {
        return I('Setting the fake pane category to "%s"', e.category),
        Object.assign({}, A, {
            category: e.category,
            isMainTrayOpen: !1,
            dialog: null
        })
    }),
    r(i, u.default.SET_COLOR, function(A, e) {
        return I("Setting color: %j", {
            action: e
        }),
        Object.assign({}, A, {
            color: e.color
        })
    }),
    r(i, u.default.SET_OPTION, function(A, e) {
        I("Setting option %s for tool %s", e.option, e.tool);
        var t = {};
        return t[e.tool + "_option"] = e.option,
        Object.assign({}, A, t)
    }),
    r(i, u.default.SET_NIB_SIZE, function(A, e) {
        return Object.assign({}, A, {
            nibSize: e.nibSize
        })
    }),
    r(i, u.default.ADD_STICKER, function(A, e) {
        return I("Adding sticker: %s", e.sticker),
        Object.assign({}, A, {
            sticker: e.sticker
        })
    }),
    r(i, u.default.ADD_PAGE, function(A, e) {
        return I("Adding coloring page: %s", e.coloring_page),
        Object.assign({}, A, {
            coloring_page: e.coloring_page
        })
    }),
    r(i, u.default.SET_PAGE, function(A, e) {
        return Object.assign({}, A, r({}, e.dialog, e.page))
    }),
    i)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        switch (e.type) {
        case i.default.SET_OPTION:
        case i.default.OPEN_OSK:
            if (s(e),
            "text" === A.tool && (s("The on-screen keyboard may open"),
            u.default))
                return s("The on-screen keyboard will open"),
                Object.assign({}, A, {
                    isKeyboardOpen: !0
                });
        case i.default.ADD_TEXT:
            return Object.assign({}, A, {
                isKeyboardOpen: !1
            });
        default:
            return A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = r;
    var o = t(3)
      , i = n(o)
      , a = t(105)
      , u = n(a)
      , l = t(2)
      , c = n(l)
      , s = (0,
    c.default)("ABCya-paint:src/CNS/reducers/textReducer.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        switch (e.type) {
        case i.default.SHOW_TOOLTIP:
            return Object.assign({}, A, {
                tooltip: e.tooltip,
                tooltipAnchorX: e.anchor.x,
                tooltipAnchorY: e.anchor.y
            });
        case i.default.HIDE_TOOLTIP:
            return Object.assign({}, A, {
                tooltip: null
            });
        default:
            return A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = r;
    var o = t(3)
      , i = n(o)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function o(A, e) {
        var t = A.asyncActions || 0
          , n = void 0
          , o = {};
        switch (e.type) {
        case a.default.START_WAITING:
            if (n = e.count || 1,
            e.tag) {
                var i = "waiting." + e.tag;
                o = r({}, i, (A[i] || 0) + n)
            }
            return c("Waiting!"),
            Object.assign({}, A, Object.assign({
                asyncActions: t + n,
                isWaiting: !0
            }, o));
        case a.default.STOP_WAITING:
            if (n = e.count || 1,
            e.tag) {
                var u = "waiting." + e.tag;
                o = r({}, u, (A[u] || 1) - n)
            }
            return t -= n,
            0 === t && c("Not waiting anymore"),
            Object.assign({}, A, Object.assign({
                asyncActions: t,
                isWaiting: !!t
            }, o));
        default:
            return A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = o;
    var i = t(3)
      , a = n(i)
      , u = t(2)
      , l = n(u)
      , c = (0,
    l.default)("ABCya-paint:src/CNS/reducers/waitingReducer.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        return i.default.wrap(function(A) {
            for (; ; )
                switch (A.prev = A.next) {
                case 0:
                    return A.next = 2,
                    [(0,
                    l.takeEvery)(u.default.APPLICATION_INIT, i.default.mark(function A() {
                        return i.default.wrap(function(A) {
                            for (; ; )
                                switch (A.prev = A.next) {
                                case 0:
                                    return A.next = 2,
                                    (0,
                                    l.put)({
                                        type: u.default.START_WAITING,
                                        tag: "AppSaga"
                                    });
                                case 2:
                                    return A.next = 4,
                                    (0,
                                    l.call)(s.default.await);
                                case 4:
                                    return A.next = 6,
                                    (0,
                                    l.put)({
                                        type: u.default.FINISH_PREPARING_TOOL_ASSETS
                                    });
                                case 6:
                                case "end":
                                    return A.stop()
                                }
                        }, A, this)
                    })), (0,
                    l.takeEvery)(u.default.FINISH_SKETCH_DOCUMENT_INIT, i.default.mark(function A() {
                        var e;
                        return i.default.wrap(function(A) {
                            for (; ; )
                                switch (A.prev = A.next) {
                                case 0:
                                    return A.next = 2,
                                    (0,
                                    l.select)(function(A) {
                                        return A.tool
                                    });
                                case 2:
                                    if (e = A.sent,
                                    !e) {
                                        A.next = 7;
                                        break
                                    }
                                    return I("Selecting a tool..."),
                                    A.next = 7,
                                    (0,
                                    l.put)({
                                        type: u.default.SET_TOOL,
                                        tool: e
                                    });
                                case 7:
                                    return A.next = 9,
                                    (0,
                                    l.put)({
                                        type: u.default.STOP_WAITING,
                                        tag: "AppSaga"
                                    });
                                case 9:
                                case "end":
                                    return A.stop()
                                }
                        }, A, this)
                    }))];
                case 2:
                case "end":
                    return A.stop()
                }
        }, g[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(3)
      , u = n(a)
      , l = t(14)
      , c = t(154)
      , s = n(c)
      , p = t(2)
      , f = n(p)
      , g = [r].map(i.default.mark)
      , I = (0,
    f.default)("ABCya-paint:src/CNS/sagas/appSaga.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        s.sagaMiddleware.run(i.default),
        s.sagaMiddleware.run(u.default),
        s.sagaMiddleware.run(c.default)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = r;
    var o = t(363)
      , i = n(o)
      , a = t(368)
      , u = n(a)
      , l = t(345)
      , c = n(l)
      , s = t(148)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.ViewportResizer = void 0;
    var r = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , o = t(4)
      , i = t(2)
      , a = n(i)
      , u = []
      , l = (0,
    a.default)("ABCya-paint:src/CNS/sagas/sketchSaga/ViewportResizer.js");
    e.ViewportResizer = {
        attach: function() {
            o.AsyncObject.waitFor(o.sketch, o.Gesture).then(function(A) {
                function e() {
                    l("Resizing viewport"),
                    n.doc.setViewportSize()
                }
                var t = r(A, 2)
                  , n = t[0]
                  , o = t[1];
                u.push(o.on(document, "fullscreenchange", e)),
                u.push(o.on(window, "orientationchange", e)),
                u.push(o.on(window, "onresize", e))
            })
        },
        detach: function() {
            u.forEach(function(A) {
                return A.detach()
            })
        }
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        return i.default.wrap(function(A) {
            for (; ; )
                switch (A.prev = A.next) {
                case 0:
                    return A.next = 2,
                    (0,
                    a.call)(function() {
                        return u.sketch.await().then(function(A) {
                            return A.doc.setSize(100, 100, "%"),
                            A.doc.gesture.cancelCapture = function(A) {
                                return "coloringPage" === A.name
                            }
                            ,
                            A.doc.gesture.capturePaintSource = function(A) {
                                var e = A.toolkitId;
                                return "brush" === e || "floodfill" === e
                            }
                            ,
                            A.doc.gesture.capturePaintTarget = function(A) {
                                var e = A.toolkitId;
                                return "image" === e || "shape" === e
                            }
                            ,
                            I.ViewportResizer.attach(),
                            y.attach()
                        })
                    });
                case 2:
                case "end":
                    return A.stop()
                }
        }, C[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(14)
      , u = t(4)
      , l = t(3)
      , c = n(l)
      , s = t(149)
      , p = n(s)
      , f = t(15)
      , g = n(f)
      , I = t(347)
      , d = t(2)
      , q = n(d)
      , C = [r].map(i.default.mark)
      , m = (0,
    q.default)("ABCya-paint:src/CNS/sagas/sketchSaga/configureDocument.js")
      , y = p.default.onGesture(function(A) {
        switch (A.state) {
        case "start":
            return u.sketch.await().then(function(A) {
                m("Closing the main tray"),
                g.default.dispatch({
                    type: c.default.CLOSE_MAIN_TRAY
                })
            });
        case "end":
            setTimeout(function() {
                return u.sketch.await().then(function(A) {
                    m("Updating the history tray"),
                    g.default.dispatch({
                        type: c.default.UPDATE_HISTORY_TRAY,
                        canUndo: A.doc.history.canUndo() > 0,
                        canRedo: A.doc.history.canRedo() > 0
                    })
                })
            }, 0)
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function o(A) {
        return "./fonts/asap/Asap-Regular." + A
    }
    function i() {
        return u.default.wrap(function(A) {
            for (; ; )
                switch (A.prev = A.next) {
                case 0:
                    return A.next = 2,
                    (0,
                    l.call)(function() {
                        return c.sketch.await().then(function(A) {
                            d("Configuring the sketch API!"),
                            A.globals.paintIntoShapes = !0,
                            A.config("feature", {
                                history: {
                                    limit: 25
                                },
                                restoreSettings: !1,
                                showTransparency: !1,
                                paintIntoShapes: !0,
                                snapToGrid: !1,
                                snapToGuides: !1,
                                snapToObjects: !1,
                                snapToPixels: !1,
                                suppressScrollX: !0,
                                suppressScrollY: !0,
                                guides: {
                                    visible: !1
                                },
                                defaults: {
                                    font: "Asap"
                                },
                                tools: {
                                    allTools: {
                                        enableLiveCursor: !1
                                    },
                                    text: {
                                        useResize: !0,
                                        useAutoHeight: !0
                                    }
                                },
                                style: {
                                    globalized: "no"
                                },
                                uploader: {
                                    DnD: !1
                                }
                            }),
                            A.config("hosts", r({}, location.host, {
                                HOST: ".",
                                MEDIA: "./"
                            })),
                            A.config("assets", {
                                font: [{
                                    key: "Asap",
                                    type: ["font"],
                                    value: {
                                        "normal 400": {
                                            style: "normal",
                                            weight: 400,
                                            woff: o("woff"),
                                            ttf: o("ttf")
                                        }
                                    },
                                    defaultVariant: "normal 400",
                                    variations: ["normal 400"]
                                }, {
                                    key: "Arial",
                                    type: ["font"],
                                    value: {
                                        "normal 400": {
                                            style: "normal",
                                            weight: 400,
                                            woff2: "fonts/arial/Arial.woff2",
                                            woff: "fonts/arial/Arial.woff",
                                            ttf: "fonts/arial/Arial.ttf"
                                        }
                                    },
                                    defaultVariant: "normal 400",
                                    variations: ["normal 400"]
                                }]
                            });
                            var e = p.default.map(function(A) {
                                return A()
                            });
                            return d("Registering %s toolkit%s", e.length, 1 === e.length ? "" : "s"),
                            Promise.all(e)
                        })
                    });
                case 2:
                case "end":
                    return A.stop()
                }
        }, I[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = t(9)
      , u = n(a);
    e.default = i;
    var l = t(14)
      , c = t(4)
      , s = t(364)
      , p = n(s)
      , f = t(2)
      , g = n(f)
      , I = [i].map(u.default.mark)
      , d = (0,
    g.default)("ABCya-paint:src/CNS/sagas/sketchSaga/configureSketch.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        var A;
        return i.default.wrap(function(e) {
            for (; ; )
                switch (e.prev = e.next) {
                case 0:
                    return e.next = 2,
                    (0,
                    u.select)(function(A) {
                        return A.coloring_page
                    });
                case 2:
                    return A = e.sent,
                    e.next = 5,
                    (0,
                    u.call)(function() {
                        return l.AsyncObject.waitFor(l.sketch, l.toolAssets).then(function(e) {
                            var t = a(e, 2)
                              , n = t[0]
                              , r = t[1]
                              , o = n.doc
                              , i = o.scene
                              , u = i.find(function(A) {
                                return "background" === A.name
                            })
                              , l = i.find(function(A) {
                                return "coloringPage" === A.name
                            });
                            l && i.remove(l, {
                                recordHistory: !0
                            });
                            var c = u ? 1 : 0;
                            i.insertChild({
                                type: "clipart",
                                name: "coloringPage",
                                src: r[A],
                                selectable: !1,
                                bbox: {
                                    width: o.pixelWidth,
                                    height: o.pixelHeight
                                }
                            }, c, {
                                recordHistory: !0
                            }),
                            o.render.scene()
                        })
                    });
                case 5:
                case "end":
                    return e.stop()
                }
        }, c[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o)
      , a = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }();
    e.default = r;
    var u = t(14)
      , l = t(4)
      , c = [r].map(i.default.mark)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return function() {
            var e = A.apply(this, arguments);
            return new Promise(function(A, t) {
                function n(r, o) {
                    try {
                        var i = e[r](o)
                          , a = i.value
                    } catch (A) {
                        return void t(A)
                    }
                    return i.done ? void A(a) : Promise.resolve(a).then(function(A) {
                        n("next", A)
                    }, function(A) {
                        n("throw", A)
                    })
                }
                return n("next")
            }
            )
        }
    }
    function o(A) {
        var e = this
          , t = A.x
          , n = A.y
          , o = A.diameter
          , i = A.color
          , c = A.asset;
        return a.default.wrap(function(A) {
            for (; ; )
                switch (A.prev = A.next) {
                case 0:
                    return A.next = 2,
                    (0,
                    u.call)(function() {
                        return l.sketch.await().then(function() {
                            var A = r(a.default.mark(function A(r) {
                                return a.default.wrap(function(A) {
                                    for (; ; )
                                        switch (A.prev = A.next) {
                                        case 0:
                                            return f('Adding splat layer with attributes "%j"', {
                                                x: t,
                                                y: n,
                                                diameter: o,
                                                color: i,
                                                asset: c
                                            }),
                                            A.abrupt("return", r.doc.scene.add({
                                                type: "splat",
                                                stroke: {
                                                    type: "color",
                                                    color: i
                                                },
                                                diameter: o,
                                                src: c,
                                                x: t,
                                                y: n,
                                                centerOnPoint: !0,
                                                rotate: [0, 0],
                                                translate: [0, 0],
                                                scale: [1, 1],
                                                path: "M0,0 L0,0"
                                            }).catch(function(A) {
                                                f(A)
                                            }));
                                        case 2:
                                        case "end":
                                            return A.stop()
                                        }
                                }, A, e)
                            }));
                            return function(e) {
                                return A.apply(this, arguments)
                            }
                        }())
                    });
                case 2:
                case "end":
                    return A.stop()
                }
        }, p[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var i = t(9)
      , a = n(i);
    e.default = o;
    var u = t(14)
      , l = t(4)
      , c = t(2)
      , s = n(c)
      , p = [o].map(a.default.mark)
      , f = (0,
    s.default)("ABCya-paint:src/CNS/sagas/sketchSaga/handlers/addText.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function o() {
        var A, e, t;
        return a.default.wrap(function(n) {
            for (; ; )
                switch (n.prev = n.next) {
                case 0:
                    return n.next = 2,
                    (0,
                    u.select)(function(A) {
                        return A
                    });
                case 2:
                    return A = n.sent,
                    e = A.tool,
                    t = A.sticker,
                    n.next = 6,
                    (0,
                    s.default)({
                        tool: e
                    });
                case 6:
                    return n.next = 8,
                    (0,
                    u.call)(function() {
                        return l.sketch.await().then(function(A) {
                            A.doc.scene.add({
                                centerOnPoint: !0,
                                type: "clipart",
                                src: f[t]
                            }).then(function() {
                                A.doc.scene.deselectAll()
                            })
                        })
                    });
                case 8:
                    return n.next = 10,
                    (0,
                    u.put)({
                        type: I.default.SET_TOOL,
                        tool: "select",
                        category: "geometry"
                    });
                case 10:
                case "end":
                    return n.stop()
                }
        }, d[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var i = t(9)
      , a = r(i);
    e.default = o;
    var u = t(14)
      , l = t(4)
      , c = t(151)
      , s = r(c)
      , p = t(107)
      , f = n(p)
      , g = t(3)
      , I = r(g)
      , d = [o].map(a.default.mark)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        var e = A.text;
        return i.default.wrap(function(A) {
            for (; ; )
                switch (A.prev = A.next) {
                case 0:
                    return A.next = 2,
                    (0,
                    a.call)(c.default.use);
                case 2:
                    return A.next = 4,
                    (0,
                    a.call)(c.default.updateSketch);
                case 4:
                    return A.next = 6,
                    (0,
                    a.call)(function() {
                        return u.sketch.await().then(function(A) {
                            d('Adding text layer with contents "%s"', e),
                            A.doc.scene.add({
                                type: "text",
                                content: e,
                                fontFamily: "Asap"
                            }).then(function(e) {
                                A.doc.scene.select(e)
                            })
                        })
                    });
                case 6:
                    return A.next = 8,
                    (0,
                    a.put)({
                        type: p.default.SET_TOOL,
                        tool: "select",
                        category: "geometry"
                    });
                case 8:
                case "end":
                    return A.stop()
                }
        }, I[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(14)
      , u = t(4)
      , l = t(183)
      , c = n(l)
      , s = t(3)
      , p = n(s)
      , f = t(2)
      , g = n(f)
      , I = [r].map(i.default.mark)
      , d = (0,
    g.default)("ABCya-paint:src/CNS/sagas/sketchSaga/handlers/addText.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        return i.default.wrap(function(A) {
            for (; ; )
                switch (A.prev = A.next) {
                case 0:
                    return A.next = 2,
                    (0,
                    a.call)(function() {
                        return u.sketch.await().then(function(A) {
                            return p("Deleting selection"),
                            A.doc.selection.remove(!0),
                            A.doc.render.scene()
                        }).catch(function(A) {
                            return p("Something happened while deleting a selection: %s", A)
                        })
                    });
                case 2:
                case "end":
                    return A.stop()
                }
        }, s[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(14)
      , u = t(4)
      , l = t(2)
      , c = n(l)
      , s = [r].map(i.default.mark)
      , p = (0,
    c.default)("ABCya-paint:src/CNS/sketchSaga/handlers/deleteSelection.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        var e = A.fileData;
        return i.default.wrap(function(A) {
            for (; ; )
                switch (A.prev = A.next) {
                case 0:
                    return A.next = 2,
                    (0,
                    a.call)(function() {
                        return u.sketch.await().then(function(A) {
                            p("Adding image to scene as background");
                            var t = A.doc
                              , n = t.pixelRatio;
                            A.thumbnailer(URL.createObjectURL(e), {
                                center: !0,
                                crop: "cover",
                                background: "white",
                                width: t.pixelWidth * n,
                                height: t.pixelHeight * n
                            }).then(function(A) {
                                return t.setBackground({
                                    type: "image",
                                    src: A
                                })
                            })
                        })
                    });
                case 2:
                case "end":
                    return A.stop()
                }
        }, s[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(14)
      , u = t(4)
      , l = t(2)
      , c = n(l)
      , s = [r].map(i.default.mark)
      , p = (0,
    c.default)("ABCya-paint:src/CNS/sketchSaga/handlers/importBackground.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(350);
    Object.defineProperty(e, "addPage", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(351);
    Object.defineProperty(e, "addSplat", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(352);
    Object.defineProperty(e, "addSticker", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(353);
    Object.defineProperty(e, "addText", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(354);
    Object.defineProperty(e, "deleteSelection", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(355);
    Object.defineProperty(e, "importBackground", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(357);
    Object.defineProperty(e, "newDocument", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    });
    var s = t(358);
    Object.defineProperty(e, "print", {
        enumerable: !0,
        get: function() {
            return n(s).default
        }
    });
    var p = t(359);
    Object.defineProperty(e, "redo", {
        enumerable: !0,
        get: function() {
            return n(p).default
        }
    });
    var f = t(360);
    Object.defineProperty(e, "save", {
        enumerable: !0,
        get: function() {
            return n(f).default
        }
    });
    var g = t(151);
    Object.defineProperty(e, "setTool", {
        enumerable: !0,
        get: function() {
            return n(g).default
        }
    });
    var I = t(361);
    Object.defineProperty(e, "undo", {
        enumerable: !0,
        get: function() {
            return n(I).default
        }
    });
    var d = t(362);
    Object.defineProperty(e, "updateTool", {
        enumerable: !0,
        get: function() {
            return n(d).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        return i.default.wrap(function(A) {
            for (; ; )
                switch (A.prev = A.next) {
                case 0:
                    return A.next = 2,
                    (0,
                    a.call)(c.refreshBackground);
                case 2:
                    return A.next = 4,
                    (0,
                    a.put)({
                        type: l.default.APPLICATION_INIT
                    });
                case 4:
                case "end":
                    return A.stop()
                }
        }, s[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(14)
      , u = t(3)
      , l = n(u)
      , c = t(152)
      , s = [r].map(i.default.mark)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return function() {
            var e = A.apply(this, arguments);
            return new Promise(function(A, t) {
                function n(r, o) {
                    try {
                        var i = e[r](o)
                          , a = i.value
                    } catch (A) {
                        return void t(A)
                    }
                    return i.done ? void A(a) : Promise.resolve(a).then(function(A) {
                        n("next", A)
                    }, function(A) {
                        n("throw", A)
                    })
                }
                return n("next")
            }
            )
        }
    }
    function o() {
        var A = this;
        return a.default.wrap(function(e) {
            for (; ; )
                switch (e.prev = e.next) {
                case 0:
                    return e.next = 2,
                    (0,
                    u.call)(function() {
                        return l.sketch.await().then(function() {
                            var e = r(a.default.mark(function e(t) {
                                return a.default.wrap(function(A) {
                                    for (; ; )
                                        switch (A.prev = A.next) {
                                        case 0:
                                            return A.next = 2,
                                            t.print();
                                        case 2:
                                        case "end":
                                            return A.stop()
                                        }
                                }, e, A)
                            }));
                            return function(A) {
                                return e.apply(this, arguments)
                            }
                        }())
                    });
                case 2:
                    return e.next = 4,
                    (0,
                    u.put)({
                        type: s.default.CLOSE_DIALOG
                    });
                case 4:
                case "end":
                    return e.stop()
                }
        }, p[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var i = t(9)
      , a = n(i);
    e.default = o;
    var u = t(14)
      , l = t(4)
      , c = t(3)
      , s = n(c)
      , p = [o].map(a.default.mark)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return function() {
            var e = A.apply(this, arguments);
            return new Promise(function(A, t) {
                function n(r, o) {
                    try {
                        var i = e[r](o)
                          , a = i.value
                    } catch (A) {
                        return void t(A)
                    }
                    return i.done ? void A(a) : Promise.resolve(a).then(function(A) {
                        n("next", A)
                    }, function(A) {
                        n("throw", A)
                    })
                }
                return n("next")
            }
            )
        }
    }
    function o() {
        var A, e = this;
        return a.default.wrap(function(t) {
            for (; ; )
                switch (t.prev = t.next) {
                case 0:
                    return t.next = 2,
                    (0,
                    u.call)(function() {
                        return l.sketch.await().then(function() {
                            var A = r(a.default.mark(function A(t) {
                                return a.default.wrap(function(A) {
                                    for (; ; )
                                        switch (A.prev = A.next) {
                                        case 0:
                                            if (!t.doc.history.canRedo()) {
                                                A.next = 3;
                                                break
                                            }
                                            return A.next = 3,
                                            t.doc.history.redo();
                                        case 3:
                                            return A.abrupt("return", {
                                                canUndo: t.doc.history.canUndo() > 0,
                                                canRedo: t.doc.history.canRedo() > 0
                                            });
                                        case 4:
                                        case "end":
                                            return A.stop()
                                        }
                                }, A, e)
                            }));
                            return function(e) {
                                return A.apply(this, arguments)
                            }
                        }())
                    });
                case 2:
                    return A = t.sent,
                    t.next = 5,
                    (0,
                    u.put)(Object.assign({
                        type: s.default.FINISH_REDO
                    }, A));
                case 5:
                case "end":
                    return t.stop()
                }
        }, p[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var i = t(9)
      , a = n(i);
    e.default = o;
    var u = t(14)
      , l = t(4)
      , c = t(3)
      , s = n(c)
      , p = [o].map(a.default.mark)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        var A;
        return i.default.wrap(function(e) {
            for (; ; )
                switch (e.prev = e.next) {
                case 0:
                    return e.next = 2,
                    (0,
                    a.put)({
                        type: c.default.START_WAITING,
                        tag: "save"
                    });
                case 2:
                    return e.next = 4,
                    (0,
                    a.call)(function() {
                        return u.sketch.await().then(function(A) {
                            return A.save.png({
                                as: "blob",
                                dpi: 72,
                                scale: 1,
                                background: "#fff"
                            })
                        })
                    });
                case 4:
                    return A = e.sent,
                    e.next = 7,
                    (0,
                    a.put)({
                        type: c.default.STOP_WAITING,
                        tag: "save"
                    });
                case 7:
                    return e.next = 9,
                    (0,
                    a.put)({
                        type: c.default.FINISH_SAVE,
                        imageContents: A
                    });
                case 9:
                case "end":
                    return e.stop()
                }
        }, s[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(14)
      , u = t(4)
      , l = t(3)
      , c = n(l)
      , s = [r].map(i.default.mark)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return function() {
            var e = A.apply(this, arguments);
            return new Promise(function(A, t) {
                function n(r, o) {
                    try {
                        var i = e[r](o)
                          , a = i.value
                    } catch (A) {
                        return void t(A)
                    }
                    return i.done ? void A(a) : Promise.resolve(a).then(function(A) {
                        n("next", A)
                    }, function(A) {
                        n("throw", A)
                    })
                }
                return n("next")
            }
            )
        }
    }
    function o() {
        var A, e = this;
        return a.default.wrap(function(t) {
            for (; ; )
                switch (t.prev = t.next) {
                case 0:
                    return t.next = 2,
                    (0,
                    u.call)(function() {
                        return l.sketch.await().then(function() {
                            var A = r(a.default.mark(function A(t) {
                                return a.default.wrap(function(A) {
                                    for (; ; )
                                        switch (A.prev = A.next) {
                                        case 0:
                                            if (!t.doc.history.canUndo()) {
                                                A.next = 3;
                                                break
                                            }
                                            return A.next = 3,
                                            t.doc.history.undo();
                                        case 3:
                                            return A.abrupt("return", {
                                                canUndo: t.doc.history.canUndo() > 0,
                                                canRedo: t.doc.history.canRedo() > 0
                                            });
                                        case 4:
                                        case "end":
                                            return A.stop()
                                        }
                                }, A, e)
                            }));
                            return function(e) {
                                return A.apply(this, arguments)
                            }
                        }())
                    });
                case 2:
                    return A = t.sent,
                    t.next = 5,
                    (0,
                    u.put)(Object.assign({
                        type: s.default.FINISH_UNDO
                    }, A));
                case 5:
                case "end":
                    return t.stop()
                }
        }, p[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var i = t(9)
      , a = n(i);
    e.default = o;
    var u = t(14)
      , l = t(4)
      , c = t(3)
      , s = n(c)
      , p = [o].map(a.default.mark)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        var A, e;
        return i.default.wrap(function(t) {
            for (; ; )
                switch (t.prev = t.next) {
                case 0:
                    return t.prev = 0,
                    t.next = 3,
                    (0,
                    a.select)(function(A) {
                        return A.tool
                    });
                case 3:
                    return A = t.sent,
                    e = l.default.byName(A),
                    f("Updating tool %s", A),
                    t.next = 8,
                    (0,
                    a.call)(e.updateSketch);
                case 8:
                    t.next = 13;
                    break;
                case 10:
                    t.prev = 10,
                    t.t0 = t.catch(0),
                    f(t.t0);
                case 13:
                case "end":
                    return t.stop()
                }
        }, p[0], this, [[0, 10]])
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(14)
      , u = t(10)
      , l = n(u)
      , c = t(2)
      , s = n(c)
      , p = [r].map(i.default.mark)
      , f = (0,
    s.default)("ABCya-paint:src/CNS/sketchSaga/handlers/updateTool.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function o() {
        return a.default.wrap(function(A) {
            for (; ; )
                switch (A.prev = A.next) {
                case 0:
                    return A.prev = 0,
                    A.next = 3,
                    (0,
                    c.take)(l.default.APPLICATION_INIT);
                case 3:
                    return A.next = 5,
                    (0,
                    c.put)({
                        type: l.default.START_WAITING,
                        tag: "SketchSaga"
                    });
                case 5:
                    return A.next = 7,
                    (0,
                    c.call)(g.default);
                case 7:
                    return A.next = 9,
                    (0,
                    c.put)({
                        type: l.default.SKETCH_INIT
                    });
                case 9:
                    return A.next = 11,
                    (0,
                    c.put)({
                        type: l.default.STOP_WAITING,
                        tag: "SketchSaga"
                    });
                case 11:
                    return A.next = 13,
                    (0,
                    c.take)(l.default.SKETCH_DOCUMENT_INIT);
                case 13:
                    return A.next = 15,
                    (0,
                    c.call)(d.default);
                case 15:
                    return A.next = 17,
                    (0,
                    c.call)(m.refreshBackground);
                case 17:
                    return A.next = 19,
                    (0,
                    c.put)({
                        type: l.default.FINISH_SKETCH_DOCUMENT_INIT
                    });
                case 19:
                    return A.next = 21,
                    [(0,
                    c.takeLatest)(l.default.APPLICATION_INIT, a.default.mark(function A() {
                        return a.default.wrap(function(A) {
                            for (; ; )
                                switch (A.prev = A.next) {
                                case 0:
                                    return A.next = 2,
                                    (0,
                                    c.put)({
                                        type: l.default.FINISH_SKETCH_DOCUMENT_INIT
                                    });
                                case 2:
                                case "end":
                                    return A.stop()
                                }
                        }, A, this)
                    })), (0,
                    c.takeLatest)(l.default.NEW_DOCUMENT, C.newDocument), (0,
                    c.takeLatest)(l.default.SET_TOOL, C.setTool), (0,
                    c.takeLatest)(l.default.SET_OPTION, C.updateTool), (0,
                    c.takeLatest)(l.default.SET_COLOR, C.updateTool), (0,
                    p.default)(l.default.SET_NIB_SIZE, C.updateTool, 100), (0,
                    c.takeLatest)(l.default.ADD_STICKER, C.addSticker), (0,
                    c.takeLatest)(l.default.ADD_PAGE, C.addPage), (0,
                    c.takeLatest)(l.default.ADD_TEXT, C.addText), (0,
                    c.takeLatest)(l.default.ADD_SPLAT, C.addSplat), (0,
                    c.takeLatest)(l.default.UNDO, C.undo), (0,
                    c.takeLatest)(l.default.REDO, C.redo), (0,
                    c.takeLatest)(l.default.SAVE, C.save), (0,
                    p.default)(l.default.PRINT, C.print, 500), (0,
                    c.takeEvery)(l.default.FINISH_IMPORT_BACKGROUND, C.importBackground), (0,
                    c.takeEvery)(l.default.DELETE_SELECTION, C.deleteSelection)];
                case 21:
                    A.next = 28;
                    break;
                case 23:
                    return A.prev = 23,
                    A.t0 = A.catch(0),
                    V("Something happened while on the SketchAPI saga: %s", A.t0),
                    A.next = 28,
                    (0,
                    c.put)({
                        type: l.default.FATAL_ERROR
                    });
                case 28:
                case "end":
                    return A.stop()
                }
        }, M[0], this, [[0, 23]])
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var i = t(9)
      , a = r(i);
    e.default = o;
    var u = t(3)
      , l = r(u)
      , c = t(14)
      , s = t(150)
      , p = r(s)
      , f = t(349)
      , g = r(f)
      , I = t(348)
      , d = r(I)
      , q = t(356)
      , C = n(q)
      , m = t(152)
      , y = t(2)
      , h = r(y)
      , M = [o].map(a.default.mark)
      , V = (0,
    h.default)("ABCya-paint:src/CNS/sketchSaga/index.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(365)
      , o = n(r)
      , i = t(366)
      , a = n(i);
    e.default = [o.default, a.default]
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = function() {
        return n.sketch.await().then(function(A) {
            function e(e, t) {
                var n = {};
                return n.recordTwoPoints = !0,
                n.render = function(e, n) {
                    var r = t.lineWidth || 1
                      , o = n[0]
                      , i = n[n.length - 1]
                      , a = t.bbox
                      , u = t.isCreating
                      , l = u ? a.x : -a.padding
                      , c = u ? a.y : -a.padding;
                    e.beginPath(),
                    e.moveTo(o.x, o.y),
                    e.lineTo(i.x, i.y),
                    A.style.applyStroke(e, t.stroke, t, {
                        lineCap: "round",
                        lineJoin: "round",
                        lineWidth: r,
                        x: l,
                        y: c,
                        width: a.width,
                        height: a.height,
                        scale: {
                            x: 1,
                            y: 1
                        }
                    })
                }
                ,
                Promise.resolve(n)
            }
            A.module.add(function() {
                A.tools.register({
                    type: "line",
                    extends: "basicBrush",
                    lineWidth: 1,
                    fill: {
                        enabled: !1
                    },
                    stroke: {
                        type: "color",
                        color: "red",
                        lineWidth: 30
                    }
                })
            }),
            A.tools.brush_line = e
        })
    }
    ;
    var n = t(4)
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = function() {
        return n.sketch.await().then(function(A) {
            function e(e, t) {
                var n = A.tools.brush_stamp;
                return n(e, t).then(function(A) {
                    return A.recordOnePoint = !0,
                    A
                })
            }
            A.module.add(function(e) {
                A.tools.register({
                    toolkitId: "brush",
                    type: "splat",
                    extends: "stamp",
                    stroke: {
                        color: "transparent"
                    }
                })
            }),
            A.tools.brush_splat = e
        })
    }
    ;
    var n = t(4)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return i.default.wrap(function(e) {
            for (; ; )
                switch (e.prev = e.next) {
                case 0:
                    return e.next = 2,
                    (0,
                    a.take)(A);
                case 2:
                    return q("Attaching canvas sound handler"),
                    e.next = 5,
                    (0,
                    a.call)(function() {
                        return f.MIDI.jobs.wait()
                    });
                case 5:
                    return e.next = 7,
                    (0,
                    a.call)(C.attach);
                case 7:
                case "end":
                    return e.stop()
                }
        }, d[0], this)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(14)
      , u = t(2)
      , l = n(u)
      , c = t(23)
      , s = t(95)
      , p = n(s)
      , f = t(74)
      , g = t(149)
      , I = n(g)
      , d = [r].map(i.default.mark)
      , q = (0,
    l.default)("ABCya-paint:src/CNS/sagas/soundSaga/attachCanvasSound.js")
      , C = I.default.onGesture(function(A) {
        switch (A.state) {
        case "start":
            var e = (0,
            c.activeTool)()
              , t = e.canvasSound();
            return A.env.canvasSound = t,
            q("Starting interaction"),
            void p.default.press(t);
        case "change":
            return p.default.startInteractingWith(A.env.canvasSound),
            clearTimeout(A.env.muteTimer),
            void (A.env.muteTimer = setTimeout(function() {
                return p.default.stopInteractingWith(A.env.canvasSound)
            }, 300));
        case "end":
            return q("Ending interaction"),
            clearTimeout(A.env.muteTimer),
            void p.default.release(A.env.canvasSound)
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        var A, e;
        return i.default.wrap(function(t) {
            for (; ; )
                switch (t.prev = t.next) {
                case 0:
                    return t.next = 2,
                    (0,
                    l.actionChannel)(u.default.FINISH_SKETCH_DOCUMENT_INIT);
                case 2:
                    return A = t.sent,
                    t.next = 5,
                    (0,
                    l.take)(u.default.APPLICATION_INIT);
                case 5:
                    return t.next = 7,
                    (0,
                    l.call)(I.default);
                case 7:
                    if (e = t.sent,
                    !e) {
                        t.next = 12;
                        break
                    }
                    console.log("Sound is not supported on this device"),
                    t.next = 20;
                    break;
                case 12:
                    return t.prev = 12,
                    t.next = 15,
                    [(0,
                    l.call)(C.default, A), (0,
                    l.takeEvery)([u.default.NEW_DOCUMENT, u.default.FINISH_SPLASH_SCREEN], function() {
                        return s.default.press("newDocument")
                    }), (0,
                    l.takeEvery)(u.default.SET_TOOL, function(A) {
                        if (!A.suppressSound) {
                            var e = (0,
                            d.activeTool)();
                            e && s.default.press(e.toolSound)
                        }
                    }), (0,
                    l.takeEvery)([u.default.CLOSE_EDITOR, u.default.TOGGLE_MAIN_TRAY, u.default.SET_COLOR, u.default.SET_OPTION], function() {
                        return s.default.press("click")
                    }), (0,
                    f.default)(u.default.SET_NIB_SIZE, function() {
                        return s.default.press("click")
                    }, 10), (0,
                    l.takeEvery)(u.default.UNDO, function() {
                        return s.default.press("undo")
                    }), (0,
                    l.takeEvery)(u.default.REDO, function() {
                        return s.default.press("redo")
                    }), (0,
                    l.takeEvery)([u.default.ADD_STICKER, u.default.ADD_PAGE], function() {
                        return s.default.press("stickerSlap")
                    }), (0,
                    l.takeEvery)(u.default.TOGGLE_DIALOG, function(A) {
                        s.default.press("toggleDialog")
                    }), (0,
                    l.takeEvery)(u.default.START_SOUND, function(A) {
                        return s.default.press(A.sound)
                    }), (0,
                    l.takeEvery)(u.default.STOP_SOUND, function(A) {
                        return s.default.release(A.sound)
                    })];
                case 15:
                    t.next = 20;
                    break;
                case 17:
                    t.prev = 17,
                    t.t0 = t.catch(12),
                    M("Something happened while running the sound saga. The saga will be disabled: %j", t.t0);
                case 20:
                case "end":
                    return t.stop()
                }
        }, h[0], this, [[12, 17]])
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o);
    e.default = r;
    var a = t(3)
      , u = n(a)
      , l = t(14)
      , c = t(95)
      , s = n(c)
      , p = t(150)
      , f = n(p)
      , g = t(369)
      , I = n(g)
      , d = t(23)
      , q = t(367)
      , C = n(q)
      , m = t(2)
      , y = n(m)
      , h = [r].map(i.default.mark)
      , M = (0,
    y.default)("ABCya-paint:src/CNS/sagas/soundSaga/index.js")
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return function() {
            var e = A.apply(this, arguments);
            return new Promise(function(A, t) {
                function n(r, o) {
                    try {
                        var i = e[r](o)
                          , a = i.value
                    } catch (A) {
                        return void t(A)
                    }
                    return i.done ? void A(a) : Promise.resolve(a).then(function(A) {
                        n("next", A)
                    }, function(A) {
                        n("throw", A)
                    })
                }
                return n("next")
            }
            )
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(9)
      , i = n(o)
      , a = t(74)
      , u = t(658)
      , l = n(u)
      , c = t(67)
      , s = n(c)
      , p = t(2)
      , f = n(p)
      , g = (0,
    f.default)("ABCya-paint:src/CNS/sagas/soundSaga/initMIDI.js");
    e.default = function() {
        function A() {
            return e.apply(this, arguments)
        }
        var e = r(i.default.mark(function A() {
            var e, t, n;
            return i.default.wrap(function(A) {
                for (; ; )
                    switch (A.prev = A.next) {
                    case 0:
                        for (g("initializing MIDI.js"),
                        e = Object.keys(l.default),
                        t = 0; t < e.length; t++)
                            n = e[t],
                            l.default[n].noteData = "data:audio/mpeg;base64," + l.default[n].noteData;
                        return A.next = 5,
                        a.MIDI.autoconnect();
                    case 5:
                        return a.MIDI.channels = Object.keys(l.default).length,
                        a.MIDI.onProgress = function(A, e) {
                            g("MIDI program loading: %s%%", 100 * e.toFixed(2))
                        }
                        ,
                        A.next = 9,
                        a.MIDI.programs.load({
                            programID: 0,
                            program: l.default
                        });
                    case 9:
                        return a.MIDI.volume = 127,
                        s.default.isBrowser(["iPhone", "iPad", "iPod"]) && a.MIDI.SoundModule === a.MIDI.WebAudio && a.MIDI.WebAudio.context.iOSUnlock(),
                        A.abrupt("return", a.MIDI.jobs.wait());
                    case 12:
                    case "end":
                        return A.stop()
                    }
            }, A, this)
        }));
        return A
    }()
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.AssetConverter = void 0;
    var o = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , i = t(15)
      , a = n(i)
      , u = t(3)
      , l = n(u)
      , c = t(2)
      , s = n(c)
      , p = (0,
    s.default)("ABCya-paint:src/asyncObjects/AssetConverter.js");
    e.AssetConverter = function() {
        function A(e) {
            var t = e.thumbnailFn;
            e.tag;
            r(this, A),
            this.thumbnailFn = t,
            this.jobs = []
        }
        return o(A, [{
            key: "add",
            value: function(A) {
                for (var e = Object.keys(A), t = 0; t < e.length; t++) {
                    var n = e[t]
                      , r = A[n]
                      , o = this.convertSingle(n, r);
                    this.jobs.push(o)
                }
            }
        }, {
            key: "convertSingle",
            value: function(A, e) {
                var t = this;
                return new Promise(function(n, r) {
                    t.thumbnailFn(e).then(function(e) {
                        if (0 === e.naturalWidth)
                            throw p('Asset "%s" did not have a width and height', A),
                            new Error("All assets being converted must have a width and height");
                        return e.toBlobURL()
                    }).then(function(e) {
                        p("Got a blobURL %s; packing it with its key: %s", e, A),
                        n([A, e])
                    })
                }
                )
            }
        }, {
            key: "await",
            value: function() {
                var A = this;
                return a.default.dispatch({
                    type: l.default.START_WAITING,
                    count: this.jobs.length,
                    tag: this.tag
                }),
                Promise.all(this.jobs).then(function(e) {
                    return a.default.dispatch({
                        type: l.default.STOP_WAITING,
                        count: A.jobs.length,
                        tag: A.tag
                    }),
                    e
                })
            }
        }]),
        A
    }()
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.Gesture = void 0;
    var r = t(46)
      , o = n(r)
      , i = e.Gesture = new o.default({
        displayName: "Gesture",
        isObjectAvailable: function() {
            return window.Gesture
        },
        getObject: function() {
            return window.Gesture
        }
    });
    e.default = i
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.paintRoot = void 0;
    var r = t(46)
      , o = n(r)
      , i = e.paintRoot = new o.default({
        displayName: "paintRoot",
        isObjectAvailable: function() {
            return document.querySelector(".abcya-paint")
        },
        getObject: function() {
            return document.querySelector(".abcya-paint")
        }
    });
    e.default = i
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(36)
      , i = r(o)
      , a = t(217)
      , u = r(a)
      , l = t(23)
      , c = n(l)
      , s = t(111)
      , p = r(s);
    e.default = new i.default({
        category: "fun",
        categoryIcon: u.default,
        tools: [c.pattern_brush, c.magic_brush, c.mirror_brush, c.stamp, c.splat],
        color: p.default.blue
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(36)
      , i = r(o)
      , a = t(218)
      , u = r(a)
      , l = t(23)
      , c = n(l)
      , s = t(111)
      , p = r(s);
    e.default = new i.default({
        category: "geometry",
        categoryIcon: u.default,
        tools: [c.text, c.shapes, c.stickers, c.coloring_pages, c.select],
        color: p.default.purple
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(36);
    Object.defineProperty(e, "Category", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(373);
    Object.defineProperty(e, "fun", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(374);
    Object.defineProperty(e, "geometry", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(376);
    Object.defineProperty(e, "painting", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(36)
      , i = r(o)
      , a = t(219)
      , u = r(a)
      , l = t(23)
      , c = n(l)
      , s = t(111)
      , p = r(s);
    e.default = new i.default({
        category: "painting",
        categoryIcon: u.default,
        tools: [c.solid_brush, c.translucent_brush, c.roller, c.spraycan, c.bucket, c.eraser],
        color: p.default.green
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(17)
      , a = n(i)
      , u = t(688)
      , l = n(u)
      , c = t(12)
      , s = t(48)
      , p = n(s)
      , f = t(65)
      , g = f.env.getNumber("WAITING_OVERLAY_DELAY", 150)
      , I = function() {
        return o.default.createElement(l.default, {
            wait: g
        }, o.default.createElement(a.default, {
            type: "WaitingOverlay",
            scaleFrom: .8
        }, o.default.createElement("div", {
            className: (0,
            c.classnames)("ClockContainer")
        }, o.default.createElement("div", {
            className: (0,
            c.classnames)("Clock")
        })), o.default.createElement(p.default, null)))
    };
    e.default = I
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(96)
      , a = n(i)
      , u = t(49)
      , l = t(47)
      , c = n(l)
      , s = t(12)
      , p = t(216)
      , f = n(p)
      , g = t(212)
      , I = n(g)
      , d = function(A) {
        var e = A.message
          , t = A.onYes
          , n = A.onNo;
        return o.default.createElement(a.default, {
            type: "ConfirmationDialog"
        }, o.default.createElement("div", {
            className: (0,
            s.classnames)("MessageContainer")
        }, o.default.createElement(c.default, {
            text: e
        })), o.default.createElement(u.DialogRegion, {
            onClick: n
        }, o.default.createElement(u.DecorativeRegion, {
            iconURL: I.default
        }), o.default.createElement(c.default, {
            text: "NO",
            verticalOffset: "1.5em"
        })), o.default.createElement(u.DialogRegion, {
            onClick: t
        }, o.default.createElement(u.DecorativeRegion, {
            iconURL: f.default
        }), o.default.createElement(c.default, {
            text: "YES",
            verticalOffset: "1.5em"
        })))
    };
    e.default = d
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(96)
      , a = n(i)
      , u = t(49)
      , l = t(47)
      , c = n(l)
      , s = t(211)
      , p = n(s)
      , f = t(214)
      , g = n(f)
      , I = t(213)
      , d = n(I)
      , q = t(209)
      , C = n(q)
      , m = t(215)
      , y = n(m)
      , h = function(A) {
        var e = A.newDocument
          , t = A.save
          , n = A.print
          , r = A.importBackground
          , i = A.watchTutorial;
        return o.default.createElement(a.default, {
            type: "MainMenuDialog"
        }, o.default.createElement(u.DialogRegion, {
            onClick: e
        }, o.default.createElement(u.DecorativeRegion, {
            iconURL: p.default
        }), o.default.createElement(c.default, {
            text: "NEW",
            verticalOffset: "1.5em"
        })), o.default.createElement(u.DialogRegion, {
            onClick: t
        }, o.default.createElement(u.DecorativeRegion, {
            iconURL: g.default
        }), o.default.createElement(c.default, {
            text: "SAVE",
            verticalOffset: "1.5em"
        })), o.default.createElement(u.DialogRegion, {
            onClick: n
        }, o.default.createElement(u.DecorativeRegion, {
            iconURL: d.default
        }), o.default.createElement(c.default, {
            text: "PRINT",
            verticalOffset: "1.5em"
        })), o.default.createElement(u.DialogRegion, {
            onClick: r,
            type: "SmallText"
        }, o.default.createElement(u.DecorativeRegion, {
            iconURL: C.default
        }), o.default.createElement(c.default, {
            text: ["IMPORT", "BACKGROUND"],
            verticalOffset: "2em"
        })), o.default.createElement(u.DialogRegion, {
            onClick: i,
            type: "SmallText"
        }, o.default.createElement(u.DecorativeRegion, {
            iconURL: y.default
        }), o.default.createElement(c.default, {
            text: ["WATCH", "TUTORIAL"],
            verticalOffset: "2em"
        })))
    };
    e.default = h
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(20)
      , a = n(i)
      , u = t(47)
      , l = n(u)
      , c = t(208)
      , s = n(c)
      , p = function(A) {
        return o.default.createElement(a.default, Object.assign({
            type: "DeleteButton",
            iconURL: s.default
        }, A), o.default.createElement(l.default, {
            text: "DELETE",
            verticalOffset: "2em"
        }))
    };
    e.default = p
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(33)
      , s = t(295)
      , p = n(s)
      , f = t(51)
      , g = n(f)
      , I = t(225)
      , d = n(I)
      , q = t(226)
      , C = n(q)
      , m = t(50)
      , y = n(m)
      , h = .8
      , M = 1
      , V = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                var A = this.props.iconURL;
                return l.default.createElement(p.default, {
                    component: !1,
                    appear: {
                        scale: h
                    },
                    enter: {
                        scale: (0,
                        c.spring)(M, c.presets.wobbly)
                    },
                    leave: {
                        scale: (0,
                        c.spring)(h, c.presets.wobbly)
                    }
                }, l.default.createElement("div", {
                    key: "NibCover",
                    className: (0,
                    g.default)("NibCover"),
                    style: {
                        backgroundImage: "url(" + A + ")"
                    }
                }, " "))
            }
        }]),
        e
    }(u.PureComponent)
      , E = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                var A = this.props.isActive
                  , e = (0,
                g.default)("NibCover", {
                    "NibCover--active": A
                })
                  , t = {
                    backgroundImage: "url(" + (A ? d.default : C.default) + ")"
                };
                return l.default.createElement("div", {
                    className: e,
                    style: t
                }, " ")
            }
        }]),
        e
    }(u.PureComponent)
      , S = function(A) {
        var e = A.isActive
          , t = A.flexForce
          , n = A.nibSize
          , r = void 0;
        return r = y.default ? e ? l.default.createElement(V, {
            key: "active",
            iconURL: d.default
        }) : l.default.createElement(V, {
            key: "default",
            iconURL: C.default
        }) : l.default.createElement(E, {
            isActive: e
        }),
        l.default.createElement("div", {
            className: (0,
            g.default)("Nib"),
            style: {
                flexGrow: t
            },
            "data-is-nib": !0,
            "data-nib-size": n
        }, r)
    };
    e.default = S
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(158);
    Object.defineProperty(e, "NibSize", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(159);
    Object.keys(o).forEach(function(A) {
        "default" !== A && "__esModule" !== A && Object.defineProperty(e, A, {
            enumerable: !0,
            get: function() {
                return o[A]
            }
        })
    });
    var i = t(157);
    Object.defineProperty(e, "ColorPicker", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(155);
    Object.defineProperty(e, "MainArea", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(47);
    Object.defineProperty(e, "TextArea", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(37);
    Object.defineProperty(e, "UIElement", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(48);
    Object.defineProperty(e, "VerticalSpace", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(377);
    Object.defineProperty(e, "WaitingOverlay", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(98);
    Object.defineProperty(e, "dialogs", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(382);
    Object.defineProperty(e, "editors", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    });
    var s = t(163);
    Object.defineProperty(e, "layers", {
        enumerable: !0,
        get: function() {
            return n(s).default
        }
    });
    var p = t(384);
    Object.defineProperty(e, "panes", {
        enumerable: !0,
        get: function() {
            return n(p).default
        }
    });
    var f = t(49);
    Object.defineProperty(e, "regions", {
        enumerable: !0,
        get: function() {
            return n(f).default
        }
    });
    var g = t(387);
    Object.defineProperty(e, "screens", {
        enumerable: !0,
        get: function() {
            return n(g).default
        }
    });
    var I = t(388);
    Object.defineProperty(e, "trays", {
        enumerable: !0,
        get: function() {
            return n(I).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(164);
    Object.defineProperty(e, "CategoryPane", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(165);
    Object.defineProperty(e, "EditorPane", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(99);
    Object.defineProperty(e, "Pane", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(1)
      , i = n(o)
      , a = t(20)
      , u = n(a)
      , l = function(A) {
        var e = A.type
          , t = (A.isRectangle,
        A.children)
          , n = r(A, ["type", "isRectangle", "children"]);
        return i.default.createElement(u.default, Object.assign({
            type: [e, "DialogRegion"]
        }, n), t)
    };
    e.default = l
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(63)
      , a = n(i)
      , u = t(222)
      , l = n(u)
      , c = function() {
        return o.default.createElement(a.default, {
            type: "empty-slot",
            iconURL: l.default
        })
    };
    e.default = c
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(169);
    Object.defineProperty(e, "ErrorScreen", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(170);
    Object.defineProperty(e, "SplashScreen", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(171);
    Object.defineProperty(e, "HistoryTray", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(172);
    Object.defineProperty(e, "MainTray", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(101);
    Object.defineProperty(e, "Tray", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(6)
      , s = t(36)
      , p = n(s)
      , f = t(2)
      , g = n(f)
      , I = t(51)
      , d = n(I)
      , q = (0,
    g.default)("ABCya-paint:src/containers/FakePane.js")
      , C = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                return l.default.createElement("div", {
                    className: (0,
                    d.default)("AreaElement"),
                    style: {
                        transformOrigin: "bottom center",
                        transform: "scale3d(1, " + (this.props.isOpen ? 1 : 0) + ", 1)"
                    }
                }, this.props.children)
            }
        }]),
        e
    }(u.PureComponent)
      , m = function(A) {
        function e(A) {
            r(this, e);
            var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                fakePane: null
            },
            t
        }
        return i(e, A),
        a(e, [{
            key: "componentDidMount",
            value: function() {
                this.updateFakePane(this.props.category)
            }
        }, {
            key: "componentWillReceiveProps",
            value: function(A) {
                var e = A.category;
                this.props.category !== e && this.updateFakePane(e)
            }
        }, {
            key: "updateFakePane",
            value: function(A) {
                if (A)
                    try {
                        var e = p.default.byName(A)
                          , t = e.Pane;
                        this.setState({
                            fakePane: l.default.createElement(t, null)
                        })
                    } catch (A) {
                        q(A)
                    }
            }
        }, {
            key: "render",
            value: function() {
                this._renderStart = window.performance.now();
                var A = this.props
                  , e = A.isMainTrayOpen
                  , t = A.isEditorOpen;
                return l.default.createElement(C, {
                    isOpen: !e && !t
                }, this.state.fakePane)
            }
        }, {
            key: "componentDidUpdate",
            value: function() {
                q("Rendering took %sms", window.performance.now() - this._renderStart)
            }
        }]),
        e
    }(u.PureComponent);
    e.default = (0,
    c.connect)(function(A) {
        var e = A.isMainTrayOpen
          , t = A.isEditorOpen
          , n = A.category;
        return {
            isMainTrayOpen: e,
            isEditorOpen: t,
            category: n
        }
    })(m)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(3)
      , i = n(o)
      , a = t(166)
      , u = n(a);
    e.default = (0,
    r.connect)(null, function(A) {
        return {
            onClick: function() {
                A({
                    type: i.default.TOGGLE_DIALOG,
                    dialog: "MainMenu"
                })
            }
        }
    })(u.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(6)
      , s = t(3)
      , p = n(s)
      , f = t(260)
      , g = n(f)
      , I = t(383)
      , d = t(409)
      , q = n(d)
      , C = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "componentDidMount",
            value: function() {
                this.props.initApplication()
            }
        }, {
            key: "render",
            value: function() {
                return l.default.createElement("div", {
                    id: g.default,
                    className: "abcya-paint"
                }, l.default.createElement(I.VerticalSpace, {
                    regions: 7.5
                }), l.default.createElement(q.default, null), this.props.isWaiting && l.default.createElement(I.WaitingOverlay, null))
            }
        }]),
        e
    }(u.Component);
    e.default = (0,
    c.connect)(function(A) {
        var e = A.isWaiting;
        return {
            isWaiting: e
        }
    }, function(A) {
        return {
            initApplication: function() {
                A({
                    type: p.default.APPLICATION_INIT
                })
            }
        }
    })(C)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(3)
      , i = n(o)
      , a = t(168)
      , u = n(a);
    e.default = (0,
    r.connect)(function(A) {
        var e = A.isMainTrayOpen;
        return {
            isOpen: e
        }
    }, function(A) {
        return {
            onClick: function() {
                A({
                    type: i.default.TOGGLE_MAIN_TRAY
                })
            }
        }
    })(u.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(3)
      , i = n(o)
      , a = t(156)
      , u = n(a);
    e.default = (0,
    r.connect)(null, function(A) {
        return {
            onPick: function(e) {
                A({
                    type: i.default.SET_COLOR,
                    color: e
                }),
                A({
                    type: i.default.CLOSE_DIALOG
                })
            }
        }
    })(u.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(3)
      , i = n(o)
      , a = t(98);
    e.default = (0,
    r.connect)(null, function(A) {
        return {
            onYes: function() {
                A({
                    type: i.default.NEW_DOCUMENT
                })
            },
            onNo: function() {
                A({
                    type: i.default.CLOSE_DIALOG
                })
            }
        }
    }, function(A, e, t) {
        return Object.assign({}, e, t, {
            message: "Erase and start over?"
        })
    })(a.ConfirmationDialog)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(3)
      , i = n(o)
      , a = t(98)
      , u = t(2)
      , l = n(u)
      , c = (0,
    l.default)("ABCya-paint:src/containers/dialogs/MainMenu.js")
      , s = "https://youtu.be/bllO9Kx0MCI"
      , p = "ABCya-paint, learn it!"
      , f = "width=1024,height=768,centerscreen,menubar=off,toolbar=off";
    e.default = (0,
    r.connect)(null, function(A) {
        return {
            newDocument: function() {
                A({
                    type: i.default.TOGGLE_DIALOG,
                    dialog: "ConfirmNewDocument"
                })
            },
            save: function() {
                A({
                    type: i.default.SAVE
                })
            },
            print: function() {
                A({
                    type: i.default.PRINT
                })
            },
            importBackground: function() {
                A({
                    type: i.default.IMPORT_BACKGROUND
                });
                var e = document.createElement("input");
                e.setAttribute("type", "file"),
                e.addEventListener("change", function(t) {
                    return e.files.length ? (c("Importing background image"),
                    void A({
                        type: i.default.FINISH_IMPORT_BACKGROUND,
                        fileData: e.files[0]
                    })) : (c("No background image was chosen"),
                    void A({
                        type: i.default.FINISH_IMPORT_BACKGROUND
                    }))
                }),
                e.click()
            },
            watchTutorial: function() {
                A({
                    type: i.default.WATCH_TUTORIAL
                }),
                window.open(s, p, f)
            }
        }
    })(a.MainMenuDialog)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function o(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var i = t(1)
      , a = r(i)
      , u = t(6)
      , l = t(97)
      , c = t(3)
      , s = r(c)
      , p = t(70)
      , f = r(p)
      , g = t(179)
      , I = n(g)
      , d = t(37)
      , q = r(d)
      , C = {
        backgroundImage: "url(" + f.default + ")"
    }
      , m = function(A) {
        var e = A.pickPage
          , t = o(A, ["pickPage"]);
        return a.default.createElement(l.PaginatedDialog, Object.assign({}, t, {
            tailPosition: "6_of_10",
            tailStyle: C,
            selectItem: e
        }), Object.keys(I).map(function(A) {
            return a.default.createElement(q.default, {
                type: "Page",
                key: A,
                itemID: A,
                src: I[A]
            })
        }))
    }
      , y = "PagePicker";
    e.default = (0,
    u.connect)(function(A) {
        return {
            page: A[y]
        }
    }, function(A) {
        return {
            setPage: function(e) {
                A({
                    type: s.default.SET_PAGE,
                    dialog: y,
                    page: e
                })
            },
            pickPage: function(e) {
                A({
                    type: s.default.ADD_PAGE,
                    coloring_page: e
                }),
                A({
                    type: s.default.CLOSE_DIALOG
                })
            }
        }
    })(m)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function o(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var i = t(1)
      , a = r(i)
      , u = t(6)
      , l = t(97)
      , c = t(3)
      , s = r(c)
      , p = t(70)
      , f = r(p)
      , g = t(107)
      , I = n(g)
      , d = t(37)
      , q = r(d)
      , C = {
        backgroundImage: "url(" + f.default + ")"
    }
      , m = function(A) {
        var e = A.pickSticker
          , t = o(A, ["pickSticker"]);
        return a.default.createElement(l.PaginatedDialog, Object.assign({}, t, {
            tailPosition: "5_of_10",
            tailStyle: C,
            selectItem: e
        }), Object.keys(I).map(function(A) {
            return a.default.createElement(q.default, {
                type: "Sticker",
                key: A,
                itemID: A,
                src: I[A]
            })
        }))
    };
    e.default = (0,
    u.connect)(function(A) {
        var e = A.StickerPicker;
        return {
            page: e
        }
    }, function(A) {
        return {
            setPage: function(e) {
                A({
                    type: s.default.SET_PAGE,
                    dialog: "StickerPicker",
                    page: e
                })
            },
            pickSticker: function(e) {
                A({
                    type: s.default.ADD_STICKER,
                    sticker: e
                }),
                A({
                    type: s.default.CLOSE_DIALOG
                })
            }
        }
    })(m)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(173);
    Object.defineProperty(e, "ActiveDialog", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(393);
    Object.defineProperty(e, "ColorPicker", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(394);
    Object.defineProperty(e, "ConfirmNewDocument", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(395);
    Object.defineProperty(e, "MainMenu", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(396);
    Object.defineProperty(e, "PagePicker", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(397);
    Object.defineProperty(e, "StickerPicker", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(6)
      , s = t(10)
      , p = n(s)
      , f = t(2)
      , g = n(f)
      , I = (0,
    g.default)("ABCya-paint:src/containers/editors/ActiveEditor.js")
      , d = function(A) {
        function e(A) {
            r(this, e);
            var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                activeEditor: null
            },
            t
        }
        return i(e, A),
        a(e, [{
            key: "componentDidMount",
            value: function() {
                this.updateEditor(this.props.tool)
            }
        }, {
            key: "componentWillReceiveProps",
            value: function(A) {
                var e = A.tool;
                this.props.tool !== e && this.updateEditor(e)
            }
        }, {
            key: "updateEditor",
            value: function(A) {
                if (A)
                    try {
                        var e = p.default.byName(A);
                        if (e.Editor) {
                            var t = e.Editor;
                            this.setState({
                                activeEditor: l.default.createElement(t, {
                                    key: "Editor"
                                })
                            })
                        }
                    } catch (A) {
                        I(A)
                    }
            }
        }, {
            key: "render",
            value: function() {
                this._renderStart = window.performance.now();
                var A = this.props
                  , e = A.isMainTrayOpen
                  , t = A.isEditorOpen
                  , n = !e && t ? 1 : 0;
                return l.default.createElement("div", {
                    style: {
                        transformOrigin: "bottom center",
                        transform: "scale3d(1, " + n + ", 1)"
                    }
                }, this.state.activeEditor)
            }
        }, {
            key: "componentDidUpdate",
            value: function() {
                I("Rendering took %sms", window.performance.now() - this._renderStart)
            }
        }]),
        e
    }(u.PureComponent);
    e.default = (0,
    c.connect)(function(A) {
        var e = A.tool
          , t = A.isMainTrayOpen
          , n = A.isEditorOpen;
        return {
            tool: e,
            isMainTrayOpen: t,
            isEditorOpen: n
        }
    })(d)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(3)
      , i = n(o)
      , a = t(380)
      , u = n(a);
    e.default = (0,
    r.connect)(null, function(A) {
        return {
            onClick: function() {
                A({
                    type: i.default.DELETE_SELECTION
                })
            }
        }
    })(u.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(3)
      , i = n(o)
      , a = t(158)
      , u = n(a);
    e.default = (0,
    r.connect)(function(A) {
        var e = A.nibSize;
        return {
            activeNibSize: e
        }
    }, function(A) {
        return {
            setNibSize: function(e) {
                A({
                    type: i.default.SET_NIB_SIZE,
                    nibSize: e
                })
            }
        }
    })(u.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var o = t(6)
      , i = t(3)
      , a = r(i)
      , u = t(106)
      , l = r(u)
      , c = t(20)
      , s = r(c)
      , p = t(415)
      , f = n(p);
    e.default = (0,
    o.connect)(null, function(A, e) {
        var t = e.tool
          , n = e.option;
        return {
            onClick: function() {
                A({
                    type: a.default.SET_OPTION,
                    tool: t,
                    option: n
                })
            }
        }
    }, function(A, e, t) {
        var n = (t.isActive,
        t.option);
        return Object.assign({}, e, {
            type: (0,
            l.default)("Option"),
            iconURL: f[n]
        })
    })(s.default)
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(6)
      , r = t(159);
    e.default = (0,
    n.connect)(function(A, e) {
        var t = e.tool;
        return {
            activeOption: A[t + "_option"]
        }
    })(r.OptionsContainer)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(104)
      , a = n(i)
      , u = t(400)
      , l = n(u)
      , c = t(103)
      , s = n(c)
      , p = t(248)
      , f = n(p)
      , g = function() {
        return o.default.createElement(a.default, {
            editorIcon: f.default,
            category: "geometry"
        }, o.default.createElement(l.default, null), o.default.createElement(s.default, null))
    };
    e.default = g
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(6)
      , s = t(66)
      , p = n(s)
      , f = t(17)
      , g = n(f)
      , I = t(48)
      , d = n(I)
      , q = t(51)
      , C = n(q)
      , m = t(4)
      , y = t(2)
      , h = n(y)
      , M = (0,
    h.default)("ABCya-paint:src/containers/layers/CaptureLayer.js")
      , V = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "componentDidMount",
            value: function() {
                var A = this;
                m.Gesture.await().then(function(e) {
                    M("Input will be captured and sent to the active tool"),
                    A.ghandle = e.on(A.refs.CaptureArea, "drag", function(A) {
                        var e = (0,
                        p.default)();
                        return e ? void e.handleInputEvent(A) : void M("Input was captured, but there is not a tool to send it to. This event was dropped on the floor: %j", A)
                    }, !0)
                })
            }
        }, {
            key: "componentWillUnmount",
            value: function() {
                this.ghandle && this.ghandle.detach()
            }
        }, {
            key: "render",
            value: function() {
                return l.default.createElement(g.default, {
                    type: "CaptureLayer"
                }, l.default.createElement("div", {
                    className: (0,
                    C.default)("CaptureArea"),
                    ref: "CaptureArea"
                }), l.default.createElement(d.default, null))
            }
        }]),
        e
    }(u.Component);
    e.default = (0,
    c.connect)()(V)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(182)
      , i = n(o)
      , a = t(66)
      , u = n(a)
      , l = t(62)
      , c = n(l);
    e.default = (0,
    r.connect)(function(A) {
        var e = (A.tool,
        A.cursorHeight)
          , t = i.default.cursorAttributes()
          , n = (0,
        u.default)();
        return n && "cursorAttributes"in n && Object.assign(t, {
            dipOnGestureStart: !1,
            shouldRotate: !0
        }, n.cursorAttributes(), {
            height: e
        }),
        t
    })(c.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(160)
      , i = n(o)
      , a = t(3)
      , u = n(a);
    e.default = (0,
    r.connect)(null, function(A) {
        return {
            handleText: function(e) {
                A({
                    type: u.default.ADD_TEXT,
                    text: e
                })
            }
        }
    })(i.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(162)
      , i = n(o);
    e.default = (0,
    r.connect)(function(A) {
        var e = A.tooltip
          , t = A.tooltipAnchorX
          , n = A.tooltipAnchorY;
        return {
            tooltip: e,
            anchor: {
                x: t,
                y: n
            }
        }
    })(i.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(6)
      , s = t(169)
      , p = n(s)
      , f = t(412)
      , g = n(f)
      , I = t(410)
      , d = n(I)
      , q = t(411)
      , C = n(q)
      , m = function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "render",
            value: function() {
                switch (this.props.screen) {
                case "ERROR_SCREEN":
                    return l.default.createElement(p.default, null);
                case "SPLASH_SCREEN":
                    return l.default.createElement(g.default, null);
                case "DEBUG_SCREEN":
                    return l.default.createElement(C.default, null);
                default:
                    return l.default.createElement(d.default, null)
                }
            }
        }]),
        e
    }(u.PureComponent);
    e.default = (0,
    c.connect)(function(A) {
        var e = A.screen
          , t = A.showUI;
        return {
            screen: e,
            showUI: t
        }
    })(m)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(6)
      , s = t(175)
      , p = n(s)
      , f = t(10)
      , g = n(f)
      , I = t(17)
      , d = n(I)
      , q = t(174)
      , C = n(q)
      , m = t(406)
      , y = n(m)
      , h = t(405)
      , M = n(h)
      , V = t(408)
      , E = n(V)
      , S = t(161)
      , k = n(S)
      , b = t(413)
      , v = n(b)
      , R = t(414)
      , U = n(R)
      , G = t(392)
      , Q = n(G)
      , Z = t(390)
      , O = n(Z)
      , j = t(173)
      , B = n(j)
      , w = t(407)
      , Y = n(w)
      , T = t(399)
      , D = n(T)
      , K = t(375)
      , N = t(389)
      , J = n(N)
      , W = t(155)
      , z = n(W)
      , x = t(2)
      , L = n(x)
      , F = (0,
    L.default)("ABCya-paint:src/containers/screens/AppScreen.js")
      , P = function(A) {
        function e(A) {
            r(this, e);
            var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                captureInput: !1
            },
            t
        }
        return i(e, A),
        a(e, [{
            key: "componentDidMount",
            value: function() {
                this.updateToolInfo(this.props.tool)
            }
        }, {
            key: "componentWillReceiveProps",
            value: function(A) {
                this.updateToolInfo(A.tool)
            }
        }, {
            key: "updateToolInfo",
            value: function(A) {
                var e = !1;
                try {
                    var t = g.default.byName(A);
                    e = t.capturesInput()
                } catch (A) {}
                F("Using tool: %j", A),
                F("Capturing input: %s", e ? "YES" : "NO"),
                this.state.captureInput !== e && this.setState({
                    captureInput: e
                })
            }
        }, {
            key: "renderUI",
            value: function() {
                var A = this.state.captureInput
                  , e = this.props.isKeyboardOpen;
                return [p.default && l.default.createElement(y.default, {
                    key: "CursorLayer"
                }), A && l.default.createElement(M.default, {
                    key: "CaptureLayer"
                }), l.default.createElement(k.default, {
                    key: "ToolbarLayer"
                }, l.default.createElement(v.default, {
                    key: "HistoryTray"
                }), l.default.createElement(z.default, null, l.default.createElement(U.default, null, l.default.createElement(K.painting.Pane, {
                    key: "painting"
                }), l.default.createElement(K.fun.Pane, {
                    key: "fun"
                }), l.default.createElement(K.geometry.Pane, {
                    key: "geometry"
                })), l.default.createElement(J.default, {
                    key: "FakePane"
                }), l.default.createElement(D.default, {
                    key: "ActiveEditor"
                }), l.default.createElement(Q.default, {
                    key: "TrayToggle"
                })), l.default.createElement(O.default, {
                    key: "MenuRegion"
                })), l.default.createElement(E.default, {
                    key: "TooltipLayer"
                }), l.default.createElement(B.default, {
                    key: "ActiveDialog"
                }), e && l.default.createElement(Y.default, {
                    key: "KeyboardLayer"
                })]
            }
        }, {
            key: "render",
            value: function() {
                return l.default.createElement(d.default, {
                    type: "ApplicationLayer"
                }, l.default.createElement(C.default, null), this.props.showUI && this.renderUI())
            }
        }]),
        e
    }(u.PureComponent);
    e.default = (0,
    c.connect)(function(A) {
        var e = A.showUI
          , t = A.isKeyboardOpen
          , n = A.tool;
        return {
            showUI: e,
            isKeyboardOpen: t,
            tool: n
        }
    })(P)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = t(1)
      , c = n(l)
      , s = (t(6),
    t(4))
      , p = t(12)
      , f = t(163)
      , g = t(174)
      , I = n(g)
      , d = function(A) {
        function e(A) {
            r(this, e);
            var t = o(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.state = {
                pairs: []
            },
            s.toolAssets.await().then(function(A) {
                for (var e = Object.keys(A), n = [], r = 0; r < e.length; r++) {
                    var o = e[r]
                      , i = A[o];
                    n.push([o, i])
                }
                t.setState({
                    pairs: n
                })
            }),
            t
        }
        return i(e, A),
        u(e, [{
            key: "render",
            value: function() {
                var A = this.state.pairs;
                return c.default.createElement(f.Layer, {
                    type: "DebugScreen"
                }, c.default.createElement(I.default, null), c.default.createElement(f.Layer, null, c.default.createElement("h1", null, "DEBUG"), c.default.createElement("div", {
                    className: (0,
                    p.classnames)("ToolAssetContainer")
                }, A.map(function(A) {
                    var e = a(A, 2)
                      , t = e[0]
                      , n = e[1];
                    return c.default.createElement("img", {
                        className: (0,
                        p.classnames)("ToolAsset"),
                        src: n,
                        key: t
                    })
                }))))
            }
        }]),
        e
    }(l.Component);
    e.default = d
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(3)
      , i = n(o)
      , a = t(170)
      , u = n(a);
    e.default = (0,
    r.connect)(null, function(A) {
        return {
            transitionToMainScreen: function() {
                A({
                    type: i.default.FINISH_SPLASH_SCREEN
                })
            }
        }
    })(u.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(3)
      , i = n(o)
      , a = t(171)
      , u = n(a);
    e.default = (0,
    r.connect)(function(A) {
        var e = A.canUndo
          , t = A.isHistoryTrayOpen;
        return {
            canUndo: e,
            isOpen: t
        }
    }, function(A) {
        return {
            onUndo: function() {
                A({
                    type: i.default.UNDO
                })
            },
            onRedo: function() {
                A({
                    type: i.default.REDO
                })
            }
        }
    })(u.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(6)
      , o = t(172)
      , i = n(o);
    e.default = (0,
    r.connect)(function(A) {
        var e = A.isMainTrayOpen;
        return {
            isMainTrayOpen: e
        }
    })(i.default)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(188);
    Object.defineProperty(e, "active_option", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(189);
    Object.defineProperty(e, "brush_bucket", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(190);
    Object.defineProperty(e, "brush_bucket_editor", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(191);
    Object.defineProperty(e, "brush_eraser", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(192);
    Object.defineProperty(e, "brush_eraser_editor", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(193);
    Object.defineProperty(e, "brush_magic", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(194);
    Object.defineProperty(e, "brush_magic_editor", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    });
    var s = t(195);
    Object.defineProperty(e, "brush_mirror", {
        enumerable: !0,
        get: function() {
            return n(s).default
        }
    });
    var p = t(196);
    Object.defineProperty(e, "brush_mirror_editor", {
        enumerable: !0,
        get: function() {
            return n(p).default
        }
    });
    var f = t(197);
    Object.defineProperty(e, "brush_pattern", {
        enumerable: !0,
        get: function() {
            return n(f).default
        }
    });
    var g = t(198);
    Object.defineProperty(e, "brush_pattern_editor", {
        enumerable: !0,
        get: function() {
            return n(g).default
        }
    });
    var I = t(199);
    Object.defineProperty(e, "brush_roller", {
        enumerable: !0,
        get: function() {
            return n(I).default
        }
    });
    var d = t(200);
    Object.defineProperty(e, "brush_roller_editor", {
        enumerable: !0,
        get: function() {
            return n(d).default
        }
    });
    var q = t(201);
    Object.defineProperty(e, "brush_solid", {
        enumerable: !0,
        get: function() {
            return n(q).default
        }
    });
    var C = t(202);
    Object.defineProperty(e, "brush_solid_editor", {
        enumerable: !0,
        get: function() {
            return n(C).default
        }
    });
    var m = t(203);
    Object.defineProperty(e, "brush_spraycan", {
        enumerable: !0,
        get: function() {
            return n(m).default
        }
    });
    var y = t(204);
    Object.defineProperty(e, "brush_spraycan_editor", {
        enumerable: !0,
        get: function() {
            return n(y).default
        }
    });
    var h = t(205);
    Object.defineProperty(e, "brush_translucent", {
        enumerable: !0,
        get: function() {
            return n(h).default
        }
    });
    var M = t(206);
    Object.defineProperty(e, "brush_translucent_editor", {
        enumerable: !0,
        get: function() {
            return n(M).default
        }
    });
    var V = t(207);
    Object.defineProperty(e, "button_back", {
        enumerable: !0,
        get: function() {
            return n(V).default
        }
    });
    var E = t(208);
    Object.defineProperty(e, "button_delete", {
        enumerable: !0,
        get: function() {
            return n(E).default
        }
    });
    var S = t(209);
    Object.defineProperty(e, "button_import_background", {
        enumerable: !0,
        get: function() {
            return n(S).default
        }
    });
    var k = t(210);
    Object.defineProperty(e, "button_menu", {
        enumerable: !0,
        get: function() {
            return n(k).default
        }
    });
    var b = t(211);
    Object.defineProperty(e, "button_new", {
        enumerable: !0,
        get: function() {
            return n(b).default
        }
    });
    var v = t(212);
    Object.defineProperty(e, "button_no", {
        enumerable: !0,
        get: function() {
            return n(v).default
        }
    });
    var R = t(213);
    Object.defineProperty(e, "button_print", {
        enumerable: !0,
        get: function() {
            return n(R).default
        }
    });
    var U = t(214);
    Object.defineProperty(e, "button_save", {
        enumerable: !0,
        get: function() {
            return n(U).default
        }
    });
    var G = t(215);
    Object.defineProperty(e, "button_watch", {
        enumerable: !0,
        get: function() {
            return n(G).default
        }
    });
    var Q = t(216);
    Object.defineProperty(e, "button_yes", {
        enumerable: !0,
        get: function() {
            return n(Q).default
        }
    });
    var Z = t(217);
    Object.defineProperty(e, "category_fun", {
        enumerable: !0,
        get: function() {
            return n(Z).default
        }
    });
    var O = t(218);
    Object.defineProperty(e, "category_geometry", {
        enumerable: !0,
        get: function() {
            return n(O).default
        }
    });
    var j = t(219);
    Object.defineProperty(e, "category_painting", {
        enumerable: !0,
        get: function() {
            return n(j).default
        }
    });
    var B = t(220);
    Object.defineProperty(e, "color_picker", {
        enumerable: !0,
        get: function() {
            return n(B).default
        }
    });
    var w = t(459);
    Object.defineProperty(e, "dialog_5_of_10", {
        enumerable: !0,
        get: function() {
            return n(w).default
        }
    });
    var Y = t(460);
    Object.defineProperty(e, "dialog_6_of_10", {
        enumerable: !0,
        get: function() {
            return n(Y).default
        }
    });
    var T = t(461);
    Object.defineProperty(e, "dialog_8_of_10", {
        enumerable: !0,
        get: function() {
            return n(T).default
        }
    });
    var D = t(462);
    Object.defineProperty(e, "dialog_menu", {
        enumerable: !0,
        get: function() {
            return n(D).default
        }
    });
    var K = t(463);
    Object.defineProperty(e, "dialog_region", {
        enumerable: !0,
        get: function() {
            return n(K).default
        }
    });
    var N = t(464);
    Object.defineProperty(e, "dialog_region_rectangle", {
        enumerable: !0,
        get: function() {
            return n(N).default
        }
    });
    var J = t(465);
    Object.defineProperty(e, "dialog_region_square", {
        enumerable: !0,
        get: function() {
            return n(J).default
        }
    });
    var W = t(70);
    Object.defineProperty(e, "dialog_tail", {
        enumerable: !0,
        get: function() {
            return n(W).default
        }
    });
    var z = t(221);
    Object.defineProperty(e, "dialog_tail_right", {
        enumerable: !0,
        get: function() {
            return n(z).default
        }
    });
    var x = t(222);
    Object.defineProperty(e, "empty_slot", {
        enumerable: !0,
        get: function() {
            return n(x).default
        }
    });
    var L = t(223);
    Object.defineProperty(e, "main_tray_down", {
        enumerable: !0,
        get: function() {
            return n(L).default
        }
    });
    var F = t(224);
    Object.defineProperty(e, "main_tray_up", {
        enumerable: !0,
        get: function() {
            return n(F).default
        }
    });
    var P = t(225);
    Object.defineProperty(e, "nib_active", {
        enumerable: !0,
        get: function() {
            return n(P).default
        }
    });
    var X = t(226);
    Object.defineProperty(e, "nib_default", {
        enumerable: !0,
        get: function() {
            return n(X).default
        }
    });
    var H = t(466);
    Object.defineProperty(e, "option_empty_slot", {
        enumerable: !0,
        get: function() {
            return n(H).default
        }
    });
    var _ = t(467);
    Object.defineProperty(e, "option_pattern_bricks", {
        enumerable: !0,
        get: function() {
            return n(_).default
        }
    });
    var $ = t(468);
    Object.defineProperty(e, "option_pattern_footsteps", {
        enumerable: !0,
        get: function() {
            return n($).default
        }
    });
    var AA = t(469);
    Object.defineProperty(e, "option_pattern_pawprints", {
        enumerable: !0,
        get: function() {
            return n(AA).default
        }
    });
    var eA = t(470);
    Object.defineProperty(e, "option_pattern_rainbow", {
        enumerable: !0,
        get: function() {
            return n(eA).default
        }
    });
    var tA = t(471);
    Object.defineProperty(e, "option_pattern_road", {
        enumerable: !0,
        get: function() {
            return n(tA).default
        }
    });
    var nA = t(472);
    Object.defineProperty(e, "option_pattern_tracks", {
        enumerable: !0,
        get: function() {
            return n(nA).default
        }
    });
    var rA = t(473);
    Object.defineProperty(e, "option_pattern_water", {
        enumerable: !0,
        get: function() {
            return n(rA).default
        }
    });
    var oA = t(474);
    Object.defineProperty(e, "option_shape_circle", {
        enumerable: !0,
        get: function() {
            return n(oA).default
        }
    });
    var iA = t(475);
    Object.defineProperty(e, "option_shape_heart", {
        enumerable: !0,
        get: function() {
            return n(iA).default
        }
    });
    var aA = t(476);
    Object.defineProperty(e, "option_shape_line", {
        enumerable: !0,
        get: function() {
            return n(aA).default
        }
    });
    var uA = t(477);
    Object.defineProperty(e, "option_shape_square", {
        enumerable: !0,
        get: function() {
            return n(uA).default
        }
    });
    var lA = t(478);
    Object.defineProperty(e, "option_shape_star", {
        enumerable: !0,
        get: function() {
            return n(lA).default
        }
    });
    var cA = t(479);
    Object.defineProperty(e, "option_shape_triangle", {
        enumerable: !0,
        get: function() {
            return n(cA).default
        }
    });
    var sA = t(480);
    Object.defineProperty(e, "option_splat_1", {
        enumerable: !0,
        get: function() {
            return n(sA).default
        }
    });
    var pA = t(481);
    Object.defineProperty(e, "option_splat_2", {
        enumerable: !0,
        get: function() {
            return n(pA).default
        }
    });
    var fA = t(482);
    Object.defineProperty(e, "option_spraycan_circle", {
        enumerable: !0,
        get: function() {
            return n(fA).default
        }
    });
    var gA = t(483);
    Object.defineProperty(e, "option_spraycan_flower", {
        enumerable: !0,
        get: function() {
            return n(gA).default
        }
    });
    var IA = t(484);
    Object.defineProperty(e, "option_spraycan_heart", {
        enumerable: !0,
        get: function() {
            return n(IA).default
        }
    });
    var dA = t(485);
    Object.defineProperty(e, "option_spraycan_leaf", {
        enumerable: !0,
        get: function() {
            return n(dA).default
        }
    });
    var qA = t(486);
    Object.defineProperty(e, "option_spraycan_snowflake", {
        enumerable: !0,
        get: function() {
            return n(qA).default
        }
    });
    var CA = t(487);
    Object.defineProperty(e, "option_spraycan_star", {
        enumerable: !0,
        get: function() {
            return n(CA).default
        }
    });
    var mA = t(488);
    Object.defineProperty(e, "option_stamp_balloons", {
        enumerable: !0,
        get: function() {
            return n(mA).default
        }
    });
    var yA = t(489);
    Object.defineProperty(e, "option_stamp_beans", {
        enumerable: !0,
        get: function() {
            return n(yA).default
        }
    });
    var hA = t(490);
    Object.defineProperty(e, "option_stamp_bubbles", {
        enumerable: !0,
        get: function() {
            return n(hA).default
        }
    });
    var MA = t(491);
    Object.defineProperty(e, "option_stamp_coins", {
        enumerable: !0,
        get: function() {
            return n(MA).default
        }
    });
    var VA = t(492);
    Object.defineProperty(e, "option_stamp_flowers", {
        enumerable: !0,
        get: function() {
            return n(VA).default
        }
    });
    var EA = t(493);
    Object.defineProperty(e, "option_stamp_hands", {
        enumerable: !0,
        get: function() {
            return n(EA).default
        }
    });
    var SA = t(494);
    Object.defineProperty(e, "option_stamp_stars", {
        enumerable: !0,
        get: function() {
            return n(SA).default
        }
    });
    var kA = t(495);
    Object.defineProperty(e, "option_text_1", {
        enumerable: !0,
        get: function() {
            return n(kA).default
        }
    });
    var bA = t(496);
    Object.defineProperty(e, "option_text_2", {
        enumerable: !0,
        get: function() {
            return n(bA).default
        }
    });
    var vA = t(497);
    Object.defineProperty(e, "option_text_3", {
        enumerable: !0,
        get: function() {
            return n(vA).default
        }
    });
    var RA = t(498);
    Object.defineProperty(e, "option_text_4", {
        enumerable: !0,
        get: function() {
            return n(RA).default
        }
    });
    var UA = t(499);
    Object.defineProperty(e, "option_text_5", {
        enumerable: !0,
        get: function() {
            return n(UA).default
        }
    });
    var GA = t(500);
    Object.defineProperty(e, "page_indicator", {
        enumerable: !0,
        get: function() {
            return n(GA).default
        }
    });
    var QA = t(227);
    Object.defineProperty(e, "page_indicator_active", {
        enumerable: !0,
        get: function() {
            return n(QA).default
        }
    });
    var ZA = t(228);
    Object.defineProperty(e, "page_indicator_inactive", {
        enumerable: !0,
        get: function() {
            return n(ZA).default
        }
    });
    var OA = t(229);
    Object.defineProperty(e, "page_next", {
        enumerable: !0,
        get: function() {
            return n(OA).default
        }
    });
    var jA = t(230);
    Object.defineProperty(e, "page_previous", {
        enumerable: !0,
        get: function() {
            return n(jA).default
        }
    });
    var BA = t(231);
    Object.defineProperty(e, "pointer_brush_bucket", {
        enumerable: !0,
        get: function() {
            return n(BA).default
        }
    });
    var wA = t(232);
    Object.defineProperty(e, "pointer_brush_eraser", {
        enumerable: !0,
        get: function() {
            return n(wA).default
        }
    });
    var YA = t(233);
    Object.defineProperty(e, "pointer_brush_magic", {
        enumerable: !0,
        get: function() {
            return n(YA).default
        }
    });
    var TA = t(234);
    Object.defineProperty(e, "pointer_brush_mirror", {
        enumerable: !0,
        get: function() {
            return n(TA).default
        }
    });
    var DA = t(235);
    Object.defineProperty(e, "pointer_brush_pattern", {
        enumerable: !0,
        get: function() {
            return n(DA).default
        }
    });
    var KA = t(236);
    Object.defineProperty(e, "pointer_brush_roller", {
        enumerable: !0,
        get: function() {
            return n(KA).default
        }
    });
    var NA = t(237);
    Object.defineProperty(e, "pointer_brush_solid", {
        enumerable: !0,
        get: function() {
            return n(NA).default
        }
    });
    var JA = t(238);
    Object.defineProperty(e, "pointer_brush_spraycan", {
        enumerable: !0,
        get: function() {
            return n(JA).default
        }
    });
    var WA = t(239);
    Object.defineProperty(e, "pointer_brush_translucent", {
        enumerable: !0,
        get: function() {
            return n(WA).default
        }
    });
    var zA = t(501);
    Object.defineProperty(e, "pointer_tool_coloring_pages", {
        enumerable: !0,
        get: function() {
            return n(zA).default
        }
    });
    var xA = t(502);
    Object.defineProperty(e, "pointer_tool_crosshair", {
        enumerable: !0,
        get: function() {
            return n(xA).default
        }
    });
    var LA = t(71);
    Object.defineProperty(e, "pointer_tool_select", {
        enumerable: !0,
        get: function() {
            return n(LA).default
        }
    });
    var FA = t(240);
    Object.defineProperty(e, "pointer_tool_shapes", {
        enumerable: !0,
        get: function() {
            return n(FA).default
        }
    });
    var PA = t(241);
    Object.defineProperty(e, "pointer_tool_splat", {
        enumerable: !0,
        get: function() {
            return n(PA).default
        }
    });
    var XA = t(242);
    Object.defineProperty(e, "pointer_tool_stamp", {
        enumerable: !0,
        get: function() {
            return n(XA).default
        }
    });
    var HA = t(503);
    Object.defineProperty(e, "pointer_tool_stickers", {
        enumerable: !0,
        get: function() {
            return n(HA).default
        }
    });
    var _A = t(243);
    Object.defineProperty(e, "pointer_tool_text", {
        enumerable: !0,
        get: function() {
            return n(_A).default
        }
    });
    var $A = t(244);
    Object.defineProperty(e, "redo", {
        enumerable: !0,
        get: function() {
            return n($A).default
        }
    });
    var Ae = t(245);
    Object.defineProperty(e, "tail_tooltip", {
        enumerable: !0,
        get: function() {
            return n(Ae).default
        }
    });
    var ee = t(246);
    Object.defineProperty(e, "tool_coloring_pages", {
        enumerable: !0,
        get: function() {
            return n(ee).default
        }
    });
    var te = t(247);
    Object.defineProperty(e, "tool_select", {
        enumerable: !0,
        get: function() {
            return n(te).default
        }
    });
    var ne = t(248);
    Object.defineProperty(e, "tool_select_editor", {
        enumerable: !0,
        get: function() {
            return n(ne).default
        }
    });
    var re = t(249);
    Object.defineProperty(e, "tool_shapes", {
        enumerable: !0,
        get: function() {
            return n(re).default
        }
    });
    var oe = t(250);
    Object.defineProperty(e, "tool_shapes_editor", {
        enumerable: !0,
        get: function() {
            return n(oe).default
        }
    });
    var ie = t(251);
    Object.defineProperty(e, "tool_splat", {
        enumerable: !0,
        get: function() {
            return n(ie).default
        }
    });
    var ae = t(252);
    Object.defineProperty(e, "tool_splat_editor", {
        enumerable: !0,
        get: function() {
            return n(ae).default
        }
    });
    var ue = t(253);
    Object.defineProperty(e, "tool_stamp", {
        enumerable: !0,
        get: function() {
            return n(ue).default
        }
    });
    var le = t(254);
    Object.defineProperty(e, "tool_stamp_editor", {
        enumerable: !0,
        get: function() {
            return n(le).default
        }
    });
    var ce = t(255);
    Object.defineProperty(e, "tool_stickers", {
        enumerable: !0,
        get: function() {
            return n(ce).default
        }
    });
    var se = t(256);
    Object.defineProperty(e, "tool_text", {
        enumerable: !0,
        get: function() {
            return n(se).default
        }
    });
    var pe = t(257);
    Object.defineProperty(e, "tool_text_editor", {
        enumerable: !0,
        get: function() {
            return n(pe).default
        }
    });
    var fe = t(258);
    Object.defineProperty(e, "undo", {
        enumerable: !0,
        get: function() {
            return n(fe).default
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(31);
    Object.defineProperty(e, "feature", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(175);
    Object.defineProperty(e, "useCursors", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(50);
    Object.defineProperty(e, "useFancyAnimations", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(105);
    Object.defineProperty(e, "useOSK", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(176);
    Object.defineProperty(e, "usePerfMiddleware", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(177);
    Object.defineProperty(e, "useReduxLogger", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(178);
    Object.defineProperty(e, "useWhyDidYouUpdate", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    })
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = !1
          , t = new Promise(function(t, n) {
            A.then(function(A) {
                return e ? n({
                    isCanceled: !0
                }) : t(A)
            }),
            A.catch(function(A) {
                return n(e ? {
                    isCanceled: !0
                } : A)
            })
        }
        );
        return {
            promise: t,
            cancel: function() {
                e = !0
            }
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = t
}
, function(A, e) {
    "use strict";
    function t(A) {
        if (Array.isArray(A)) {
            for (var e = 0, t = Array(A.length); e < A.length; e++)
                t[e] = A[e];
            return t
        }
        return Array.from(A)
    }
    function n(A, e, n) {
        for (var r = [], o = A.length; o < e; o += 1)
            r.push(n(o));
        return [].concat(t(A), r)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = n
}
, function(A, e) {
    "use strict";
    function t(A, e) {
        for (var t = [], n = 0; n < A.length; n++)
            n % e === 0 && t.push([]),
            t[t.length - 1].push(A[n]);
        return t
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = t
}
, function(A, e) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = function(A, e) {
        return (A % e + e) % e
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return a("Stopping event: %o", A),
        A.preventDefault(),
        A.stopPropagation(),
        !1
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = r;
    var o = t(2)
      , i = n(o)
      , a = (0,
    i.default)("ABCya-paint:stop-event")
}
, function(A, e) {
    "use strict";
    function t(A, e) {
        var t = A.x
          , n = A.y;
        return t >= e.left && t <= e.right && n >= e.top && n <= e.bottom
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    var r = t(1)
      , o = n(r)
      , i = t(75)
      , a = n(i)
      , u = t(6)
      , l = t(147)
      , c = t(391)
      , s = n(c);
    t(446),
    t(441);
    var p = t(178)
      , f = n(p)
      , g = t(811);
    f.default && (0,
    g.whyDidYouUpdate)(o.default),
    a.default.render(o.default.createElement(u.Provider, {
        store: l.store
    }, o.default.createElement(s.default, null)), document.getElementById("root")),
    window.addEventListener("touchmove", function(A) {
        return A.preventDefault()
    }),
    window.addEventListener("contextmenu", function(A) {
        return A.preventDefault()
    }),
    localStorage.debug && document.querySelector(".abcya-paint").setAttribute("mode", "debugging");
    var I = "%PUBLIC_URL%/sketch/min/sketch-api.min.js";
    if (I) {
        I = I.replace("%PUBLIC_URL%", ".");
        var d = document.createElement("script");
        d.setAttribute("src", I),
        d.setAttribute("async", "async"),
        document.head.appendChild(d)
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(602);
    Object.defineProperty(e, "option_pattern_bricks", {
        enumerable: !0,
        get: function() {
            return n(r).default
        }
    });
    var o = t(603);
    Object.defineProperty(e, "option_pattern_footsteps", {
        enumerable: !0,
        get: function() {
            return n(o).default
        }
    });
    var i = t(604);
    Object.defineProperty(e, "option_pattern_pawprints", {
        enumerable: !0,
        get: function() {
            return n(i).default
        }
    });
    var a = t(605);
    Object.defineProperty(e, "option_pattern_rainbow", {
        enumerable: !0,
        get: function() {
            return n(a).default
        }
    });
    var u = t(606);
    Object.defineProperty(e, "option_pattern_road", {
        enumerable: !0,
        get: function() {
            return n(u).default
        }
    });
    var l = t(607);
    Object.defineProperty(e, "option_pattern_tracks", {
        enumerable: !0,
        get: function() {
            return n(l).default
        }
    });
    var c = t(608);
    Object.defineProperty(e, "option_pattern_water", {
        enumerable: !0,
        get: function() {
            return n(c).default
        }
    });
    var s = t(609);
    Object.defineProperty(e, "option_spraycan_circle", {
        enumerable: !0,
        get: function() {
            return n(s).default
        }
    });
    var p = t(610);
    Object.defineProperty(e, "option_spraycan_flower", {
        enumerable: !0,
        get: function() {
            return n(p).default
        }
    });
    var f = t(611);
    Object.defineProperty(e, "option_spraycan_heart", {
        enumerable: !0,
        get: function() {
            return n(f).default
        }
    });
    var g = t(612);
    Object.defineProperty(e, "option_spraycan_leaf", {
        enumerable: !0,
        get: function() {
            return n(g).default
        }
    });
    var I = t(613);
    Object.defineProperty(e, "option_spraycan_snowflake", {
        enumerable: !0,
        get: function() {
            return n(I).default
        }
    });
    var d = t(614);
    Object.defineProperty(e, "option_spraycan_star", {
        enumerable: !0,
        get: function() {
            return n(d).default
        }
    });
    var q = t(615);
    Object.defineProperty(e, "option_translucent_brush", {
        enumerable: !0,
        get: function() {
            return n(q).default
        }
    });
    var C = t(616);
    Object.defineProperty(e, "stamp_balloon_1", {
        enumerable: !0,
        get: function() {
            return n(C).default
        }
    });
    var m = t(617);
    Object.defineProperty(e, "stamp_balloon_2", {
        enumerable: !0,
        get: function() {
            return n(m).default
        }
    });
    var y = t(618);
    Object.defineProperty(e, "stamp_balloon_3", {
        enumerable: !0,
        get: function() {
            return n(y).default
        }
    });
    var h = t(619);
    Object.defineProperty(e, "stamp_balloon_4", {
        enumerable: !0,
        get: function() {
            return n(h).default
        }
    });
    var M = t(620);
    Object.defineProperty(e, "stamp_balloon_5", {
        enumerable: !0,
        get: function() {
            return n(M).default
        }
    });
    var V = t(621);
    Object.defineProperty(e, "stamp_balloon_6", {
        enumerable: !0,
        get: function() {
            return n(V).default
        }
    });
    var E = t(622);
    Object.defineProperty(e, "stamp_bean_1", {
        enumerable: !0,
        get: function() {
            return n(E).default
        }
    });
    var S = t(623);
    Object.defineProperty(e, "stamp_bean_2", {
        enumerable: !0,
        get: function() {
            return n(S).default
        }
    });
    var k = t(624);
    Object.defineProperty(e, "stamp_bean_3", {
        enumerable: !0,
        get: function() {
            return n(k).default
        }
    });
    var b = t(625);
    Object.defineProperty(e, "stamp_bean_4", {
        enumerable: !0,
        get: function() {
            return n(b).default
        }
    });
    var v = t(626);
    Object.defineProperty(e, "stamp_bean_5", {
        enumerable: !0,
        get: function() {
            return n(v).default
        }
    });
    var R = t(627);
    Object.defineProperty(e, "stamp_bean_6", {
        enumerable: !0,
        get: function() {
            return n(R).default
        }
    });
    var U = t(628);
    Object.defineProperty(e, "stamp_bubble_1", {
        enumerable: !0,
        get: function() {
            return n(U).default
        }
    });
    var G = t(629);
    Object.defineProperty(e, "stamp_bubble_2", {
        enumerable: !0,
        get: function() {
            return n(G).default
        }
    });
    var Q = t(630);
    Object.defineProperty(e, "stamp_bubble_3", {
        enumerable: !0,
        get: function() {
            return n(Q).default
        }
    });
    var Z = t(631);
    Object.defineProperty(e, "stamp_coin_1", {
        enumerable: !0,
        get: function() {
            return n(Z).default
        }
    });
    var O = t(632);
    Object.defineProperty(e, "stamp_coin_2", {
        enumerable: !0,
        get: function() {
            return n(O).default
        }
    });
    var j = t(633);
    Object.defineProperty(e, "stamp_coin_3", {
        enumerable: !0,
        get: function() {
            return n(j).default
        }
    });
    var B = t(634);
    Object.defineProperty(e, "stamp_coin_4", {
        enumerable: !0,
        get: function() {
            return n(B).default
        }
    });
    var w = t(635);
    Object.defineProperty(e, "stamp_flower_1", {
        enumerable: !0,
        get: function() {
            return n(w).default
        }
    });
    var Y = t(636);
    Object.defineProperty(e, "stamp_flower_2", {
        enumerable: !0,
        get: function() {
            return n(Y).default
        }
    });
    var T = t(637);
    Object.defineProperty(e, "stamp_flower_3", {
        enumerable: !0,
        get: function() {
            return n(T).default
        }
    });
    var D = t(638);
    Object.defineProperty(e, "stamp_flower_4", {
        enumerable: !0,
        get: function() {
            return n(D).default
        }
    });
    var K = t(639);
    Object.defineProperty(e, "stamp_hand_1", {
        enumerable: !0,
        get: function() {
            return n(K).default
        }
    });
    var N = t(640);
    Object.defineProperty(e, "stamp_hand_2", {
        enumerable: !0,
        get: function() {
            return n(N).default
        }
    });
    var J = t(641);
    Object.defineProperty(e, "stamp_hand_3", {
        enumerable: !0,
        get: function() {
            return n(J).default
        }
    });
    var W = t(642);
    Object.defineProperty(e, "stamp_hand_4", {
        enumerable: !0,
        get: function() {
            return n(W).default
        }
    });
    var z = t(643);
    Object.defineProperty(e, "stamp_hand_5", {
        enumerable: !0,
        get: function() {
            return n(z).default
        }
    });
    var x = t(644);
    Object.defineProperty(e, "stamp_hand_6", {
        enumerable: !0,
        get: function() {
            return n(x).default
        }
    });
    var L = t(645);
    Object.defineProperty(e, "stamp_splat_1", {
        enumerable: !0,
        get: function() {
            return n(L).default
        }
    });
    var F = t(646);
    Object.defineProperty(e, "stamp_splat_2", {
        enumerable: !0,
        get: function() {
            return n(F).default
        }
    });
    var P = t(647);
    Object.defineProperty(e, "stamp_star_1", {
        enumerable: !0,
        get: function() {
            return n(P).default
        }
    });
    var X = t(648);
    Object.defineProperty(e, "stamp_star_2", {
        enumerable: !0,
        get: function() {
            return n(X).default
        }
    });
    var H = t(649);
    Object.defineProperty(e, "stamp_star_3", {
        enumerable: !0,
        get: function() {
            return n(H).default
        }
    });
    var _ = t(650);
    Object.defineProperty(e, "stamp_star_4", {
        enumerable: !0,
        get: function() {
            return n(_).default
        }
    });
    var $ = t(651);
    Object.defineProperty(e, "stamp_star_5", {
        enumerable: !0,
        get: function() {
            return n($).default
        }
    });
    var AA = t(652);
    Object.defineProperty(e, "stamp_star_6", {
        enumerable: !0,
        get: function() {
            return n(AA).default
        }
    })
}
, function(A, e) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = {
        onExpansionComplete: function() {},
        expansionInterval: null,
        iterations: 0
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = function A(e, t, n) {
        null === e && (e = Function.prototype);
        var r = Object.getOwnPropertyDescriptor(e, t);
        if (void 0 === r) {
            var o = Object.getPrototypeOf(e);
            return null === o ? void 0 : A(o, t, n)
        }
        if ("value"in r)
            return r.value;
        var i = r.get;
        if (void 0 !== i)
            return i.call(n)
    }
      , c = t(1)
      , s = n(c)
      , p = t(4)
      , f = t(15)
      , g = n(f)
      , I = t(10)
      , d = n(I)
      , q = t(30)
      , C = n(q)
      , m = t(189)
      , y = n(m)
      , h = t(190)
      , M = n(h)
      , V = t(231)
      , E = n(V);
    e.default = new (function(A) {
        function e() {
            return o(this, e),
            i(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return a(e, A),
        u(e, [{
            key: "updateSketch",
            value: function() {
                return p.sketch.await().then(function(A) {
                    var e = g.default.getState()
                      , t = e.color;
                    A.config("floodfill", {
                        fill: t,
                        tolerance: 45
                    })
                }).then(l(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), "updateSketch", this))
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: E.default,
                    shouldRotate: !1,
                    dipOnGestureStart: !0,
                    height: 100
                }
            }
        }, {
            key: "soundButtons",
            value: function() {
                return r({}, this.tool, {
                    note: "A2"
                })
            }
        }]),
        e
    }(d.default))({
        tool: "bucket",
        tooltip: "Paint Bucket",
        sketchTool: "floodfill",
        toolIcon: y.default,
        Editor: function() {
            return s.default.createElement(C.default, {
                editorIcon: M.default,
                category: "painting",
                showNibSize: !1
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(10)
      , s = n(c)
      , p = t(246)
      , f = n(p)
      , g = t(71)
      , I = n(g)
      , d = t(6)
      , q = t(102)
      , C = n(q)
      , m = (0,
    d.connect)(function(A) {
        var e = A.dialog;
        return {
            isActive: "PagePicker" === e,
            tool: "coloring_pages",
            tooltip: "Coloring Pages",
            iconURL: f.default
        }
    })(C.default);
    e.default = new (function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "use",
            value: function() {}
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: I.default,
                    shouldRotate: !1,
                    height: 50
                }
            }
        }, {
            key: "updateSketch",
            value: function() {}
        }, {
            key: "ToolButton",
            value: function(A) {
                return l.default.createElement(m, A)
            }
        }]),
        e
    }(s.default))({
        tool: "coloring_pages",
        toolIcon: f.default,
        toolSound: "toggleDialog"
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function o(A) {
        var e = 0;
        for (var t in a)
            if (Object.hasOwnProperty.call(a, t)) {
                var n = a[t];
                n instanceof l.default && A(n, e),
                e += 1
            }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = o;
    var i = t(23)
      , a = r(i)
      , u = t(10)
      , l = n(u)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = t(1)
      , c = n(l)
      , s = t(4)
      , p = t(15)
      , f = n(p)
      , g = t(10)
      , I = n(g)
      , d = t(30)
      , q = n(d)
      , C = t(191)
      , m = n(C)
      , y = t(192)
      , h = n(y)
      , M = t(232)
      , V = n(M);
    e.default = new (function(A) {
        function e() {
            return o(this, e),
            i(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return a(e, A),
        u(e, [{
            key: "updateSketch",
            value: function() {
                return s.sketch.await().then(function(A) {
                    var e = f.default.getState()
                      , t = e.nibSize;
                    A.config("pencil", {
                        globalized: "no",
                        blend: ["erase"],
                        fill: {
                            enabled: !1
                        },
                        stroke: {
                            type: "color",
                            color: "#fff",
                            opacity: 1
                        },
                        diameter: t
                    })
                })
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                var A = f.default.getState()
                  , e = A.nibSize;
                return {
                    pointerImage: V.default,
                    height: e
                }
            }
        }, {
            key: "soundButtons",
            value: function() {
                return r({}, this.tool, {
                    note: "D1",
                    requiresInteraction: !0
                })
            }
        }]),
        e
    }(I.default))({
        tool: "eraser",
        tooltip: "Eraser",
        sketchTool: "pencil",
        toolIcon: m.default,
        Editor: function() {
            return c.default.createElement(q.default, {
                editorIcon: h.default,
                category: "painting",
                showColorPicker: !1
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(4)
      , s = t(15)
      , p = n(s)
      , f = t(10)
      , g = n(f)
      , I = t(30)
      , d = n(I)
      , q = t(193)
      , C = n(q)
      , m = t(194)
      , y = n(m)
      , h = t(233)
      , M = n(h);
    e.default = new (function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "updateSketch",
            value: function() {
                return c.sketch.await().then(function(A) {
                    var e = p.default.getState()
                      , t = e.color
                      , n = e.nibSize;
                    A.config("magicBrush", {
                        fill: {
                            enabled: !1
                        },
                        stroke: {
                            type: "color",
                            color: t
                        },
                        tolerance: 70,
                        diameter: n,
                        contiguous: !0
                    })
                })
            }
        }, {
            key: "canvasSound",
            value: function() {
                return "brushStroke"
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: M.default,
                    height: 22
                }
            }
        }]),
        e
    }(g.default))({
        tool: "magic_brush",
        tooltip: "Magic Coloring Brush",
        sketchTool: "magicBrush",
        toolIcon: C.default,
        Editor: function() {
            return l.default.createElement(d.default, {
                editorIcon: y.default,
                category: "fun"
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(4)
      , s = t(15)
      , p = n(s)
      , f = t(10)
      , g = n(f)
      , I = t(195)
      , d = n(I)
      , q = t(196)
      , C = n(q)
      , m = t(234)
      , y = n(m)
      , h = t(30)
      , M = n(h);
    e.default = new (function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        a(e, [{
            key: "updateSketch",
            value: function() {
                var A = this;
                return c.sketch.await().then(function(e) {
                    var t = p.default.getState()
                      , n = t.color
                      , r = t.nibSize;
                    e.config(A.sketchTool, {
                        fill: {
                            enabled: !1
                        },
                        stroke: {
                            type: "color",
                            color: n
                        },
                        diameter: r,
                        sides: 2,
                        showControls: "never",
                        mirrorInSector: !0
                    })
                })
            }
        }, {
            key: "canvasSound",
            value: function() {
                return "brushStroke"
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: y.default,
                    height: 22
                }
            }
        }]),
        e
    }(g.default))({
        tool: "mirror_brush",
        tooltip: "Mirror Brush",
        sketchTool: "mirrorBrush",
        toolIcon: d.default,
        Editor: function() {
            return l.default.createElement(M.default, {
                editorIcon: C.default,
                category: "fun"
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = function A(e, t, n) {
        null === e && (e = Function.prototype);
        var r = Object.getOwnPropertyDescriptor(e, t);
        if (void 0 === r) {
            var o = Object.getPrototypeOf(e);
            return null === o ? void 0 : A(o, t, n)
        }
        if ("value"in r)
            return r.value;
        var i = r.get;
        if (void 0 !== i)
            return i.call(n)
    }
      , c = t(1)
      , s = n(c)
      , p = t(4)
      , f = t(15)
      , g = n(f)
      , I = t(10)
      , d = n(I)
      , q = t(197)
      , C = n(q)
      , m = t(198)
      , y = n(m)
      , h = t(235)
      , M = n(h)
      , V = t(38)
      , E = n(V)
      , S = ["option_pattern_rainbow", "option_pattern_road", "option_pattern_tracks", "option_pattern_footsteps", "option_pattern_pawprints", "option_pattern_bricks", "option_pattern_water"]
      , k = 40;
    e.default = new (function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        u(e, [{
            key: "updateSketch",
            value: function() {
                return p.AsyncObject.waitFor(p.sketch, p.toolAssets).then(function(A) {
                    var e = a(A, 2)
                      , t = e[0]
                      , n = e[1]
                      , r = g.default.getState()
                      , o = r.pattern_brush_option;
                    t.config("tileBrush", {
                        fill: {
                            enabled: !1
                        },
                        stroke: {
                            type: "pattern",
                            pattern: {
                                src: n[o]
                            }
                        },
                        diameter: k - 6,
                        tileMode: "repeat"
                    })
                }).then(l(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), "updateSketch", this))
            }
        }, {
            key: "canvasSound",
            value: function() {
                return "brushStroke"
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: M.default,
                    height: k
                }
            }
        }]),
        e
    }(d.default))({
        tool: "pattern_brush",
        tooltip: "Pattern Brush",
        sketchTool: "tileBrush",
        toolIcon: C.default,
        Editor: function() {
            return s.default.createElement(E.default, {
                tool: "pattern_brush",
                options: S,
                editorIcon: y.default,
                category: "fun",
                showColorPicker: !1
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = t(1)
      , c = n(l)
      , s = t(180)
      , p = n(s)
      , f = t(30)
      , g = n(f)
      , I = t(808)
      , d = n(I)
      , q = t(199)
      , C = n(q)
      , m = t(200)
      , y = n(m)
      , h = t(236)
      , M = n(h)
      , V = 75;
    e.default = new (function(A) {
        function e() {
            return o(this, e),
            i(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return a(e, A),
        u(e, [{
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: M.default,
                    height: V
                }
            }
        }, {
            key: "soundButtons",
            value: function() {
                return r({}, this.tool, {
                    note: "B3",
                    requiresInteraction: !0,
                    maxSimultaneous: 1
                })
            }
        }, {
            key: "getNibSize",
            value: function() {
                return V - 6
            }
        }]),
        e
    }(p.default))({
        tool: "roller",
        tooltip: "Paint Roller",
        sketchTool: "tileBrush",
        toolIcon: C.default,
        textureURL: d.default,
        Editor: function() {
            return c.default.createElement(g.default, {
                category: "painting",
                editorIcon: y.default,
                showNibSize: !1
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = function A(e, t, n) {
        null === e && (e = Function.prototype);
        var r = Object.getOwnPropertyDescriptor(e, t);
        if (void 0 === r) {
            var o = Object.getPrototypeOf(e);
            return null === o ? void 0 : A(o, t, n)
        }
        if ("value"in r)
            return r.value;
        var i = r.get;
        if (void 0 !== i)
            return i.call(n)
    }
      , c = t(1)
      , s = n(c)
      , p = t(4)
      , f = t(15)
      , g = n(f)
      , I = t(10)
      , d = n(I)
      , q = t(52)
      , C = n(q)
      , m = t(249)
      , y = n(m)
      , h = t(250)
      , M = n(h)
      , V = t(240)
      , E = n(V)
      , S = t(38)
      , k = n(S)
      , b = new C.default({
        data: {
            option_shape_circle: "circle",
            option_shape_heart: "heart",
            option_shape_line: "line",
            option_shape_square: "square",
            option_shape_star: "star",
            option_shape_triangle: "triangle"
        },
        defaultValue: "circle"
    })
      , v = ["option_shape_circle", "option_shape_heart", "option_shape_line", "option_shape_square", "option_shape_star", "option_shape_triangle"];
    e.default = new (function(A) {
        function e() {
            return o(this, e),
            i(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return a(e, A),
        u(e, [{
            key: "use",
            value: function() {
                this.updateSketch()
            }
        }, {
            key: "updateSketch",
            value: function() {
                return p.sketch.await().then(function(A) {
                    var e = g.default.getState()
                      , t = e.color
                      , n = e.shapes_option
                      , r = b.get(n);
                    switch (A.exec(r),
                    r) {
                    case "line":
                        A.config(r, {
                            fill: {
                                enabled: !1
                            },
                            stroke: {
                                type: "color",
                                color: t
                            },
                            lineWidth: 10
                        });
                        break;
                    default:
                        A.config(r, {
                            fill: {
                                type: "color",
                                color: t
                            },
                            stroke: "transparent"
                        })
                    }
                }).then(l(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), "updateSketch", this))
            }
        }, {
            key: "soundButtons",
            value: function() {
                return r({}, this.tool, {
                    note: "C2",
                    requiresInteraction: !0
                })
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: E.default,
                    shouldRotate: !1,
                    height: 50
                }
            }
        }]),
        e
    }(d.default))({
        tool: "shapes",
        tooltip: "Shape Tool",
        toolIcon: y.default,
        Editor: function() {
            return s.default.createElement(k.default, {
                tool: "shapes",
                category: "geometry",
                options: v,
                editorIcon: M.default
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(108)
      , a = n(i)
      , u = t(30)
      , l = n(u)
      , c = t(201)
      , s = n(c)
      , p = t(202)
      , f = n(p)
      , g = t(237)
      , I = n(g);
    e.default = new a.default({
        tool: "solid_brush",
        tooltip: "Paintbrush",
        toolIcon: s.default,
        pointerImage: I.default,
        Editor: function() {
            return o.default.createElement(l.default, {
                category: "painting",
                editorIcon: f.default
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        return function() {
            var e = A.apply(this, arguments);
            return new Promise(function(A, t) {
                function n(r, o) {
                    try {
                        var i = e[r](o)
                          , a = i.value
                    } catch (A) {
                        return void t(A)
                    }
                    return i.done ? void A(a) : Promise.resolve(a).then(function(A) {
                        n("next", A)
                    }, function(A) {
                        n("throw", A)
                    })
                }
                return n("next")
            }
            )
        }
    }
    function o(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function i(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function a(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function u(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.Splat = void 0;
    var l = t(9)
      , c = n(l)
      , s = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , p = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , f = t(1)
      , g = n(f)
      , I = t(15)
      , d = n(I)
      , q = t(3)
      , C = n(q)
      , m = t(4)
      , y = t(10)
      , h = n(y)
      , M = t(52)
      , V = n(M)
      , E = t(65)
      , S = t(251)
      , k = n(S)
      , b = t(252)
      , v = n(b)
      , R = t(241)
      , U = n(R)
      , G = t(38)
      , Q = n(G)
      , Z = new V.default({
        data: {
            option_splat_1: "stamp_splat_1",
            option_splat_2: "stamp_splat_2"
        },
        defaultValue: "stamp_splat_1"
    });
    Z.getKeys = function() {
        return Object.keys(this.toHash())
    }
    ;
    var O = E.env.getNumber("EXPANSION_AMOUNT", 20)
      , j = [600, 1400, 1800, 2600, 3400, 4e3]
      , B = e.Splat = function(A) {
        function e(A) {
            i(this, e);
            var t = a(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            return t.expansionEvent = null,
            t.iterations = 0,
            t
        }
        return u(e, A),
        p(e, null, [{
            key: "assetFor",
            value: function(A) {
                return m.toolAssets.await().then(function(e) {
                    return e[Z.get(A)]
                })
            }
        }]),
        p(e, [{
            key: "use",
            value: function() {}
        }, {
            key: "soundButtons",
            value: function() {
                return o({
                    balloon: {
                        note: "C4"
                    }
                }, this.tool, {
                    note: "A1"
                })
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: U.default,
                    height: 50,
                    shouldRotate: !1
                }
            }
        }, {
            key: "capturesInput",
            value: function() {
                return !0
            }
        }, {
            key: "handleInputEvent",
            value: function(A) {
                "start" === A.state && this.startExpanding(A),
                "end" === A.state && this.stopExpanding(A)
            }
        }, {
            key: "startExpanding",
            value: function(A) {
                var e = this;
                this.expansionEvent && clearTimeout(this.expansionEvent),
                this.iterations = 0;
                var t = function t() {
                    var n = 0 === e.iterations ? j[e.iterations] : j[e.iterations] - j[e.iterations - 1];
                    e.expansionEvent = setTimeout(function() {
                        d.default.dispatch({
                            type: C.default.INCREASE_CURSOR_HEIGHT,
                            by: O
                        }),
                        e.iterations > j.length ? e.stopExpanding(A) : (e.iterations += 1,
                        t())
                    }, n)
                };
                t(),
                d.default.dispatch({
                    type: C.default.START_SOUND,
                    sound: "balloon"
                })
            }
        }, {
            key: "stopExpanding",
            value: function(A) {
                var t = this;
                this.expansionEvent && (clearTimeout(this.expansionEvent),
                delete this.expansionEvent,
                d.default.dispatch({
                    type: C.default.RESET_CURSOR_HEIGHT
                }),
                d.default.dispatch({
                    type: C.default.STOP_SOUND,
                    sound: "balloon"
                }),
                m.AsyncObject.waitFor(m.Gesture, m.toolAssets).then(function() {
                    var n = r(c.default.mark(function n(r) {
                        var o, i, a, u, l, p = s(r, 2), f = p[0];
                        p[1];
                        return c.default.wrap(function(n) {
                            for (; ; )
                                switch (n.prev = n.next) {
                                case 0:
                                    return A.cancel(),
                                    o = d.default.getState(),
                                    i = o.color,
                                    a = o.splat_option,
                                    u = f.asPageXY(A),
                                    n.next = 5,
                                    e.assetFor(a);
                                case 5:
                                    l = n.sent,
                                    d.default.dispatch(Object.assign({
                                        type: C.default.ADD_SPLAT
                                    }, u, {
                                        diameter: 100 * (t.iterations || 1),
                                        color: i,
                                        asset: l
                                    })),
                                    d.default.dispatch({
                                        type: C.default.START_SOUND,
                                        sound: "splat"
                                    });
                                case 8:
                                case "end":
                                    return n.stop()
                                }
                        }, n, t)
                    }));
                    return function(A) {
                        return n.apply(this, arguments)
                    }
                }()))
            }
        }]),
        e
    }(h.default);
    e.default = new B({
        tool: "splat",
        tooltip: "Paint Balloon",
        sketchTool: "splat",
        toolIcon: k.default,
        Editor: function() {
            return g.default.createElement(Q.default, {
                tool: "splat",
                options: Z.getKeys(),
                editorIcon: v.default,
                category: "fun",
                showColorPicker: !0,
                itemsPerPage: 7
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        return e in A ? Object.defineProperty(A, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : A[e] = t,
        A
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , l = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , c = function A(e, t, n) {
        null === e && (e = Function.prototype);
        var r = Object.getOwnPropertyDescriptor(e, t);
        if (void 0 === r) {
            var o = Object.getPrototypeOf(e);
            return null === o ? void 0 : A(o, t, n)
        }
        if ("value"in r)
            return r.value;
        var i = r.get;
        if (void 0 !== i)
            return i.call(n)
    }
      , s = t(1)
      , p = n(s)
      , f = t(4)
      , g = t(15)
      , I = n(g)
      , d = t(10)
      , q = n(d)
      , C = t(38)
      , m = n(C)
      , y = t(203)
      , h = n(y)
      , M = t(204)
      , V = n(M)
      , E = t(238)
      , S = n(E)
      , k = ["option_spraycan_circle", "option_spraycan_star", "option_spraycan_heart", "option_spraycan_snowflake", "option_spraycan_flower", "option_spraycan_leaf"];
    e.default = new (function(A) {
        function e() {
            return o(this, e),
            i(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return a(e, A),
        l(e, [{
            key: "updateSketch",
            value: function() {
                return f.AsyncObject.waitFor(f.sketch, f.toolAssets).then(function(A) {
                    var e = u(A, 2)
                      , t = e[0]
                      , n = e[1]
                      , r = I.default.getState()
                      , o = r.color
                      , i = r.spraycan_option;
                    delete t.doc.toolkit.config.stamp.srcs,
                    t.config("stamp", {
                        globalized: "no",
                        fill: {
                            enabled: !1
                        },
                        stroke: {
                            type: "color",
                            color: o,
                            opacity: .25
                        },
                        pathSpacing: {
                            type: t.PATH_SPACING.ADAPTIVE_THRESHOLD,
                            clamp: {
                                min: null,
                                max: 250
                            }
                        },
                        airbrush: !0,
                        jitterScale: [1.25, 3],
                        jitterRotation: [0, 0],
                        src: n[i]
                    })
                }).then(c(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), "updateSketch", this))
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: S.default,
                    height: 50
                }
            }
        }, {
            key: "soundButtons",
            value: function() {
                return r({}, this.tool, {
                    note: "D2",
                    requiresInteraction: !0,
                    maxSimultaneous: 1
                })
            }
        }]),
        e
    }(q.default))({
        tool: "spraycan",
        tooltip: "Spray Paint",
        sketchTool: "stamp",
        toolIcon: h.default,
        Editor: function() {
            return p.default.createElement(m.default, {
                tool: "spraycan",
                options: k,
                editorIcon: V.default,
                category: "painting"
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , u = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , l = function A(e, t, n) {
        null === e && (e = Function.prototype);
        var r = Object.getOwnPropertyDescriptor(e, t);
        if (void 0 === r) {
            var o = Object.getPrototypeOf(e);
            return null === o ? void 0 : A(o, t, n)
        }
        if ("value"in r)
            return r.value;
        var i = r.get;
        if (void 0 !== i)
            return i.call(n)
    }
      , c = t(1)
      , s = n(c)
      , p = t(4)
      , f = t(15)
      , g = n(f)
      , I = t(10)
      , d = n(I)
      , q = t(253)
      , C = n(q)
      , m = t(254)
      , y = n(m)
      , h = t(242)
      , M = n(h)
      , V = t(38)
      , E = n(V)
      , S = {
        option_stamp_hands: {
            template: "stamp_hand_%N%",
            count: 6
        },
        option_stamp_balloons: {
            template: "stamp_balloon_%N%",
            count: 6
        },
        option_stamp_coins: {
            template: "stamp_coin_%N%",
            count: 4
        },
        option_stamp_bubbles: {
            template: "stamp_bubble_%N%",
            count: 3
        },
        option_stamp_beans: {
            template: "stamp_bean_%N%",
            count: 6
        },
        option_stamp_stars: {
            template: "stamp_star_%N%",
            count: 6
        },
        option_stamp_flowers: {
            template: "stamp_flower_%N%",
            count: 4
        }
    }
      , k = ["option_stamp_hands", "option_stamp_balloons", "option_stamp_coins", "option_stamp_bubbles", "option_stamp_beans", "option_stamp_stars", "option_stamp_flowers"];
    e.default = new (function(A) {
        function e() {
            return r(this, e),
            o(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return i(e, A),
        u(e, [{
            key: "updateSketch",
            value: function() {
                var A = this;
                return p.AsyncObject.waitFor(p.sketch, p.toolAssets).then(function(e) {
                    for (var t = a(e, 2), n = t[0], r = t[1], o = g.default.getState(), i = o.stamp_option, u = S[i], l = u.template, c = u.count, s = [], p = 1; p < c + 1; p++) {
                        var f = l.replace("%N%", p);
                        s.push(r[f])
                    }
                    n.doc.toolkit.config.stamp.srcs = s,
                    n.config(A.sketchTool, {
                        globalized: "no",
                        fill: {
                            enabled: !1
                        },
                        stroke: {
                            color: "transparent",
                            opacity: 1
                        },
                        pathSpacing: {
                            type: n.PATH_SPACING.ADAPTIVE_THRESHOLD,
                            clamp: {
                                min: 50,
                                max: 50
                            }
                        },
                        jitterScale: [2.15, 2.15],
                        jitterRotation: [0, 0]
                    })
                }).then(l(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), "updateSketch", this))
            }
        }, {
            key: "soundButtons",
            value: function() {
                return {
                    option_stamp_balloons: {
                        note: "E2",
                        requiresInteraction: !0
                    },
                    option_stamp_bubbles: {
                        note: "F2",
                        requiresInteraction: !0
                    },
                    option_stamp_coins: {
                        note: "G2",
                        requiresInteraction: !0
                    },
                    option_stamp_hands: {
                        note: "B4",
                        requiresInteraction: !0
                    },
                    option_stamp_flowers: {
                        note: "A3",
                        requiresInteraction: !0
                    },
                    option_stamp_beans: {
                        note: "C3",
                        requiresInteraction: !0
                    },
                    option_stamp_stars: {
                        note: "D3",
                        requiresInteraction: !0
                    }
                }
            }
        }, {
            key: "canvasSound",
            value: function() {
                var A = g.default.getState()
                  , e = A.stamp_option;
                return e
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: M.default,
                    height: 45
                }
            }
        }]),
        e
    }(d.default))({
        tool: "stamp",
        tooltip: "Pattern Stamp",
        sketchTool: "stamp",
        toolIcon: C.default,
        Editor: function() {
            return s.default.createElement(E.default, {
                tool: "stamp",
                options: k,
                editorIcon: y.default,
                category: "fun",
                showColorPicker: !1
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function i(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function a(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var u = function() {
        function A(A, e) {
            var t = []
              , n = !0
              , r = !1
              , o = void 0;
            try {
                for (var i, a = A[Symbol.iterator](); !(n = (i = a.next()).done) && (t.push(i.value),
                !e || t.length !== e); n = !0)
                    ;
            } catch (A) {
                r = !0,
                o = A
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw o
                }
            }
            return t
        }
        return function(e, t) {
            if (Array.isArray(e))
                return e;
            if (Symbol.iterator in Object(e))
                return A(e, t);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
      , l = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , c = t(1)
      , s = r(c)
      , p = t(4)
      , f = t(15)
      , g = r(f)
      , I = t(107)
      , d = n(I)
      , q = t(10)
      , C = r(q)
      , m = t(255)
      , y = r(m)
      , h = t(71)
      , M = r(h)
      , V = t(6)
      , E = t(102)
      , S = r(E)
      , k = (0,
    V.connect)(function(A) {
        var e = A.dialog;
        return {
            isActive: "StickerPicker" === e,
            tool: "stickers",
            tooltip: "Stickers",
            iconURL: y.default
        }
    })(S.default);
    e.default = new (function(A) {
        function e() {
            return o(this, e),
            i(this, (e.__proto__ || Object.getPrototypeOf(e)).apply(this, arguments))
        }
        return a(e, A),
        l(e, [{
            key: "updateSketch",
            value: function() {
                var A = this;
                return p.AsyncObject.waitFor(p.sketch, p.toolAssets).then(function(e) {
                    var t = u(e, 2)
                      , n = t[0]
                      , r = (t[1],
                    g.default.getState())
                      , o = r.sticker;
                    n.config(A.sketchTool, {
                        src: d[o]
                    })
                })
            }
        }, {
            key: "cursorAttributes",
            value: function() {
                return {
                    pointerImage: M.default,
                    shouldRotate: !1,
                    height: 50
                }
            }
        }, {
            key: "ToolButton",
            value: function(A) {
                return s.default.createElement(k, A)
            }
        }]),
        e
    }(C.default))({
        tool: "stickers",
        sketchTool: "clipart",
        toolIcon: y.default,
        toolSound: "toggleDialog"
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = t(108)
      , a = n(i)
      , u = t(30)
      , l = n(u)
      , c = t(205)
      , s = n(c)
      , p = t(206)
      , f = n(p)
      , g = t(239)
      , I = n(g);
    e.default = new a.default({
        tool: "translucent_brush",
        tooltip: "Watercolor Wash",
        toolIcon: s.default,
        pointerImage: I.default,
        opacity: .5,
        Editor: function() {
            return o.default.createElement(l.default, {
                category: "painting",
                editorIcon: f.default
            })
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A && A.__esModule)
            return A;
        var e = {};
        if (null != A)
            for (var t in A)
                Object.prototype.hasOwnProperty.call(A, t) && (e[t] = A[t]);
        return e.default = A,
        e
    }
    function r(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function o(A) {
        return function() {
            var e = A.apply(this, arguments);
            return new Promise(function(A, t) {
                function n(r, o) {
                    try {
                        var i = e[r](o)
                          , a = i.value
                    } catch (A) {
                        return void t(A)
                    }
                    return i.done ? void A(a) : Promise.resolve(a).then(function(A) {
                        n("next", A)
                    }, function(A) {
                        n("throw", A)
                    })
                }
                return n("next")
            }
            )
        }
    }
    var i = t(9)
      , a = r(i)
      , u = t(3)
      , l = r(u)
      , c = t(147)
      , s = t(95)
      , p = r(s)
      , f = t(74)
      , g = t(4)
      , I = t(37)
      , d = t(62)
      , q = t(23)
      , C = n(q)
      , m = t(416)
      , y = n(m)
      , h = t(67)
      , M = r(h)
      , V = t(2)
      , E = r(V)
      , S = (0,
    E.default)("ABCya-paint");
    window.ABCya = window.ABCya || {},
    window.ABCya.paint = {
        startDebugging: function() {
            var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "ABCya-paint:*";
            return window.localStorage.debug !== A ? (S("Debugging all messages similar to: %s", A),
            window.localStorage.debug = A,
            void (window.location = window.location)) : void S("You are already debugging.")
        },
        stopDebugging: function() {
            S("Goodbye!"),
            window.localStorage.removeItem("debug"),
            window.location = window.location
        },
        closeDialog: function() {
            c.store.dispatch({
                type: l.default.CLOSE_DIALOG
            })
        },
        soundFX: p.default,
        MIDI: f.MIDI,
        store: c.store,
        env: {
            NODE_ENV: "production",
            PUBLIC_URL: ".",
            REACT_APP_ASYNC_OBJECT_RETRIES: "10",
            REACT_APP_ASYNC_OBJECT_DELAY: "2000",
            REACT_APP_SKETCH_URL: "%PUBLIC_URL%/sketch/min/sketch-api.min.js",
            REACT_APP_ACTION_LOGGER: "false",
            REACT_APP_PERF_MIDDLEWARE: "false",
            REACT_APP_WHY_DID_YOU_UPDATE: "false",
            REACT_APP_FANCY_ANIMATIONS_MOBILE: "true",
            REACT_APP_FANCY_ANIMATIONS_DESKTOP: "true",
            REACT_APP_ONSCREEN_KEYBOARD_MOBILE: "true",
            REACT_APP_ONSCREEN_KEYBOARD_DESKTOP: "false",
            REACT_APP_CUSTOM_CURSORS_DESKTOP: "true",
            REACT_APP_CUSTOM_CURSORS_MOBILE: "false",
            REACT_APP_WAITING_OVERLAY_DELAY: "250",
            REACT_APP_TUTORIAL_URL: "https://youtu.be/bllO9Kx0MCI",
            REACT_APP_TUTORIAL_WINDOW_NAME: "ABCya-paint, learn it!",
            REACT_APP_TUTORIAL_WINDOW_FEATURES: "width=1024,height=768,centerscreen,menubar=off,toolbar=off",
            REACT_APP_INTRO_MOVIE_URL: "%PUBLIC_URL%/Loading-Logo.mp4",
            REACT_APP_EXPANSION_AMOUNT: "20",
            REACT_APP_EXPANSION_DELAY: "500",
            REACT_APP_EXPANSION_COUNT: "10"
        },
        toolAssets: g.toolAssets,
        sketch: g.sketch,
        Gesture: g.Gesture,
        paintRoot: g.paintRoot,
        tools: C,
        features: Object.assign({}, y),
        DeviceManager: M.default,
        uiElements: {
            contentDB: I.contentDB
        },
        CursorLayer: {
            elementDB: d.elementDB
        },
        use: function(A) {
            c.store.dispatch({
                type: l.default.SET_TOOL,
                tool: A
            })
        },
        DEBUG_addSplat: function() {
            var A = this
              , e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
              , t = e.color
              , n = void 0 === t ? "blue" : t
              , r = e.diameter
              , i = void 0 === r ? 100 : r
              , u = e.x
              , s = void 0 === u ? 0 : u
              , p = e.y
              , f = void 0 === p ? 0 : p
              , I = e.asset
              , d = void 0 === I ? "stamp_splat_1" : I;
            g.toolAssets.await().then(function() {
                var e = o(a.default.mark(function e(t) {
                    return a.default.wrap(function(A) {
                        for (; ; )
                            switch (A.prev = A.next) {
                            case 0:
                                c.store.dispatch({
                                    type: l.default.ADD_SPLAT,
                                    color: n,
                                    diameter: i,
                                    x: s,
                                    y: f,
                                    asset: t[d]
                                });
                            case 1:
                            case "end":
                                return A.stop()
                            }
                    }, e, A)
                }));
                return function(A) {
                    return e.apply(this, arguments)
                }
            }())
        },
        DEBUG_cycleCursorExpansion: function() {
            var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
              , e = A.count
              , t = void 0 === e ? 10 : e
              , n = A.growthFactor
              , r = void 0 === n ? 100 : n
              , o = A.delay
              , i = void 0 === o ? 500 : o;
            c.store.dispatch({
                type: l.default.RESET_CURSOR_HEIGHT
            });
            var a = 0
              , u = setInterval(function() {
                a += 1,
                c.store.dispatch({
                    type: l.default.INCREASE_CURSOR_HEIGHT,
                    by: (a || 1) * r
                }),
                a >= t && (clearInterval(u),
                c.store.dispatch({
                    type: l.default.RESET_CURSOR_HEIGHT
                }))
            }, i)
        }
    }
}
, function(A, e, t) {
    var n, r;
    !function() {
        "use strict";
        function t() {
            for (var A = [], e = 0; e < arguments.length; e++) {
                var n = arguments[e];
                if (n) {
                    var r = typeof n;
                    if ("string" === r || "number" === r)
                        A.push(n);
                    else if (Array.isArray(n))
                        A.push(t.apply(null, n));
                    else if ("object" === r)
                        for (var i in n)
                            o.call(n, i) && n[i] && A.push(i)
                }
            }
            return A.join(" ")
        }
        var o = {}.hasOwnProperty;
        "undefined" != typeof A && A.exports ? A.exports = t : (n = [],
        r = function() {
            return t
        }
        .apply(e, n),
        !(void 0 !== r && (A.exports = r)))
    }()
}
, function(A, e) {
    function t(A) {
        if (A = String(A),
        !(A.length > 100)) {
            var e = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(A);
            if (e) {
                var t = parseFloat(e[1])
                  , n = (e[2] || "ms").toLowerCase();
                switch (n) {
                case "years":
                case "year":
                case "yrs":
                case "yr":
                case "y":
                    return t * c;
                case "days":
                case "day":
                case "d":
                    return t * l;
                case "hours":
                case "hour":
                case "hrs":
                case "hr":
                case "h":
                    return t * u;
                case "minutes":
                case "minute":
                case "mins":
                case "min":
                case "m":
                    return t * a;
                case "seconds":
                case "second":
                case "secs":
                case "sec":
                case "s":
                    return t * i;
                case "milliseconds":
                case "millisecond":
                case "msecs":
                case "msec":
                case "ms":
                    return t;
                default:
                    return
                }
            }
        }
    }
    function n(A) {
        return A >= l ? Math.round(A / l) + "d" : A >= u ? Math.round(A / u) + "h" : A >= a ? Math.round(A / a) + "m" : A >= i ? Math.round(A / i) + "s" : A + "ms"
    }
    function r(A) {
        return o(A, l, "day") || o(A, u, "hour") || o(A, a, "minute") || o(A, i, "second") || A + " ms"
    }
    function o(A, e, t) {
        if (!(A < e))
            return A < 1.5 * e ? Math.floor(A / e) + " " + t : Math.ceil(A / e) + " " + t + "s"
    }
    var i = 1e3
      , a = 60 * i
      , u = 60 * a
      , l = 24 * u
      , c = 365.25 * l;
    A.exports = function(A, e) {
        e = e || {};
        var o = typeof A;
        if ("string" === o && A.length > 0)
            return t(A);
        if ("number" === o && isNaN(A) === !1)
            return e.long ? r(A) : n(A);
        throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(A))
    }
}
, function(A, e, t) {
    function n(A) {
        var t, n = 0;
        for (t in A)
            n = (n << 5) - n + A.charCodeAt(t),
            n |= 0;
        return e.colors[Math.abs(n) % e.colors.length]
    }
    function r(A) {
        function t() {
            if (t.enabled) {
                var A = t
                  , n = +new Date
                  , r = n - (l || n);
                A.diff = r,
                A.prev = l,
                A.curr = n,
                l = n;
                for (var o = new Array(arguments.length), i = 0; i < o.length; i++)
                    o[i] = arguments[i];
                o[0] = e.coerce(o[0]),
                "string" != typeof o[0] && o.unshift("%O");
                var a = 0;
                o[0] = o[0].replace(/%([a-zA-Z%])/g, function(t, n) {
                    if ("%%" === t)
                        return t;
                    a++;
                    var r = e.formatters[n];
                    if ("function" == typeof r) {
                        var i = o[a];
                        t = r.call(A, i),
                        o.splice(a, 1),
                        a--
                    }
                    return t
                }),
                e.formatArgs.call(A, o);
                var u = t.log || e.log || console.log.bind(console);
                u.apply(A, o)
            }
        }
        return t.namespace = A,
        t.enabled = e.enabled(A),
        t.useColors = e.useColors(),
        t.color = n(A),
        "function" == typeof e.init && e.init(t),
        t
    }
    function o(A) {
        e.save(A),
        e.names = [],
        e.skips = [];
        for (var t = ("string" == typeof A ? A : "").split(/[\s,]+/), n = t.length, r = 0; r < n; r++)
            t[r] && (A = t[r].replace(/\*/g, ".*?"),
            "-" === A[0] ? e.skips.push(new RegExp("^" + A.substr(1) + "$")) : e.names.push(new RegExp("^" + A + "$")))
    }
    function i() {
        e.enable("")
    }
    function a(A) {
        var t, n;
        for (t = 0,
        n = e.skips.length; t < n; t++)
            if (e.skips[t].test(A))
                return !1;
        for (t = 0,
        n = e.names.length; t < n; t++)
            if (e.names[t].test(A))
                return !0;
        return !1
    }
    function u(A) {
        return A instanceof Error ? A.stack || A.message : A
    }
    e = A.exports = r.debug = r.default = r,
    e.coerce = u,
    e.disable = i,
    e.enable = o,
    e.enabled = a,
    e.humanize = t(443),
    e.names = [],
    e.skips = [],
    e.formatters = {};
    var l
}
, function(A, e) {}
, 445, function(A, e) {
    "use strict";
    function t(A) {
        return A.replace(n, function(A, e) {
            return e.toUpperCase()
        })
    }
    var n = /-(.)/g;
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return r(A.replace(o, "ms-"))
    }
    var r = t(447)
      , o = /^-ms-/;
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        return !(!A || !e) && (A === e || !r(A) && (r(e) ? n(A, e.parentNode) : "contains"in A ? A.contains(e) : !!A.compareDocumentPosition && !!(16 & A.compareDocumentPosition(e))))
    }
    var r = t(457);
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        var e = A.length;
        if (Array.isArray(A) || "object" != typeof A && "function" != typeof A ? i(!1) : void 0,
        "number" != typeof e ? i(!1) : void 0,
        0 === e || e - 1 in A ? void 0 : i(!1),
        "function" == typeof A.callee ? i(!1) : void 0,
        A.hasOwnProperty)
            try {
                return Array.prototype.slice.call(A)
            } catch (A) {}
        for (var t = Array(e), n = 0; n < e; n++)
            t[n] = A[n];
        return t
    }
    function r(A) {
        return !!A && ("object" == typeof A || "function" == typeof A) && "length"in A && !("setInterval"in A) && "number" != typeof A.nodeType && (Array.isArray(A) || "callee"in A || "item"in A)
    }
    function o(A) {
        return r(A) ? Array.isArray(A) ? A.slice() : n(A) : [A]
    }
    var i = t(5);
    A.exports = o
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        var e = A.match(c);
        return e && e[1].toLowerCase()
    }
    function r(A, e) {
        var t = l;
        l ? void 0 : u(!1);
        var r = n(A)
          , o = r && a(r);
        if (o) {
            t.innerHTML = o[1] + A + o[2];
            for (var c = o[0]; c--; )
                t = t.lastChild
        } else
            t.innerHTML = A;
        var s = t.getElementsByTagName("script");
        s.length && (e ? void 0 : u(!1),
        i(s).forEach(e));
        for (var p = Array.from(t.childNodes); t.lastChild; )
            t.removeChild(t.lastChild);
        return p
    }
    var o = t(16)
      , i = t(450)
      , a = t(452)
      , u = t(5)
      , l = o.canUseDOM ? document.createElement("div") : null
      , c = /^\s*<(\w+)/;
    A.exports = r
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return i ? void 0 : o(!1),
        p.hasOwnProperty(A) || (A = "*"),
        a.hasOwnProperty(A) || ("*" === A ? i.innerHTML = "<link />" : i.innerHTML = "<" + A + "></" + A + ">",
        a[A] = !i.firstChild),
        a[A] ? p[A] : null
    }
    var r = t(16)
      , o = t(5)
      , i = r.canUseDOM ? document.createElement("div") : null
      , a = {}
      , u = [1, '<select multiple="true">', "</select>"]
      , l = [1, "<table>", "</table>"]
      , c = [3, "<table><tbody><tr>", "</tr></tbody></table>"]
      , s = [1, '<svg xmlns="http://www.w3.org/2000/svg">', "</svg>"]
      , p = {
        "*": [1, "?<div>", "</div>"],
        area: [1, "<map>", "</map>"],
        col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
        legend: [1, "<fieldset>", "</fieldset>"],
        param: [1, "<object>", "</object>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        optgroup: u,
        option: u,
        caption: l,
        colgroup: l,
        tbody: l,
        tfoot: l,
        thead: l,
        td: c,
        th: c
    }
      , f = ["circle", "clipPath", "defs", "ellipse", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "text", "tspan"];
    f.forEach(function(A) {
        p[A] = s,
        a[A] = !0
    }),
    A.exports = n
}
, function(A, e) {
    "use strict";
    function t(A) {
        return A.Window && A instanceof A.Window ? {
            x: A.pageXOffset || A.document.documentElement.scrollLeft,
            y: A.pageYOffset || A.document.documentElement.scrollTop
        } : {
            x: A.scrollLeft,
            y: A.scrollTop
        }
    }
    A.exports = t
}
, function(A, e) {
    "use strict";
    function t(A) {
        return A.replace(n, "-$1").toLowerCase()
    }
    var n = /([A-Z])/g;
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return r(A).replace(o, "-ms-")
    }
    var r = t(454)
      , o = /^ms-/;
    A.exports = n
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = A ? A.ownerDocument || A : document
          , t = e.defaultView || window;
        return !(!A || !("function" == typeof t.Node ? A instanceof t.Node : "object" == typeof A && "number" == typeof A.nodeType && "string" == typeof A.nodeName))
    }
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return r(A) && 3 == A.nodeType
    }
    var r = t(456);
    A.exports = n
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = {};
        return function(t) {
            return e.hasOwnProperty(t) || (e[t] = A.call(this, t)),
            e[t]
        }
    }
    A.exports = t
}
, function(A, e, t) {
    A.exports = t.p + "static/media/dialog_5_of_10.11d8887d.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/dialog_6_of_10.3ab7c6d7.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/dialog_8_of_10.43752ab6.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/dialog_menu.9d606d01.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/dialog_region.a26ae01f.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/dialog_region_rectangle.04c12008.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/dialog_region_square.f1edefb8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_empty_slot.13d33192.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_bricks.ea18d8f8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_footsteps.09ffaf84.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_pawprints.be101822.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_rainbow.85f109c2.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_road.da84f12c.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_tracks.37537ef3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_water.0b7f428e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_shape_circle.45e0281f.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_shape_heart.782c239c.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_shape_line.384e003a.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_shape_square.b1c8fb07.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_shape_star.1b7b585d.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_shape_triangle.274ea1f9.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_splat_1.ccba4fdb.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_splat_2.15edb980.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_circle.64ba1a39.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_flower.0ea10b3c.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_heart.4e72dce4.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_leaf.d6867c13.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_snowflake.728a81f8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_star.4daeb448.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_stamp_balloons.61c51cc5.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_stamp_beans.91cb3f8d.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_stamp_bubbles.bb6b4832.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_stamp_coins.9bdcb011.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_stamp_flowers.351a3aea.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_stamp_hands.a3ffc32f.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_stamp_stars.4566cd64.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_text_1.622e99d4.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_text_2.86b8c354.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_text_3.f53b1a73.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_text_4.e1ffcef7.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_text_5.f3a7e456.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/page_indicator.1cb39124.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_tool_coloring_pages.a67cb37e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_tool_crosshair.a62b6542.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/pointer_tool_stickers.04564f7b.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_1.701112c8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_10.20104cd3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_11.365ad675.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_12.637dba09.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_13.eaa4a259.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_14.6c336984.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_15.a23945b3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_16.2c8e45ab.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_17.3bb0d10b.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_18.5c640257.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_19.f9b59dc2.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_2.dd24c1da.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_20.679d6e12.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_21.f2301f2c.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_22.811a8b90.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_23.751fd1c5.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_24.12d38595.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_25.1ea41ce6.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_26.ab116ce9.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_3.5cd92423.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_4.15e0f1a4.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_5.bce6776e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_6.a5744e57.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_7.2c823db3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_8.f1b73227.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Page_9.57005ad0.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_01.7de64200.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_02.25f396e0.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_03.333d8982.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_04.5b82d936.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_05.012b9739.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_06.3f4b0bee.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_07.2f4135f8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_08.94b999a0.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_09.d2bb750f.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_10.3730eb6c.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_11.9800fdc8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_12.16306dd9.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_13.bb067350.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_14.5e1ae7e8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_15.4aa8ab6e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_16.e3fdf6e3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_17.e28f3cfa.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_18.146c6814.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_19.ea0c74d7.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_20.ccc31419.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_21.2fdccef3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_22.e72dd9fe.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_23.aba583c8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_24.8d5fbeb3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_25.a6b94cdf.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_26.7e253f18.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_27.09e28e44.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_28.2d669730.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_29.a62115b0.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_30.e8922393.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_31.f1e9984b.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_32.1b7a9fe7.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_33.061f107e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_34.e8d2bcb0.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_35.6996932f.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_36.e11ac500.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_37.0bef3cfb.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_38.0a478bc6.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_39.f05d6387.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_40.a03dd03e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_41.c1400b8d.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_42.a56a9091.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_43.1d7fc7f2.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_44.20a63b37.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_45.7aa0d7bd.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_46.2886815f.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_47.72387530.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_48.4598f3c3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_49.34dad6d8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_50.8f4849e6.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_51.bec432ff.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_52.08fd33c6.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_53.371c3c6f.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_54.0aeecebc.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_55.8adf0ff6.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_56.4622864a.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_57.ea9f0d33.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_58.80ed97cc.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_59.517c8108.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_60.a91c82df.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_61.d24a467b.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_62.b18b8ef9.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_63.b9802bf6.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_64.7af02e0e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_65.87a87e10.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_66.c69b96fa.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_67.c0d99945.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_68.57342980.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_69.d03ff468.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_70.9433fa35.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_71.23c6ce14.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/Sticker_72.1292a558.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_bricks.48be3ea7.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_footsteps.82b104c3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_pawprints.f1ff24ed.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_rainbow.78ba05cd.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_road.ef481f70.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_tracks.e1446ac9.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_pattern_water.c31923c6.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_circle.f0fb0007.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_flower.8e522633.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_heart.03184862.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_leaf.387e2967.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_snowflake.901e1e2e.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_spraycan_star.3fa8a8e2.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/option_translucent_brush.206c25d9.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_balloon_1.9b37c295.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_balloon_2.69eb6dcc.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_balloon_3.00eec1eb.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_balloon_4.765484cd.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_balloon_5.dfc697a2.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_balloon_6.b72c3927.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_bean_1.4e6452f2.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_bean_2.de8afbe6.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_bean_3.6052bdf4.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_bean_4.dc214078.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_bean_5.62aaa3f5.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_bean_6.cfd4f9a8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_bubble_1.8e69f8c6.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_bubble_2.61d92c75.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_bubble_3.bb4a8c57.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_coin_1.68d3f3df.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_coin_2.112617b1.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_coin_3.8059b8ed.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_coin_4.d1241af1.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_flower_1.9aec9be1.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_flower_2.e8c22ce0.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_flower_3.a1b70764.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_flower_4.8a421eb8.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_hand_1.414a2c01.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_hand_2.8291fe90.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_hand_3.8a2f3c98.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_hand_4.15fa32b9.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_hand_5.fe8c09cf.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_hand_6.f27f39f2.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_splat_1.645456bf.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_splat_2.d42b1ff4.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_star_1.affa7407.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_star_2.62abf681.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_star_3.bc784506.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_star_4.61279796.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_star_5.01ca35a3.svg"
}
, function(A, e, t) {
    A.exports = t.p + "static/media/stamp_star_6.d2004af7.svg"
}
, function(A, e) {
    var t = 0;
    A.exports = function(A) {
        return function() {
            return t++,
            A + t.toString(36)
        }
    }
}
, function(A, e, t) {
    A.exports = t(653)("g")
}
, function(A, e) {
    "use strict";
    function t(A) {
        if ("undefined" == typeof document)
            return A;
        var e = document.createElement("p").style
          , t = ["ms", "O", "Moz", "Webkit"];
        if ("" === e[A])
            return A;
        A = A.charAt(0).toUpperCase() + A.slice(1);
        for (var n = t.length; n--; )
            if ("" === e[t[n] + A])
                return t[n] + A
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = t,
    A.exports = e.default
}
, function(A, e) {
    "use strict";
    var t = {
        childContextTypes: !0,
        contextTypes: !0,
        defaultProps: !0,
        displayName: !0,
        getDefaultProps: !0,
        mixins: !0,
        propTypes: !0,
        type: !0
    }
      , n = {
        name: !0,
        length: !0,
        prototype: !0,
        caller: !0,
        arguments: !0,
        arity: !0
    }
      , r = "function" == typeof Object.getOwnPropertySymbols;
    A.exports = function(A, e, o) {
        if ("string" != typeof e) {
            var i = Object.getOwnPropertyNames(e);
            r && (i = i.concat(Object.getOwnPropertySymbols(e)));
            for (var a = 0; a < i.length; ++a)
                if (!(t[i[a]] || n[i[a]] || o && o[i[a]]))
                    try {
                        A[i[a]] = e[i[a]]
                    } catch (A) {}
        }
        return A
    }
}
, function(A, e, t) {
    "use strict";
    var n = function(A, e, t, n, r, o, i, a) {
        if (!A) {
            var u;
            if (void 0 === e)
                u = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
            else {
                var l = [t, n, r, o, i, a]
                  , c = 0;
                u = new Error(e.replace(/%s/g, function() {
                    return l[c++]
                })),
                u.name = "Invariant Violation"
            }
            throw u.framesToPop = 1,
            u
        }
    };
    A.exports = n
}
, function(A, e) {
    A.exports = {
        A1: {
            noteData: "SUQzBAAAAAACXFRYWFgAAABVAAADY29tbWVudABzcGxhdCwgc3F1aXNoLCBwbG9wLCB3ZXQgaW1wYWN0LCBnb29wLCBvb3plLCBnbG9vcCwgYnV0dG9uLCBibG9vZCwgc3BsYXR0ZXIAVEVOQwAAABYAAAPCqSAyMDExIFNvdW5kcmFuZ2VycwBUWFhYAAAAIwAAA29yaWdpbmF0b3JfcmVmZXJlbmNlAFNvdW5kcmFuZ2VycwBURFJDAAAADAAAA1lZWVktTU0tREQAVFBFMQAAABIAAANTb3VuZHJhbmdlcnMuY29tAFRYWFgAAAASAAADdGltZV9yZWZlcmVuY2UAMABUWFhYAAAAEQAAA2NvZGluZ19oaXN0b3J5AABUQ09QAAAAGwAAAyhDKSAyMDEwIFNvdW5kcmFuZ2Vycy5jb20AVFNTRQAAAA4AAANMYXZmNTcuMC4xMDAAAAAAAAAAAAAAAP/7UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhpbmcAAAAPAAAADwAAHDgAJCQkJCQkMzMzMzMzM0ZGRkZGRlxcXFxcXFx6enp6enp6kJCQkJCQra2tra2trby8vLy8vLzJycnJycnU1NTU1NTU39/f39/f3+jo6Ojo6Pf39/f39/f8/Pz8/Pz8////////AAAAAExhdmM1Ny4wLgAAAAAAAAAAAAAAACQAAAAAAAAAABw4FMk+pQAAAAAAAAAAAAAAAAAAAAD/+9BkAAABRQDXbQQACB9gCi2gAAAZSZV5+aeQAi+wL78y0gH25JETW2xFgEEAQDDQQg+fLvKHIIOy58oCEMfqgh/WGP/+Uhh0hyjgw2HABKIAiAAAfB+GCnh+CDvn//hj4Y//KHIng/y5/h83poKqJHWVeFPaPTQth1GyJMQQHKCHGIgQS3rHGVJ8u+wNCAAGHuEZNX8AEWnwgiAIYYZLxFxAzjO0NWUJPUcaA9DETQWNCRvmueKEJ9Kt5dDg/Xxzp9jQtcZbT9V79XvmSEyRk+tMFUPhoXp/WIc6UeqtkrHnQxDImmBUR54q5kfSz5/gRWGNEfq+O8/Z9681KxZ4rHuLHftrPSPTUTLtscLTe0SJPpzpVYV8bf1vfj01jO87///7yk/3871fdP8vVfZzeS6n08iv9eVx9tYlsNZY/tdf7KpgBj0MRXluoPme2IHbWH1V2ISykiDf0Cky00RQNBdB3000lni4XFoG5QL7l08ndBMzMkTd000zJkSOs8O8lx7l6goxRWx80NDREYAfCUNDhKGbIThmzqTRL58vpJrU9C906tNPTVW7J1WQW7fQZSkXr03pv/////+ms/wwt4OqRaszE1MmgSm5SDE5PrafFtO0K3olWnsfyO02I6yg5i2MccW0RMS+d7Hq60i6rszWzNcio5ihVDmkVRm2tfa1tVjn4+V/2lVX2+uOLZrtuk+ltVW9ijpY2JWgqAQ1rM4UI2gqCoKq1cGmFTa5MVVnWtAty1va0ShVUCYzjFgNIpfDJcqHy/M5lK3p/UtPzLy5nX0fa+pWWZ//8qo/6+VV3KUqspQpkhriah4KgqwjPUwVGBMSyOv6Ad8ZkRENtJJF4q8IrbSE0CbxITMHrTpxjXPNTHneyIZE02RgIzHMyISmw/xSdz351P1h7R3Q5YZ5NYeTDKFSJgoAktqtFUdxW/+V4VeFW0BTEtaza5YxVkK/QYGsdoByYNqaKuRobkhLKBoTNOlplZoklYsSclJ2WZS6/WIPUJYEqY60g/5ldzNQfy1F3kI7WNSxKqjYoeJXKS8eEgzPzxUP1IHjqTUmZJYQn9PgWYYALwGfO3BhbQwnrsRutQKnwOoIie/FkxAX//uQZMAAA1BD3f89AABNSLu/5IgACmjbdeYEc0DtBO14lJiQybFTkTl84ll++j99i/cu5K3DMCqinXIky4PtzcKFlWM/cmp/T6PtesQpapQkdvTPE1lEHbSDzrNF/2YRU4YJjb0Nt/VZ7jOLWi2jEbCBpLBViXSkOFGJLCFhRpKwkEASGQDXBb7P1TAfMuNyn5aqymBF3MUbRU11riFRDFmcqfEHDIAzVE5Uqii5aGfxkMR5khqyZ3IDgaG4crR544Yq0tLF5TLo1DzTH8n+Sq1K72diM3u37FD+s6CLxCmuU1mreuVreNLnhg/D5wxDk9N0+Ot63lvK7Sds02dfUqtY55VLHJROfV3cpr9WrzuV/lfvJ7uHbmeOdfC1YllH/O6x+zay7z8ctXzpYKESJGSpu0quxOu8U+AcAauTFJIBgMAL8kI84LSCbwkCmqNoXXHRVLYEAEKYkCkpEgaBWlizoSGrFfZwTXxhiasnGzKen/SEFcT4c58U1S0VjVVWw6Lwnjnmr9jPHTBXO4l70Z74T7Pam8fGGSPtve+kk+oj//ugZNuAAlEPW2UwwABB4StfpgAAF7VXZ/msAgJ1Juy/NvBAO/v8+3+M/GoGJ3+7RWs61WrHmrRL/5t8ff/iZf2xS3xnXh7fv39AmUd+mYVu0hjThWblhkdUU4UmZpJUYabYAPEhbK6pSuy83ilRIocrU05lptFBWbN9GgapT4ZipahAPKywukgHCKGxJRlccB5cY80HNCKoerkGjZknpsnZWKR7atNWpXX/5/2Z21HIcEGBfetzod1578HnyOh+UYl+Nfi63QH3VcSvQ2tC/W9pn/cuhupF0n07tYmaW7frM6x7S4JQ8KFVPLPClP6KJuNx3tkl2dUSXJqRkcpAACiVrAaSzkS8VOh1ZE94VIk7KXt4HAv0umAfWEZVzVWei2uiIr/h4eRKV4g/yKG8mqUT4gJYRQNUyFSddRnSSrhGqy//cX20avf0tRyu/LalK88Yx7XxzMcgpC2YmpVKbMFi1Z1qVWAVP//xzDnwkrcvTorLSrF3UgMSyUAB8AJmAKr3RubdMQgeMrZYCFbwqCp5KuJTYQKOo9dEBaRgj/cmoSZfZCLIkqXfUz5P307LGebVGYjKMGEaJoHtKwvVS5HMqHCR6xN7ms01BizRY3iRle42fMasbm9gxfNsQa53ndYK7TBd2JCkicavUkPX1BfMO6Qp4zt37RtQ1lRvnzBSmrX8k+cwcev+//uwZNsABOJMWX5lgAB8qFtvzKQCFPkzafmngAIApC7/MrCIN2s/ghMmCv/T/3arYt4z6z4EwVbeBgUiMMAAo9xBt6Dh6/dK8a7VG25uK6ziNFc6BaIRC2wocxqKJ+Hmg+iNPMygq8846CXctVwRCGsEMCEvNiUVu5im9Q40JaPUyyP+6zakEV7D7J1xU2G3T/6umGhWnSSeVIPe62TCUTf91/KTXy09fLP2f2MXqTmKVnU0mDRFNblNWtgMbI/dzQ5SAoBODkOSxB64BhlFx0WnN9JkMVYxh3g5XSfUrjFlRDGxxlolQx1hxYIC6NBMyODKuj/2aKKiw4LyzN9QYRvLk/DeTO48kCGr8QYstoJMJzTXi5FtT17MctPKul32a+7qp5tlnVklIV6UivYurRpIzbApp/O7VivVikgxo80a0S2sV38/6xEm1eNiDkGGk0f+zQ6yYR8vuokyZllRIU4OKRlcQAKBXSJlIDgjgEBgJRRPRXwcLMWTgFsWvx8H0iXZifH842KdMV3fP3pr33zMXcuuzixP9v1Pce4eWn0ku7v/lrd3fc/XFx9+qcmW1FbJOkhhsGYRwMJQEfSrPoWriqWKVpZmZW9bYLITBIABhBRnMHA4WNxjoAGJQWYrXZgFilUXjRsAQOMjGg3I3DCgJOhLUiI5qqZFAtGBY4WLxmVJmVADCsMCgUOZ0qXzMGlNvJNo5LaFlS2ploxrwQ9ENCNN88N1CA2QUBAUUaQiZPiDxppFBmXRoE48lN6vM+DWoe+qaMCaMgZGAdcUQCDirkkFKHeJQbSX2YgDlYUAA4YXgaOs4Agg4EDALCU8HLz/+9Bk4YAFPk5YdmHgAGnHiz/NLAAj4WlZ+c0QCyiu63808kDe1lrPL0vZuy+Gn4h+5DChymVpenwVG+1oo+j1vC9LdJLMd1T/+MluSmPPJfilHLnokkBv4xN62uMLm4YcuLuJELNJXp6mWNTWOGVPjRVdfjrF543MS9+X+hzk/LqazW/8tUvK2wpVo7vbyAMSRVt2pDlElUhETRxEiAIAAADaA4CNtWUB901IQBHlsyJOJBAqwug3pdFppUAPCmTvZW8XY0lSYw+UOPwM8P1JlLHRi0gBa02PhCSyRC2fIsIuQkw9Y3BdAUglBTVWCmE1Acw4wpi+qFMM6rOliL0XBkgKsfhzONVTAanynhQH+/4+b4kdm4oNm4rFy1Za8Ra3gRpGyr/Ummt/ExXGb1xa9XCjNR7H09c4byA4ZdRXOLVmtu+vr//3WIdMv6QtT5hTftmn7hCnxesm8zrck2wVZpZYc4URhJEIhgAA7YJMPIQHICMRNACUFMoMsF5jAQYQCzqwhlaiC9mhu41sAngFYZ4KG9RLnZbXbrH2GSqI0ElUmuB+1/QitSPBe1Ha1prjKGuO/AUxWf6hh3kzS44Wph92Vv25DWHRi2D/WcrWVbKt2rFHfd+LtYdyKSnnxKUxluPe/n++dv09vTltbgdxJmXw05TSnBkMNMBabDNSrja1lzH8/dyMXqSx9jn/+MOv7WlMtEzHN9VP6FVjWtYru7QlNBiImBAgEAAAZsKBs6oSMNAiYopGXNKqUCgL/mTDqzoPpFwzdVQlo1IlWqD37GJ+eEc5knOu2lU1PeCqHCJ52GDFiUhwVRSSFh4poMno+hSt96aPcvRow1Qf1sWt8d0zv46gVjJG8Nl8JnvXX/1Xavfx9X2rImoT5dGi6a2txg/P1rXx9/dKXpre966ev4U4Sp///Q9rNM8Oj27oynNHpKkwowAMBcYkWAhuPBTNBULLCT8Bs/ZMwJH8vU3C6i50QSERVRHy2NYuSMSrU9OdZgKaV6j27SHoerIjtrc4mX7tBnsvIx/GVaoi+bVrP3OI2wn7p4xxXzBEaqsMfbyaG2v22C1eHh4yMb/MTdN+1vSSr95CjQ3DeIO32cWv/vXx//uwZPOABf1NWP5vAACbyZr/zbwAFKExZfmHgAJGnuu/MvAA//trXoL1kiT0raj6kHA8GgemP+i7pKlVglDRFU8RJurkzGrWtS0iQQANo0hRZFQW67VKqo19pzE0dWgWlg2XuTRiOlj9n7tr3ZcL0ufZPno3PxHQIbJAnHLS138aBhvZUcvGY4YcWNQq1xpT1fdl1WqvNLCJo7kUzauX9Ebr6z9eFnUmLQYut71B1qtLUZ58XnpfEuX1QG0OngipbV1pLCZANFjzf/99hYaSqTdVY4lmJ4QjchJQJBYAANEBu51rspc5yYU4bTmesDgt3YKcSUKaqlLUiMkNKOMCWDf93kbVDXtDGqIoyKDCRkymnuSkbchWcDXJdQNxgR83CgePMiWm8DtVpDJ60PTsMxx/4egGpQZ0taW5Wfp5jT6Rlyn1icCSKr3HGlpM4asU13O/ZlVDLKWmod0Vbn91XuWe7u7uSmtvD7Mql85KbWfMda7S2eZdx7ll38LeGeW/7/Mf/msu43edyz5/7x1/7s/jjhla/kvrldL9NzaTEPVIskkvxuhBpMAAI9xsSLocAYeqhdsu+uXW6uMCRXDneBURQMgDzfWSqAkOyKW72/gasrrl0Zti2Z//fUlgAp7ja70dNteZ/JdeuuKjxu65M50zMsutMuAYlehhpUSuW9hwADD7We3qv//r2dcRMO0RDMyqioktciSAAAAByp2DCQF2xkByeqnGeB5kgWY+FCMHKwUMLTJxsRDpQdmOBYKKQAUDwyBMpRm+yNRVGGGEIlVnWXgrlGVfLZV2pyOJB7InAXe4jDHMkTCJKnvFmHq+Zsn/+9Bk0YAGW15Z/mcAknGFu2/NsBIexZVN+bwAAwKtab848ADkqZ33glDMYDhKVTVXXdbKrDsWUCYrCmul+2ztQizLoYaIkM+zrSi7Tx2BLkqb6JPfPtdh6XSiH4XWga/RW6SX5z1+7h3n0N74rHL27mMqiMujdDKp6VWKHG9q3hvtNR5Q9nT1ua7Oy2IUtrsS+vTTn4Wu44Vf1y/Sc/8LNexVzq7rbsfv/5N8tY02VT7FuvuIlmd2VWVlZmW7RohAAAAA4KNBQAHCxQCgAbPIAsOF2xp0VGAwNLFLXF+pesO4LYSTlciku9RyGCyIgthAw+6DDGYBkSBLBSAlKnLAH03NZOXo9Zuq8UZJkSIWSM3lKJqSgmxgHef5PjDMtQoogyVucp1xILHJGf+E3Y9Hu6xZ6b3V96uK1Efb1CkvmWXVLwKbn+bWv4kbO9eFPF1J86ta95/i/3N873vdt61XFtazbO8f1t5v/jF8amukgH73CZtNhoWFTHWEWYN3np6VKgEAARCR7cB2TwPMYVwFyrulasUOsviy5wEQ0eFpzRNE1jduGndhh1H3aZ4KUjqj1amohlUoqO61ppy55NFZHINW5PXsz8RYDTRrci3XsV69TClnqXlLnlWv3Mr8ut9/OzX5X3X7ljjQ8yv2LNSfqUeNW9a13Xc7dfvN71nrLfMv5/P5/f/ti9W7hh+HO7/7mu3NxVxsCh8r0DhIRdEY1YCESsyv57t7YrxnaNre7xogAADRDRJIvlynyQqqZpdOstPFoEw0uGl8NAZ/WLAmbe/rSsvLYSF51DJ3Z1u3KscPMX5SmduXllFAfL53Z7Ku+zuzz0sVmf/K7dyF+mvOrFQqRCo2SYdULGzxv/952z/7TIV55amza/Mol5VKAKyAioLHQxIiKisu3QoNLYMLUiTXbdy4PJc7Y1iQwWYcNNZDTnDFLPMCYwWcKhMjVKpaw0eItWq10TLj/l9EWuu7X9a45epVOxD3dmhRAjWJSJJgKSwpMlCBZcsIWtqTsWlKAOlrVje6fdEYGUoFxStTnu5rZ93R/QURrmdqFWIOpVasppd0NJ9vCDqFosIFx4H5bCciWk1cWWJW5rsO1q55m56I//uQZOcABXhNWn5nBBBzZctPzLACCiRlYZyUAADdAyu/mAAAmnlS7aHKvM1+u/JqvuPaeOOGRqPkt//zfP1mo0YDhquRdu5cJMdZhz2Gw/yLyHl3V//27/v68RkqsMyOKRsEAsiVTtgtANLaC/TxYMIo2LhYOPYlBO20PeyxrHVm9WhOlDscIJfwcZ/0aGLpJ9CTOVUxLIQbGiqb06NpCBUOCcu4MtExAhwtPDqe2qyEvELwhDNBdmdi2ChtJ4AjQ0YMg09div/u22XZLZ5Z8k5ZKbhRZKCoobeLdhzN3UK7LFK5AQVmEYlyyWzMRgwOSIZScnE6Glt1iUtUS+o8k/UJbXf+ui763Xt/y0X++Rhperm2iXY4U4wkxjQGc2Dbf2TLAqYCT7RC2SEiAQsRljwjBAYDSahQRAEACgUBkNGAF1HCpl5wxCYKgqG9v/ovveGiIlJFh9RFDEFdSrVnWhUYPGjB7qyWaVXZTWtFtkApYyBGFIqKZHihbQS0OHFnKYWLFhxuCdipZNf/msA9E7Db551Wj7tlH/I+1lSWVXMn//uAZNAAAscZ2vGGG5I4ASsfLYYECUhzb+SEcsDShCy89iRQolVBsPZyuH2p0NDaBVCWojk9chrY/epHtASw3P21mJXJoKHZhDn4KuSRWoOkdh54pSPvdd6RPMFCi48At9NdrvWFPdMzQ6xtpAEB8dFZOPiyCYGDhlWsGNtjACEA64tCeMAqWDUMne23VTUp+s5Xr//izbDWamG2Ixtw5Yp3V6hWWOMJpgnhcRQqRqXmBJr0daoEgEGJiI7g3GdhMM2SrqeRGrUhgSMgSHy7WtZxQwQQgQCBUTGVCx8Vrjseps0W1Lv5pH+PJpUndTM1sqgJqAjT3VCGqLsZJiENoKp59Y04tmnmaqy1yHxnVo12H28Ks2NWg3+139pKp9XXszEW7uqSRBNwHCRgZoBU8GsvjofliiHRAe1d/as5yMRTIj19+HS62dDDoOMLH3jkC4utzmYKg0rV0NKItOYFaKpU0z0R/tr/ploQ1Jn/+3Bk7IACrgzZ+eZKADTBKu89gwQI1FtdxiDOwOmGK7x2DBxIpY1A/WBUULAiHwYTqWvGb8TrNwXQtuYTH6ffbEu2ANq5sSgQQA1j+lHY71+tCmZpd3ZDKIkEkgKRUOg4GhcATAPCQAtEwnRJhISklQMlXpPGTjBIouscI6SIdNrjWjSVHC7b2qMkJSh5BTRZTK00rv7m9qtv//o5yqQGpCvRgCRcmbBo4jJQUniVS4oPs9mSCkKNNULiV2ld/xt4vUWa41L36OpS9NEOMJqFgcE7xGA0h4loZjPUGcCIwOiCO45PoRINzxanJRgwW4ChhMgzzFYd8RjoxIyKjZZFaVCUVOnmhVjvfg7USnmtCorSk82pSUzg1KkaGroMw/pNYh3dFZEkREQA4XbS2Kk04arcuxM76Kth//twZPEAAlAXWHnmGpA14SqePGkiCRxnYe0wYcDKhen5lIwwpIECR0NF1PvRuvUj720P+nOMOHvT/s9VWZSJWYWINmN3nxsCYBAAAFiJ6k4X6H0tyyfOK0zluw/ThRuC273RgQ2TxiPw9R6GDuxompY70jxdL54zSLyJ4ki4NpLDSP5oeGclyQNkXQQOm5UYFJA6YG5cJ5STRZCiYGU6utS69VJk1JUy6cSMUCigv9S9b6mqWaO5mZLOLZX/13/0zJamSRWgZwfZbLHXG24FGAAAAAAAA27zzUuvTsnls9ObxrZ6qc6GCpAAuAhMUYeEhsSdigYNB1Cun//xl3/i2Z7/8Uuao8c9X11u1e0lkVrTJBAAAAAgBTI0v0ToQo7PFbEL8ljMZkNM7WwvzLFQcVsePi7ky4i7xv/7YGT9gAIuCtV6CTBQPMFqbGEsBglYSVXUwwAAwYPp/p4AACqsTixnsJ+uSuTyleapCOeVTKKN5PjOrVsr0PZ4t25heKKDFnjzXnmnzqmf9Vpl7a2LZs+ex54keUXcMnVg4LipQ+z/4tze21kDEjggUkCIAAAAAAOpIBWEFC8jIuFpA1daKPXmRS2lvyafmMq6iw/CYMu5hBwqMPNWzxE+1oDFnbf3uchlgKNR/SAAuLL6wrf/11WKpYsXQICsMCrezN9JYbfC6XhniXsBoGn7yx6IoNcFdf/yuWgIOAAC8fQF+VBoDf9cTA0Rhr/+0bMqTEFNRTMuOTkuNaqqqqqqqqqqqv/7kGTvAAReVNX+YaQCQKFaXcwgAA7o2U2494AA+YzptyIgAKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7IGTsh3GUGM9nPGAAFAApxuWAAAAcATYAAAAoAwAmwAAABaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAAB/gAAACAAAD/AAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg=="
        },
        B1: {
            loopStart: .317,
            loopEnd: 1,
            gainRamp: .3,
            noteData: "
        },
        C1: {
            noteData: ""
        },
        D1: {
            loopStart: .221,
            loopEnd: 10.861,
            gainRamp: .5,
            noteData: "
        },
        E1: {
            noteData: "SUQzAgAAAAAQNVRUMgAABgB0eXBlAENPTQAAEABlbmdpVHVuUEdBUAAwAABURU4AAA0AaVR1bmVzIDEwLjcAQ09NAABoAGVuZ2lUdW5OT1JNACAwMDAwMDFCRSAwMDAwMDAwMCAwMDAwMEFGOSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwN0M5NyAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMABDT00AAIIAZW5naVR1blNNUEIAIDAwMDAwMDAwIDAwMDAwMjEwIDAwMDAwQUEwIDAwMDAwMDAwMDAwMDI5NTAgMDAwMDAwMDAgMDAwMDA0MTUgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwj/IKUMUoAACAEAAAIAcEg8prCxYsoXB8MFwfB94flAQD//B8Hz+D5/9Tv/4IHKjn//////UCAIAmD4fiAH///59FCnFnPIEASx4SCICzoaBoB3nj8nAuEWRfMMueVGfx409yMSziof/zz3Mkw/EWQDELj/HjT0MHo/JBYE4Wiv/nueffGQFhEKgiC7kJP/9j3Rj6u5hUWDiIVSByEoPjv/+xjTNv49LgVCEfiIPC0FJHSyRh/////n/7ozf7Y0cqIceOLY6PLMchOaafz0sVdgMgKMkJu7gb76S01JD8soiG7u7nnYVDgYGBixCIEAABCdEABCIVcv/+2DAE4AN+XlqnDGAAfi0rfAxmbiFET0CBAAQACER9ET69cOBiziCBYcDdw4s+uf+Xwv4iO4t3c3dEQv/d3dz//JC/d3Ov7oiJ+7ohaBBCBkTnyjtuooCAIfz4PhhMqAkIgAAY6lcQxonXLdDb9CY2FZmzNhgGAwEKS3qwwoCAgKhmM+qvkf3NmWqtzZmTiW07ttGovzgqqrJyn9VRs/P/5qq1qqt85/+//fP///6qm2nfv5yvW1Xqt9luCkSIKEmEYLw6zUSICJAwCJBRI443HRncdyR28OkRz8qEqAURIAAkJ1M8hW+/vnddIVxGkNCc0mGNIhJiHMmYTcaCyCQLHCdc0X/+2DAFIAM3Y1ngwRtwX6r7GwxjbmsuqCaa5K7FMz4JLdz6SQrN2naUyZyWlQ5NhCy2Utq5KBGZkG5xpc+6Z7RTwYYWqRAByZxMFmdvzGjnpW31BKVKImAYPLOMVyBN3r9OqXDtL6oKM7mz3ULGZT9RKoTjNqHYGbpGFFoauMynUFND+o5ul0EwmQ85aRnvO7NHOEX3Z/bW5GSubGWSqUdrY523PnJQTJqxsQETrxO1W8pwC+lYAAAgQ4soyapCIoZsZZcJG+t1sLGChwSAoPdCu53VzPYKDFic6jWNRPG0vbNRuJUa6bGHd8mWVDP7Knd+VWNRXuan9u/3tlbvq/Gtm9sdsz/+2LAKQAN8ZFdIYzNycQt6tBTGbhu9m+m+41Rtd/5SpC5Kfc77p2vM/bmMZ201p6X3ZHABKKIQoLUee0t9yrxpm4ip5uakvahKzieP87QWxNWpNJ1l61IQIzMEl1rRqSRqiLZz0ctxVAxBW6YSNxE7PL3D7qDzOQhTtSRaN2rx3bsyNJs75k7HzWy8hox7+7PqZbMrK9vuYySWttFnxRSMibQoCIQ4ikAKGNxCPpvrTev+WzPnQTB2+3Zh1pvZXemRZnAhIrGFZV2C7BAo6hoYIlJ0XEA0IghnsQGpKFS5nP/LJCurwOTI46VOtNVIl+dDRDHPkhk/kR5kmFcQY8Mwqnt0yoo//tgwDEADRF9VWMMbcGtLupwMw25iYKPLx7ulGospEgAAQTGoJmVU45bS7y+/u/r3a++9Jw2trYrJL8U2YjOPfSfbppM1F02FxlRnQGIMGJww5qmg4ZgxsFGMCqxeGVz065hCC1iBCeW+TdZaeeuRcVy+/TM4VsUFtFde2zgeypIdAZsdZbILTYAAAphIdwQdwyo4o68hQ7qkI4yGb0dLAwH5uOqTiVIG57yVWPc2zIIOKkfZjkAKiiMQIiUXulJEPd7NVTRjpR9LcFXMrcDmt8QjjtjJbprTtRuz9Oz90EAqAzbRgSGHFy8jRWSJp1n+fgI///7//9bwVmASTPxY4Zc/HSz//tgwD8ADikZTIGNC4m/MGngYY24MwnTzCyGu9Yyck2tZiptQp1TCvFlCidCoMmjakajR7AiOEzVyKFoKcuVGnnC3PbyZfO5xkBPb3z0Tu63p5U3G8/hEgSFX/I0amRtAgIQ4w4xuhiEHGBoSBYPNFlNC5dhyu/rHgKUAACETMcGyfNZvF3f0ja57diJ60zl4cNfJOGhUVDXUFiUyasSUpsSBX6KF6hVCBXMFRyiGI5mY86xmq+aetWbNVspXLIvMus2eXKKbi5xtmM/+hRNNnypQKpZ5YFQdJl1Mrf5VbtP/WyAIAAihCZxFni8Wah9IiIstbwjy09EzcE0QUqhiwBmCcrG//tgwEaADU1zSySMbcGdq+igYY25DDg6zBHJHUGqYcQKwtZBdojCwyG2IEJzbCm6Q1dieuVLNqa1XipqvOl9OkfhYR6FStKoG1LdcylC3ZgjkuItc0bZoL+sCwFBIIAAMGEIQVCu17xXlEvU8qVZtNV3PFEZI5ZgqhodqlSqzzXGJL2Czh/SjdNxylubEpK0826UvlJPePO7/rvNb6i47PfeHlu+7uV9/8Vv3Hr7OYzVznnf234+zXSmlBgXrXmaZqVV9ypwSgACEgtcbK+f2z9lh3Cnml+g2DueeFpE4ALCLqu2XjdpsblvrKrJMwpQDRZAxR4TzEgqrhvW0jN1emJHGtkU//tiwFWADV1jQ4QMzcnCoOegwZlwil5y9g3O3LefuyzbTmqhIgCwXuJFnGmCrgtkUSbHnB5oSDQMgLkw+mEQOaKuT1/+sAUTAiAAAFsBiuYLr9l8VrfWfKZM7JM9lNR62QIs+L1KhzK07MyIYaKEEmIaHQsNCpQcj1YgxqzIJqrT4eMYVTpMaHV7ek9KnM9K/PO0l4xNmYPjcWqq5HlSYNqwNdkVRuqrUjVydnhqRIKY1IQeQTyBRQAACjZGqpcSK6CgJcW/+lI71TzsJrRBVHzITUHa9IKRpDjZwKrRwVUyCNcNGB5KCMdaJnWdWNSvBKhyJgpqbIeX0157PtrmDL9jaHZ3M//7YMBgAA3NnzuGFG3JpzPmcPGNuCgZ7qSHNtSNykLVUVS1P2/Yy8v43n/wUwAsIAADA2huHmwtylq3M3zr197UyqzXDKqyajZL1Vuj6Uqs0rydaMijLFgdFR1PigIGKbQXQE1DqS7arRgzCQEkFnqJyAu6oxNY3VZjaiWZjmuyz8mpL3VQxqdXKbZMa/xrV+VYXl3P/2PUmP86JAgiBDdjakJA7w6W6dqcq6rmuJbcc/8pXGOSWRTITABhUKkRCwAwmEI6uGQWietNvOSSDWNatW0XNKhxNhxHW21OTExhW0JSNbxVJpTAKaCUqkrASJ1Wmya49y4OS1uPTK1MZLYrNGUZyf/7YMBrgA25nSUHoG3CFZ3iNPSxcIrTqMkHQVcoq4SlSKnljwlBWSzwcEoKxK///w6AOvBkDQKJRQMEomahSIwb9FRSgvGrgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7YMBpgAEECt4NpEAIF4EbwaMAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7YMDagACECN4MDAAADADbwQCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="
        },
        F1: {
            noteData: ""
        },
        G1: {
            noteData: ""
        },
        A2: {
            gainRamp: 1,
            noteData: ""
        },
        B3: {
            loopStart: 0,
            gainRamp: .3,
            noteData: ""
        },
        C2: {
            loopStart: .03,
            loopEnd: 1.4,
            gainRamp: .3,
            noteData: ""
        },
        D2: {
            loopStart: .129,
            loopEnd: 8.157,
            gainRamp: .5,
            noteData: ""
        },
        E2: {
            loopStart: 0,
            gainRamp: 0,
            noteData: "
        },
        F2: {
            loopStart: 0,
            gainRamp: 0,
            noteData: ""
        },
        G2: {
            loopStart: 0,
            gainRamp: 0,
            noteData: ""
        },
        A3: {
            loopStart: 0,
            gainRamp: 0,
            noteData: "
        },
        B4: {
            loopStart: 0,
            loopEnd: 1.78,
            gainRamp: 0,
            noteData: "
        },
        C3: {
            loopStart: 0,
            gainRamp: 0,
            noteData: "
        },
        D3: {
            loopStart: 0,
            gainRamp: 0,
            noteData: ""
        },
        E3: {
            noteData: "SUQzBAAAAAAAIlRTU0UAAAAOAAADTGF2ZjU3LjAuMTAwAAAAAAAAAAAAAAD/+1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYaW5nAAAADwAAACkAABaQAA0NJCQyMjI8PEdHR09PWFhYYmJqanFxcXV1enp6fn6Dg4OIiIyMjJGRlZWampqfn6Ojo6iora2tsbG2trq6ur+/xMTEyMjNzc3R0dbW1tvb39/k5OTo6O3t7fLy9vb2+/v//wAAAABMYXZjNTcuMC4AAAAAAAAAAAAAAAAkAAAAAAAAAAAWkDCbQjYAAAAAAAAAAAAAAAAAAAAA//sQZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEAoFAAAAAFAoEAoEAAA9fr////7q5n/mGN//3uhn/+zmME57///hOKBIALEuDwaGf/9BGY7w8tHtGhFa7zRttApBtAGT/+6BkIgAAAABpBQAACAAADSCgAAEGPP1NuBOAAAAANIMAAAAcaydEHm+6WTmOVP8njEqgUapF5wzDrusmaesSEZ3pVHotGdMzUqm9Vo7Kc5icsIsOumImkbA0j+kpIclrlz0GwWzROt/5QzJdljDGl3SSbetU1mWFtJxsil6a6IGVqmq71SXK37/KmLjITEoQOIlE3VjKAdS+3XtxKtVpKncdU9XCrb5x/X/lDOH0eRBeTwhWOdosMO65ql1l9P9rnc95a5qH43Us3aCiy3UtYy//uZT2Gt44cqb1z/t8x5lzK90A207vbUyy6WVBJWdAQgFAdDzLQsYLk6AUFkKvO37dU1u70aMk8KjjcEREGTghCKAYdVeWEajpt5gUqMGqL1qLEHxoxLDJ1rwwoSyV1wIrra73Zq2iid/rrKc41YgEiWWyqtGo8Urk46MEU0RLcqfdE1/1CLrmubhCeu5mczty/LJYIJ0qcJCq7BXUl7C/+1OJ23FDnaohWSS4GzJYgxSh9zwQ05CTmP7+yIRIkkgAVSlErHjqJPEwA6FS0qKG1rcrFcLYV3bXvr6jmI9n3+uw2pVxYZxIQxGmQg0hh2BHk5/lel/a7nT3AyioRISVFguVIi4oCEWOLmdG1xRazaXX7WuLPUoDy5pEYRbVrO+9qWUUJQAvk8cloJryKhQTCDiyABCRQVL/+3Bk/AAGnWNYfj8oAgAADSDAAAAKZElp/JMAAAAANIOAAARp1FrNKOk3UY1UlkNIzWmqZW7UIKCB8nCC3/Wv6Rq0Uagf9jv/szvLJukt34pw2fTqKm67rfu/06tleWbv355rN78p/c1f3zwYgAAACOOIDi4DTQgGCchBBDBCF5owLKwESSOIQQbu574GCGwgLCAiUWUZAZZuZmSj+Rc5CYnplQrQuO9PdLC0uEjx+rTvvRjR8rB7BAjTYhxbMSzgq+89AB/53gfbrafnWs/PRo39zadCJRECFpMBIBiACRGH2wYbA5MExGvJN6f21bcSrr0tJRJkStEMuxTyogea3b61jAAZsuSG78o9rjENsCaUWfFXX+o32x7xLHrq3C2Z13Ty6EqIjOCYIGQRZHRQPskizPe8eVTE//tQZPMA8oge2vmDNEAAAA0gAAABDKSta+ewZ8AAADSAAAAEAKhEFRYKKWlrmruJOVsEglPEyNaTJYbqU29ZFATEobHvHlvsEd5518FVNc7u373pe5dS6p7sutvFOyIIlIuUfBqO5UBwzdL611qEvQPPsna1pJafINGQsUECy4iD4FF7jRJerSxoHOkQCHSZ8yggae8FBq1uhLShjXq1193av12fM0XnXObdQl1hASJ6PhyMjGkgiaUQuBER8SqRKBxQlo6E53xsmvrmFsnB5P/7YGTtgPLxHdtxhhniAAANIAAAAQ0ZA2vGJGNIAAA0gAAABDXx00HY1JpYqMIAjaUeQoaUASWh4Hm1w4IBlCoqxtxcTuWRMsEJtQxIxAwYcCMzKCr65JSNbPRVvv7+vLp/qwUnZyjHarSwq1Hq8ao2RRGCyAcbkqyqFTwhPkTpoNrLKAizwGBu6pbvqiiab4wsdbVtXFOT/v3txv+gBPe+Ydrne2+urh9qwkpM2YCXEN2Lx9rblDA+RkryYnkjajiAKAARIXVbhZTGMKZ8Drb8WXZIW4JhEmGSYXvEhhkgMYSjHD0LSgwq2jJHum56Pu6Ves2Xh5VrIgSnYRkACQioSw09lP/7QGT6gPJ3HV1xaRhwAAANIAAAAQmMJ3fEpSSAAAA0gAAABIiEyZY2EnJFD5VRUiDpJR4akFAqt+EgZ5UCkdvGDB50O/b1D/w7PCKIq3edUEv+uW1qfErpMBWIdnREjKJToZGyVlAaJAsJ0yNJkFZLkjGYjAwzEpSFmRQnDESu4R/ul9kdTY7SrewXhOSOOeRYokSGNI2RcMy1HozpUtaDTNYIq5eJpkjSBCYBYmBNCdYaAMfG//tQZPWA8nUR33mBHBAAAA0gAAABDBCHgeekxMAAADSAAAAEUJLEQxXZJYNNrezUvY6vp32DWar5rwu1Dyhe1Hv35WEHEk2I1R4SSKf12rbm52Xv0pr+/9d+ndVnu3lLs7UfWy6QJoAAqsAZExC7kZBQkiRjJk1FFvFl1PCopg4KfaFbxXwv/woZl537yO/EUcKyxN/zjv/4VUxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUAAAaARLSpMQU1FM//7UGTzgPI6C+H56QHAAAANIAAAAQnIVYfsJGcAAAA0gAAABC45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+0Bk/oDyRAvf+YkxMAAADSAAAAEJLIVj5IxPAAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7MGT+gPJ8KVf5IxRaAAANIAAAAQccL02khMKIAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGThD/AxAkyoyQAIAAANIAAAAQAAAf4AAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqTEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpMQU1FMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq"
        },
        F3: {
            noteData: ""
        },
        A4: {
            noteData: ""
        },
        C4: {
            noteData: "
        }
    }
}
, function(A, e) {
    A.exports = ["#930c23", "#ce1515", "#ff5b45", "#007c5b", "#00aa71", "#27e28d", "#d18643", "#ffffff", "#bf4c0c", "#ed7600", "#ff9e1f", "#0b7199", "#1e9ec1", "#25dae8", "#b56835", "#b8b3bc", "#cc8800", "#f2c300", "#ffe131", "#161d93", "#243ad3", "#2473ff", "#994d2b", "#7b747f", "#568700", "#8ebc00", "#d8ff36", "#631782", "#9a22af", "#e52ee1", "#75311f", "#3d3a3f", "#0c910c", "#33c116", "#7cfc29", "#a8188d", "#d82b9a", "#ff52a1", "#5b251a", "#000000"]
}
, function(A, e) {
    "use strict";
    var t = {
        createTarget: function(A) {
            this._targets = this._targets || [];
            var e = this._getTargetMap(A);
            e.target || (A.addEventListener = this._getEventMethod(A, "_addEvent").bind(this),
            A.removeEventListener = this._getEventMethod(A, "_removeEvent").bind(this),
            A.dispatchEvent = this._getEventMethod(A, "_dispatchEvent").bind(this),
            e.target = A,
            this._targets.push(e))
        },
        _getTargetMap: function(A) {
            return this._targets.filter(function(e) {
                return e.target === A
            })[0] || {}
        },
        _addEvent: function(A, e, t, n, r) {
            "boolean" != typeof n && (r = n,
            n = null),
            n = n || !1;
            var o = this.getNested(this._getTargetMap(A), e);
            o || (o = this.setNested(this._getTargetMap(A), e, []));
            var i = {
                listener: t,
                context: r,
                useCapture: n
            };
            o.indexOf(i) === -1 && o.push(i)
        },
        _getEventMethod: function(A, e) {
            return function() {
                var t = Array.prototype.slice.call(arguments, 0);
                t.unshift(A),
                this[e].apply(this, t)
            }
            .bind(this)
        },
        _removeEvent: function(A, e, t) {
            var n = this.getNested(this._getTargetMap(A), e, []);
            n.forEach(function(A, e) {
                A.listener === t && n.splice(e, 1)
            })
        },
        _dispatchEvent: function(A, e, t) {
            var n, r = this._getTargetMap(A) || {};
            r[e] && r[e].forEach(function(r) {
                n = this._createEvent(e, t),
                r.listener.call(r.context || A, n)
            }
            .bind(this))
        },
        _createEvent: function(A, e) {
            var t = document.createEvent("CustomEvent");
            return t.initCustomEvent(A, !1, !1, e),
            t
        },
        extend: function(A) {
            var e, t, n = A;
            for (t = 1; t < arguments.length; t++) {
                e = arguments[t];
                for (var r in e)
                    e.hasOwnProperty(r) && (n[r] = e[r])
            }
            return n
        },
        getNested: function(A, e, t) {
            for (var n = e.split("."), r = A, o = 0; o < n.length; o++) {
                if (!r[n[o]]) {
                    r = t;
                    break
                }
                r = r[n[o]]
            }
            return r
        },
        setNested: function(A, e, t) {
            for (var n = e.split("."), r = A, o = 0; o < n.length; o++) {
                var i = o === n.length - 1;
                i ? r[n[o]] = t : (r[n[o]] = r[n[o]] || {},
                r = r[n[o]])
            }
            return t
        },
        destroyTarget: function(A) {
            var e = this._getTargetMap(A)
              , t = this._targets.indexOf(e);
            t > -1 && this._targets.splice(t, 1)
        }
    };
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        return null == A ? void 0 === A ? u : a : l && l in Object(A) ? o(A) : i(A)
    }
    var r = t(261)
      , o = t(664)
      , i = t(665)
      , a = "[object Null]"
      , u = "[object Undefined]"
      , l = r ? r.toStringTag : void 0;
    A.exports = n
}
, function(A, e) {
    (function(e) {
        var t = "object" == typeof e && e && e.Object === Object && e;
        A.exports = t
    }
    ).call(e, function() {
        return this
    }())
}
, function(A, e, t) {
    var n = t(666)
      , r = n(Object.getPrototypeOf, Object);
    A.exports = r
}
, function(A, e, t) {
    function n(A) {
        var e = i.call(A, u)
          , t = A[u];
        try {
            A[u] = void 0;
            var n = !0
        } catch (A) {}
        var r = a.call(A);
        return n && (e ? A[u] = t : delete A[u]),
        r
    }
    var r = t(261)
      , o = Object.prototype
      , i = o.hasOwnProperty
      , a = o.toString
      , u = r ? r.toStringTag : void 0;
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return r.call(A)
    }
    var n = Object.prototype
      , r = n.toString;
    A.exports = t
}
, function(A, e) {
    function t(A, e) {
        return function(t) {
            return A(e(t))
        }
    }
    A.exports = t
}
, function(A, e, t) {
    var n = t(662)
      , r = "object" == typeof self && self && self.Object === Object && self
      , o = n || r || Function("return this")();
    A.exports = o
}
, function(A, e) {
    function t(A) {
        return null != A && "object" == typeof A
    }
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function r(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function o(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.ATSound = void 0;
    var i = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , a = t(24)
      , u = t(266)
      , l = t(262);
    e.ATSound = function(A) {
        function e(A) {
            n(this, e);
            var t = r(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A));
            t.tag = l.AudioTag.tags.obtain(),
            t.tag.src = t.note.noteData;
            var o = a.MIDI.currentTime - t.startTime;
            if (o) {
                var i = function A() {
                    t.tag.currentTime < o && (t.tag.currentTime = o),
                    t.tag.play(),
                    t.tag.removeEventListener("loadedmetadata", A)
                };
                t.tag.addEventListener("loadedmetadata", i)
            }
            return t
        }
        return o(e, A),
        i(e, [{
            key: "updateProperty",
            value: function(A) {
                switch (A) {
                case "mute":
                    (a.MIDI.mute || this.channel.mute) && (this.tag.volume = 0);
                    break;
                case "volume":
                    var e = a.MIDI.volume / 127 * (this.channel.volume / 127) * (this.velocity / 127);
                    this.tag.volume = e
                }
            }
        }, {
            key: "stop",
            value: function() {
                this.tag.pause(),
                l.AudioTag.tags.release(this.tag)
            }
        }]),
        e
    }(u.Sound)
}
, function(A, e) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var t = e.FastTimer = {
        timers: [],
        running: !1,
        attach: function() {
            t.running = !0,
            t.tick()
        },
        detach: function() {
            t.running = !1
        },
        tick: function() {
            for (var A = 0; A < t.timers.length; A++)
                t.timers[A]();
            t.running && setTimeout(t.tick, 0)
        },
        start: function(A) {
            return t.timers.push(A),
            {
                stop: function() {
                    t.stop(A)
                }
            }
        },
        stop: function(A) {
            var e = t.timers.indexOf(A);
            e > -1 && t.splice(e, 1)
        }
    }
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.ObjectPool = void 0;
    var o = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , i = t(270);
    n(i),
    e.ObjectPool = function() {
        function A(e, t) {
            r(this, A),
            this.objects = [],
            this.objectConstructor = t,
            Object.defineProperty(this, "size", {
                writeable: !1,
                get: function() {
                    return this.objects.length
                }
            });
            for (var n = 0; n < e; n += 1) {
                var o = t();
                this.objects.push(o)
            }
        }
        return o(A, [{
            key: "obtain",
            value: function() {
                return this.objects.length ? this.objects.pop() : this.objectConstructor()
            }
        }, {
            key: "release",
            value: function(A) {
                this.objects.push(A)
            }
        }, {
            key: "drain",
            value: function() {
                this.objects = []
            }
        }]),
        A
    }()
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        if (Array.isArray(A)) {
            for (var e = 0, t = Array(A.length); e < A.length; e++)
                t[e] = A[e];
            return t
        }
        return Array.from(A)
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.JobCollection = void 0;
    var i = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , a = t(2)
      , u = n(a)
      , l = t(270)
      , c = n(l)
      , s = t(21);
    (0,
    u.default)("MIDI.js:src/JobCollection.js"),
    e.JobCollection = function() {
        function A() {
            o(this, A),
            this.jobs = new Set,
            this.jobMetadata = new WeakMap,
            this.completedJobs = new Set
        }
        return i(A, [{
            key: "track",
            value: function(A) {
                for (var e = this, t = arguments.length, n = Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
                    n[r - 1] = arguments[r];
                this.jobs.add(A),
                this.jobMetadata.set(A, {
                    status: "pending",
                    tags: n
                }),
                A.then(function() {
                    e.jobs.delete(A),
                    e.completedJobs.add(A),
                    e.jobMetadata.get(A).status = "resolved"
                }).catch(function(t) {
                    e.jobMetadata.get(A).status = "rejected: " + t
                })
            }
        }, {
            key: "wait",
            value: function() {
                var A = this
                  , e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                  , t = e.except || [];
                Array.isArray(t) || (t = [t]);
                var n = Array.from(this.jobs.values()).filter(function(e) {
                    var n = A.jobMetadata.get(e)
                      , r = n.tags;
                    return !t.some(function(A) {
                        return r.indexOf(A) !== -1
                    })
                });
                return n.length ? Promise.all(n).then(function() {
                    return A.wait({
                        except: t
                    })
                }) : Promise.resolve()
            }
        }, {
            key: "dump",
            value: function() {
                var A = this
                  , e = function(e) {
                    return (0,
                    s.map)(e, function(e) {
                        var t = A.jobMetadata.get(e)
                          , n = t.status
                          , r = t.tags;
                        return {
                            status: n,
                            tags: r.join(", ")
                        }
                    })
                };
                c.default.apply(void 0, r(e(this.jobs)).concat(r(e(this.completedJobs))))
            }
        }, {
            key: "flushCompletedJobs",
            value: function() {
                this.completedJobs.clear()
            }
        }]),
        A
    }()
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function o(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.Note = e.Program = e.programs = void 0;
    var i = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(A) {
        return typeof A
    }
    : function(A) {
        return A && "function" == typeof Symbol && A.constructor === Symbol && A !== Symbol.prototype ? "symbol" : typeof A
    }
      , u = t(114)
      , l = t(73)
      , c = t(116)
      , s = n(c)
      , p = e.programs = [];
    p.load = function(A) {
        var e = A.programID
          , t = void 0 === e ? 0 : e
          , n = A.program
          , r = A.onProgress
          , o = void 0 === r ? u.MIDI.onProgress : r
          , i = u.MIDI.jobs.wait({
            except: "load program"
        })
          , l = new Promise(function(A, e) {
            i.then(function() {
                switch ("undefined" == typeof n ? "undefined" : a(n)) {
                case "string":
                    var r = n.replace(/%FORMAT/g, u.MIDI.format);
                    return u.MIDI.fetch({
                        URL: r,
                        onProgress: o,
                        format: "json"
                    }).then(function(e) {
                        var n = new f(e);
                        u.MIDI.programs[t] = n,
                        p.onLoad.trigger(t, n, e),
                        A({
                            programID: t,
                            program: n,
                            programData: e
                        })
                    }).catch(e);
                case "object":
                default:
                    var i = new f(n);
                    console.log("PROGRAM", i),
                    u.MIDI.programs[t] = i,
                    p.onLoad.trigger(t, i, n),
                    A({
                        programID: t,
                        program: i,
                        programData: n
                    })
                }
            })
        }
        );
        return u.MIDI.jobs.track(l, "load program"),
        l
    }
    ,
    p.onLoad = (0,
    s.default)();
    var f = e.Program = function A(e) {
        o(this, A),
        this.metadata = {},
        this.notes = [];
        for (var t in e)
            switch (t) {
            case "__METADATA":
                this.metadata = e[t];
                break;
            default:
                var n = l.GM.note[t].noteID
                  , r = e[t]
                  , i = new g(n,r);
                this.notes[n] = i
            }
    }
      , g = e.Note = function() {
        function A(e, t) {
            o(this, A),
            "string" == typeof t && (t = {
                noteData: t
            }),
            this.noteID = e;
            var n = t
              , i = (n.gainRamp,
            r(n, ["gainRamp"]));
            Object.assign(this, i),
            this.note = t
        }
        return i(A, [{
            key: "gainRamp",
            get: function() {
                return this.note.gainRamp || 0
            }
        }]),
        A
    }()
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function r(A, e) {
        return new Promise(function(t) {
            var n = function() {
                return t(!0)
            }
              , r = function() {
                return t(!1)
            };
            setTimeout(r, 5e3),
            A.understands(e).then(function(A) {
                return A ? n() : r()
            }).catch(r)
        }
        )
    }
    function o(A) {
        var e = s.map(function(e) {
            var t = e.sample
              , o = n(e, ["sample"]);
            return r(A, a({
                sample: t
            }, o)).then(function(A) {
                return a({}, o, {
                    understands: A
                })
            })
        });
        return Promise.all(e).then(function(e) {
            return {
                SoundModule: A,
                tests: e
            }
        })
    }
    function i() {
        var A = [c.WebMIDI, l.AudioTag, u.WebAudio].filter(function(A) {
            return A.isSupported()
        }).map(o);
        return Promise.all(A).then(function(A) {
            return Object.defineProperty(A, "best", {
                value: function() {
                    return A[A.length - 1]
                }
            }),
            A
        })
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
    ;
    e.support = i;
    var u = t(268)
      , l = t(263)
      , c = t(269)
      , s = [{
        container: "mpeg",
        codec: "mp3",
        sample: "//MUxAAB6AXgAAAAAPP+c6nf//yi/6f3//MUxAMAAAIAAAjEcH//0fTX6C9Lf//0//MUxA4BeAIAAAAAAKX2/6zv//+IlR4f//MUxBMCMAH8AAAAABYWalVMQU1FMy45//MUxBUB0AH0AAAAADkuM1VVVVVVVVVV//MUxBgBUATowAAAAFVVVVVVVVVVVVVV"
    }, {
        container: "ogg",
        codec: "opus",
        sample: "T2dnUwACAAAAAAAAAAAAAAAAAAAAAEVP7KoBE09wdXNIZWFkAQEAD0SsAAAAAABPZ2dTAAAAAAAAAAAAAAAAAAABAAAAVewFUgEYT3B1c1RhZ3MIAAAAUmVjb3JkZXIAAAAAT2dnUwAEwAMAAAAAAAAAAAAAAgAAAHSiY8oBA/j//g=="
    }, {
        container: "ogg",
        codec: "vorbis",
        sample: "T2dnUwACAAAAAAAAAAD/QwAAAAAAAM2LVKsBHgF2b3JiaXMAAAAAAUSsAAAAAAAAgLsAAAAAAAC4AU9nZ1MAAAAAAAAAAAAA/0MAAAEAAADmvOe6Dy3/////////////////MgN2b3JiaXMdAAAAWGlwaC5PcmcgbGliVm9yYmlzIEkgMjAwNzA2MjIAAAAAAQV2b3JiaXMfQkNWAQAAAQAYY1QpRplS0kqJGXOUMUaZYpJKiaWEFkJInXMUU6k515xrrLm1IIQQGlNQKQWZUo5SaRljkCkFmVIQS0kldBI6J51jEFtJwdaYa4tBthyEDZpSTCnElFKKQggZU4wpxZRSSkIHJXQOOuYcU45KKEG4nHOrtZaWY4updJJK5yRkTEJIKYWSSgelU05CSDWW1lIpHXNSUmpB6CCEEEK2IIQNgtCQVQAAAQDAQBAasgoAUAAAEIqhGIoChIasAgAyAAAEoCiO4iiOIzmSY0kWEBqyCgAAAgAQAADAcBRJkRTJsSRL0ixL00RRVX3VNlVV9nVd13Vd13UgNGQVAAABAEBIp5mlGiDCDGQYCA1ZBQAgAAAARijCEANCQ1YBAAABAABiKDmIJrTmfHOOg2Y5aCrF5nRwItXmSW4q5uacc845J5tzxjjnnHOKcmYxaCa05pxzEoNmKWgmtOacc57E5kFrqrTmnHPGOaeDcUYY55xzmrTmQWo21uaccxa0pjlqLsXmnHMi5eZJbS7V5pxzzjnnnHPOOeecc6oXp3NwTjjnnHOi9uZabkIX55xzPhmne3NCOOecc84555xzzjnnnHOC0JBVAAAQAABBGDaGcacgSJ+jgRhFiGnIpAfdo8MkaAxyCqlHo6ORUuoglFTGSSmdIDRkFQAACAAAIYQUUkghhRRSSCGFFFKIIYYYYsgpp5yCCiqppKKKMsoss8wyyyyzzDLrsLPOOuwwxBBDDK20EktNtdVYY62555xrDtJaaa211koppZRSSikIDVkFAIAAABAIGWSQQUYhhRRSiCGmnHLKKaigAkJDVgEAgAAAAgAAADzJc0RHdERHdERHdERHdETHczxHlERJlERJtEzL1ExPFVXVlV1b1mXd9m1hF3bd93Xf93Xj14VhWZZlWZZlWZZlWZZlWZZlWYLQkFUAAAgAAIAQQgghhRRSSCGlGGPMMeegk1BCIDRkFQAACAAgAAAAwFEcxXEkR3IkyZIsSZM0S7M8zdM8TfREURRN01RFV3RF3bRF2ZRN13RN2XRVWbVdWbZt2dZtX5Zt3/d93/d93/d93/d93/d1HQgNWQUASAAA6EiOpEiKpEiO4ziSJAGhIasAABkAAAEAKIqjOI7jSJIkSZakSZ7lWaJmaqZneqqoAqEhqwAAQAAAAQAAAAAAKJriKabiKaLiOaIjSqJlWqKmaq4om7Lruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7rui4QGrIKAJAAANCRHMmRHEmRFEmRHMkBQkNWAQAyAAACAHAMx5AUybEsS9M8zdM8TfRET/RMTxVd0QVCQ1YBAIAAAAIAAAAAADAkw1IsR3M0SZRUS7VUTbVUSxVVT1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTVN0zRNIDRkJQAABADAYo3B5SAhJSXl3hDCEJOeMSYhtV4hBJGS3jEGFYOeMqIMct5C4xCDHggNWREARAEAAMYgxxBzyDlHqZMSOeeodJQa5xyljlJnKcWYYs0oldhSrI1zjlJHraOUYiwtdpRSjanGAgAAAhwAAAIshEJDVgQAUQAAhDFIKaQUYow5p5xDjCnnmHOGMeYcc44556B0UirnnHROSsQYc445p5xzUjonlXNOSiehAACAAAcAgAALodCQFQFAnACAQZI8T/I0UZQ0TxRFU3RdUTRd1/I81fRMU1U90VRVU1Vt2VRVWZY8zzQ901RVzzRV1VRVWTZVVZZFVdVt03V123RV3ZZt2/ddWxZ2UVVt3VRd2zdV1/Zd2fZ9WdZ1Y/I8VfVM03U903Rl1XVtW3VdXfdMU5ZN15Vl03Vt25VlXXdl2fc103Rd01Vl2XRd2XZlV7ddWfZ903WF35VlX1dlWRh2XfeFW9eV5XRd3VdlVzdWWfZ9W9eF4dZ1YZk8T1U903RdzzRdV3VdX1dd19Y105Rl03Vt2VRdWXZl2fddV9Z1zzRl2XRd2zZdV5ZdWfZ9V5Z13XRdX1dlWfhVV/Z1WdeV4dZt4Tdd1/dVWfaFV5Z14dZ1Ybl1XRg+VfV9U3aF4XRl39eF31luXTiW0XV9YZVt4VhlWTl+4ViW3feVZXRdX1ht2RhWWRaGX/id5fZ943h1XRlu3efMuu8Mx++k+8rT1W1jmX3dWWZfd47hGDq/8OOpqq+brisMpywLv+3rxrP7vrKMruv7qiwLvyrbwrHrvvP8vrAso+z6wmrLwrDatjHcvm4sv3Acy2vryjHrvlG2dXxfeArD83R1XXlmXcf2dXTjRzh+ygAAgAEHAIAAE8pAoSErAoA4AQCPJImiZFmiKFmWKIqm6LqiaLqupGmmqWmeaVqaZ5qmaaqyKZquLGmaaVqeZpqap5mmaJqua5qmrIqmKcumasqyaZqy7LqybbuubNuiacqyaZqybJqmLLuyq9uu7Oq6pFmmqXmeaWqeZ5qmasqyaZquq3meanqeaKqeKKqqaqqqraqqLFueZ5qa6KmmJ4qqaqqmrZqqKsumqtqyaaq2bKqqbbuq7Pqybeu6aaqybaqmLZuqatuu7OqyLNu6L2maaWqeZ5qa55mmaZqybJqqK1uep5qeKKqq5ommaqqqLJumqsqW55mqJ4qq6omea5qqKsumatqqaZq2bKqqLZumKsuubfu+68qybqqqbJuqauumasqybMu+78qq7oqmKcumqtqyaaqyLduy78uyrPuiacqyaaqybaqqLsuybRuzbPu6aJqybaqmLZuqKtuyLfu6LNu678qub6uqrOuyLfu67vqucOu6MLyybPuqrPq6K9u6b+sy2/Z9RNOUZVM1bdtUVVl2Zdn2Zdv2fdE0bVtVVVs2TdW2ZVn2fVm2bWE0Tdk2VVXWTdW0bVmWbWG2ZeF2Zdm3ZVv2ddeVdV/XfePXZd3murLty7Kt+6qr+rbu+8Jw667wCgAAGHAAAAgwoQwUGrISAIgCAACMYYwxCI1SzjkHoVHKOecgZM5BCCGVzDkIIZSSOQehlJQy5yCUklIIoZSUWgshlJRSawUAABQ4AAAE2KApsThAoSErAYBUAACD41iW55miatqyY0meJ4qqqaq27UiW54miaaqqbVueJ4qmqaqu6+ua54miaaqq6+q6aJqmqaqu67q6Lpqiqaqq67qyrpumqqquK7uy7Oumqqqq68quLPvCqrquK8uybevCsKqu68qybNu2b9y6ruu+7/vCka3rui78wjEMRwEA4AkOAEAFNqyOcFI0FlhoyEoAIAMAgDAGIYMQQgYhhJBSSiGllBIAADDgAAAQYEIZKDRkRQAQJwAAGEMppJRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkgppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkqppJRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoplVJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSCgCQinAAkHowoQwUGrISAEgFAACMUUopxpyDEDHmGGPQSSgpYsw5xhyUklLlHIQQUmktt8o5CCGk1FJtmXNSWosx5hgz56SkFFvNOYdSUoux5ppr7qS0VmuuNedaWqs115xzzbm0FmuuOdecc8sx15xzzjnnGHPOOeecc84FAOA0OACAHtiwOsJJ0VhgoSErAYBUAAACGaUYc8456BBSjDnnHIQQIoUYc845CCFUjDnnHHQQQqgYc8w5CCGEkDnnHIQQQgghcw466CCEEEIHHYQQQgihlM5BCCGEEEooIYQQQgghhBA6CCGEEEIIIYQQQgghhFJKCCGEEEIJoZRQAABggQMAQIANqyOcFI0FFhqyEgAAAgCAHJagUs6EQY5Bjw1BylEzDUJMOdGZYk5qMxVTkDkQnXQSGWpB2V4yCwAAgCAAIMAEEBggKPhCCIgxAABBiMwQCYVVsMCgDBoc5gHAA0SERACQmKBIu7iALgNc0MVdB0IIQhCCWBxAAQk4OOGGJ97whBucoFNU6iAAAAAAAAwA4AEA4KAAIiKaq7C4wMjQ2ODo8AgAAAAAABYA+AAAOD6AiIjmKiwuMDI0Njg6PAIAAAAAAAAAAICAgAAAAAAAQAAAAICAT2dnUwAE7AwAAAAAAAD/QwAAAgAAADuydfsFAQEBAQEACg4ODg=="
    }]
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.Pad = void 0;
    var r = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , o = t(24)
      , i = (t(21),
    t(73));
    e.Pad = function() {
        function A(e) {
            n(this, A),
            this.button2note = e
        }
        return r(A, [{
            key: "press",
            value: function(A) {
                if (A in this.button2note) {
                    var e = this.button2note[A]
                      , t = e.note
                      , n = e.channelID
                      , r = void 0 === n ? 0 : n
                      , a = e.requiresInteraction
                      , u = void 0 !== a && a;
                    if (t) {
                        var l = i.GM.note[t].noteID;
                        l && (o.MIDI.noteOn(r, t),
                        u && this.stopInteractingWith(A))
                    }
                }
            }
        }, {
            key: "release",
            value: function(A) {
                if (A in this.button2note) {
                    var e = this.button2note[A]
                      , t = e.note
                      , n = e.channelID
                      , r = void 0 === n ? 0 : n;
                    o.MIDI.noteOff(r, t)
                }
            }
        }, {
            key: "startInteractingWith",
            value: function(A) {
                if (A in this.button2note) {
                    var e = this.button2note[A].channelID
                      , t = void 0 === e ? 0 : e;
                    o.MIDI.channels[t].volume = 127
                }
            }
        }, {
            key: "stopInteractingWith",
            value: function(A) {
                if (A in this.button2note) {
                    var e = this.button2note[A].channelID
                      , t = void 0 === e ? 0 : e;
                    o.MIDI.channels[t].volume = 0
                }
            }
        }]),
        A
    }()
}
, function(A, e) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    e.ProgramInfo = {
        Piano: ["1 Acoustic Grand Piano", "2 Bright Acoustic Piano", "3 Electric Grand Piano", "4 Honky-tonk Piano", "5 Electric Piano 1", "6 Electric Piano 2", "7 Harpsichord", "8 Clavinet"],
        "Chromatic Percussion": ["9 Celesta", "10 Glockenspiel", "11 Music Box", "12 Vibraphone", "13 Marimba", "14 Xylophone", "15 Tubular Bells", "16 Dulcimer"],
        Organ: ["17 Drawbar Organ", "18 Percussive Organ", "19 Rock Organ", "20 Church Organ", "21 Reed Organ", "22 Accordion", "23 Harmonica", "24 Tango Accordion"],
        Guitar: ["25 Acoustic Guitar (nylon)", "26 Acoustic Guitar (steel)", "27 Electric Guitar (jazz)", "28 Electric Guitar (clean)", "29 Electric Guitar (muted)", "30 Overdriven Guitar", "31 Distortion Guitar", "32 Guitar Harmonics"],
        Bass: ["33 Acoustic Bass", "34 Electric Bass (finger)", "35 Electric Bass (pick)", "36 Fretless Bass", "37 Slap Bass 1", "38 Slap Bass 2", "39 Synth Bass 1", "40 Synth Bass 2"],
        Strings: ["41 Violin", "42 Viola", "43 Cello", "44 Contrabass", "45 Tremolo Strings", "46 Pizzicato Strings", "47 Orchestral Harp", "48 Timpani"],
        Ensemble: ["49 String Ensemble 1", "50 String Ensemble 2", "51 Synth Strings 1", "52 Synth Strings 2", "53 Choir Aahs", "54 Voice Oohs", "55 Synth Choir", "56 Orchestra Hit"],
        Brass: ["57 Trumpet", "58 Trombone", "59 Tuba", "60 Muted Trumpet", "61 French Horn", "62 Brass Section", "63 Synth Brass 1", "64 Synth Brass 2"],
        Reed: ["65 Soprano Sax", "66 Alto Sax", "67 Tenor Sax", "68 Baritone Sax", "69 Oboe", "70 English Horn", "71 Bassoon", "72 Clarinet"],
        Pipe: ["73 Piccolo", "74 Flute", "75 Recorder", "76 Pan Flute", "77 Blown Bottle", "78 Shakuhachi", "79 Whistle", "80 Ocarina"],
        "Synth Lead": ["81 Lead 1 (square)", "82 Lead 2 (sawtooth)", "83 Lead 3 (calliope)", "84 Lead 4 (chiff)", "85 Lead 5 (charang)", "86 Lead 6 (voice)", "87 Lead 7 (fifths)", "88 Lead 8 (bass + lead)"],
        "Synth Pad": ["89 Pad 1 (new age)", "90 Pad 2 (warm)", "91 Pad 3 (polysynth)", "92 Pad 4 (choir)", "93 Pad 5 (bowed)", "94 Pad 6 (metallic)", "95 Pad 7 (halo)", "96 Pad 8 (sweep)"],
        "Synth Effects": ["97 FX 1 (rain)", "98 FX 2 (soundtrack)", "99 FX 3 (crystal)", "100 FX 4 (atmosphere)", "101 FX 5 (brightness)", "102 FX 6 (goblins)", "103 FX 7 (echoes)", "104 FX 8 (sci-fi)"],
        Ethnic: ["105 Sitar", "106 Banjo", "107 Shamisen", "108 Koto", "109 Kalimba", "110 Bagpipe", "111 Fiddle", "112 Shanai"],
        Percussive: ["113 Tinkle Bell", "114 Agogo", "115 Steel Drums", "116 Woodblock", "117 Taiko Drum", "118 Melodic Tom", "119 Synth Drum"],
        "Sound effects": ["120 Reverse Cymbal", "121 Guitar Fret Noise", "122 Breath Noise", "123 Seashore", "124 Bird Tweet", "125 Telephone Ring", "126 Helicopter", "127 Applause", "128 Gunshot"]
    }
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(2)("MIDI.js:src/webaudio/AudioContext.js");
    e.AudioContext = {
        get: function() {
            var A = window.AudioContext || window.webkitAudioContext;
            if (A) {
                n("Creating new audio context");
                var e = new A;
                try {
                    var t = (e.createBuffer(1, 1, 44100),
                    e.createBufferSource());
                    t.detune.value = 1200,
                    e.hasDetune = !0
                } catch (A) {
                    n("Detune is not supported on this platform")
                }
                if (e.iOSUnlock = function() {
                    function A() {
                        if (e.unlocked !== !0) {
                            var t = e.createBuffer(1, 1, 44100)
                              , n = e.createBufferSource();
                            n.buffer = t,
                            n.connect(e.destination),
                            n.start(0),
                            n.addEventListener("ended", function() {
                                e.unlocked = !0,
                                document.removeEventListener("touchend", A, !0)
                            })
                        }
                    }
                    document.addEventListener("touchend", A, !0)
                }
                ,
                e.decodeAudioData.length > 1) {
                    n("Wrapping callback-style decodeAudioData");
                    var r = e.decodeAudioData;
                    e.decodeAudioData = function(A) {
                        return new Promise(function(t, n) {
                            r.call(e, A, t, n)
                        }
                        )
                    }
                }
                return e
            }
        }
    }
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function r(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function o(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.WASound = void 0;
    var i = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , a = t(24)
      , u = t(115)
      , l = t(267)
      , c = t(21)
      , s = t(73)
      , p = t(266);
    e.WASound = function(A) {
        function e(A) {
            n(this, e);
            var t = r(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, A))
              , o = t.channel.programID
              , i = l.buffers.get(o, t.noteID);
            t.volumeKnob = u.WebAudio.context.createGain(),
            t.volumeKnob.connect(u.WebAudio.context.destination),
            t.buffer = u.WebAudio.context.createBufferSource(),
            t.buffer.buffer = i,
            t.buffer.connect(t.volumeKnob),
            (0,
            c.forEach)(["loopStart", "loopEnd"], function(A) {
                var e = t.note[A];
                "undefined" != typeof e && (t.buffer[A] = e,
                t.buffer.loop = !0)
            });
            var p = Math.max(a.MIDI.currentTime - t.startTime, 0);
            t.buffer.start(t.startTime, p),
            a.MIDI.jobs.track(new Promise(function(A, e) {
                t.buffer.onended = A
            }
            ), "note", s.GM.note[t.noteID].keys[0]);
            for (var f = ["mute", "volume", "detune"], g = 0; g < f.length; g++) {
                var I = f[g];
                t.updateProperty(I)
            }
            return t
        }
        return o(e, A),
        i(e, [{
            key: "stop",
            value: function() {
                this.buffer.stop()
            }
        }, {
            key: "updateProperty",
            value: function(A) {
                var e = {
                    mute: function() {
                        (a.MIDI.mute || this.channel.mute) && (this.volumeKnob.gain.value = 0)
                    },
                    volume: function A() {
                        var A = a.MIDI.volume / 127 * (this.channel.volume / 127) * (this.velocity / 127);
                        this.volumeKnob.gain.cancelScheduledValues(a.MIDI.currentTime),
                        this.volumeKnob.gain.linearRampToValueAtTime(A, a.MIDI.currentTime + this.note.gainRamp)
                    },
                    detune: function() {
                        if (u.WebAudio.context.hasDetune) {
                            var A = (0,
                            c.clamp)(this.channel.detune, -1200, 1200);
                            this.buffer.detune.value = A
                        }
                    }
                }
                  , t = e[A];
                t && t.call(this)
            }
        }, {
            key: "scheduleFadeOut",
            value: function(A) {
                var e = this.note.gainRamp;
                A || (A = a.MIDI.currentTime),
                this.endTime = A,
                this.buffer.loop = !1,
                this.volumeKnob.gain.cancelScheduledValues(a.MIDI.currentTime),
                this.volumeKnob.gain.linearRampToValueAtTime(this.volumeKnob.gain.value, a.MIDI.currentTime),
                this.volumeKnob.gain.linearRampToValueAtTime(0, A + e),
                this.buffer.stop(A + e)
            }
        }]),
        e
    }(p.Sound)
}
, function(A, e) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    e.WebMIDI = {
        name: "WebMIDI",
        isSupported: function() {
            return navigator.requestMIDIAccess
        },
        understands: function() {
            return Promise.reject()
        }
    }
}
, function(A, e) {
    "use strict";
    function t(A, e) {
        for (var t = {}, n = Object.keys(e), r = 0; r < n.length; r++) {
            var o = n[r];
            t[o] = {
                value: e[o]
            }
        }
        Object.defineProperties(A, t)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.ezDefine = t
}
, function(A, e) {
    (function(e) {
        var t = e.performance || {}
          , n = function() {
            for (var A = ["now", "webkitNow", "msNow", "mozNow", "oNow"]; A.length; ) {
                var e = A.shift();
                if (e in t)
                    return t[e].bind(t)
            }
            var n = Date.now || function() {
                return (new Date).getTime()
            }
              , r = (t.timing || {}).navigationStart || n();
            return function() {
                return n() - r
            }
        }();
        n.performanceNow = t.now,
        n.noConflict = function() {
            t.now = n.performanceNow
        }
        ,
        n.conflict = function() {
            t.now = n
        }
        ,
        n.conflict(),
        A.exports = n
    }
    ).call(e, function() {
        return this
    }())
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        var e = new r(r._61);
        return e._81 = 1,
        e._65 = A,
        e
    }
    var r = t(271);
    A.exports = r;
    var o = n(!0)
      , i = n(!1)
      , a = n(null)
      , u = n(void 0)
      , l = n(0)
      , c = n("");
    r.resolve = function(A) {
        if (A instanceof r)
            return A;
        if (null === A)
            return a;
        if (void 0 === A)
            return u;
        if (A === !0)
            return o;
        if (A === !1)
            return i;
        if (0 === A)
            return l;
        if ("" === A)
            return c;
        if ("object" == typeof A || "function" == typeof A)
            try {
                var e = A.then;
                if ("function" == typeof e)
                    return new r(e.bind(A))
            } catch (A) {
                return new r(function(e, t) {
                    t(A)
                }
                )
            }
        return n(A)
    }
    ,
    r.all = function(A) {
        var e = Array.prototype.slice.call(A);
        return new r(function(A, t) {
            function n(i, a) {
                if (a && ("object" == typeof a || "function" == typeof a)) {
                    if (a instanceof r && a.then === r.prototype.then) {
                        for (; 3 === a._81; )
                            a = a._65;
                        return 1 === a._81 ? n(i, a._65) : (2 === a._81 && t(a._65),
                        void a.then(function(A) {
                            n(i, A)
                        }, t))
                    }
                    var u = a.then;
                    if ("function" == typeof u) {
                        var l = new r(u.bind(a));
                        return void l.then(function(A) {
                            n(i, A)
                        }, t)
                    }
                }
                e[i] = a,
                0 === --o && A(e)
            }
            if (0 === e.length)
                return A([]);
            for (var o = e.length, i = 0; i < e.length; i++)
                n(i, e[i])
        }
        )
    }
    ,
    r.reject = function(A) {
        return new r(function(e, t) {
            t(A)
        }
        )
    }
    ,
    r.race = function(A) {
        return new r(function(e, t) {
            A.forEach(function(A) {
                r.resolve(A).then(e, t)
            })
        }
        )
    }
    ,
    r.prototype.catch = function(A) {
        return this.then(null, A)
    }
}
, function(A, e, t) {
    "use strict";
    function n() {
        l = !1,
        a._10 = null,
        a._97 = null
    }
    function r(A) {
        function e(e) {
            (A.allRejections || i(s[e].error, A.whitelist || u)) && (s[e].displayId = c++,
            A.onUnhandled ? (s[e].logged = !0,
            A.onUnhandled(s[e].displayId, s[e].error)) : (s[e].logged = !0,
            o(s[e].displayId, s[e].error)))
        }
        function t(e) {
            s[e].logged && (A.onHandled ? A.onHandled(s[e].displayId, s[e].error) : s[e].onUnhandled || (console.warn("Promise Rejection Handled (id: " + s[e].displayId + "):"),
            console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + s[e].displayId + ".")))
        }
        A = A || {},
        l && n(),
        l = !0;
        var r = 0
          , c = 0
          , s = {};
        a._10 = function(A) {
            2 === A._81 && s[A._72] && (s[A._72].logged ? t(A._72) : clearTimeout(s[A._72].timeout),
            delete s[A._72])
        }
        ,
        a._97 = function(A, t) {
            0 === A._45 && (A._72 = r++,
            s[A._72] = {
                displayId: null,
                error: t,
                timeout: setTimeout(e.bind(null, A._72), i(t, u) ? 100 : 2e3),
                logged: !1
            })
        }
    }
    function o(A, e) {
        console.warn("Possible Unhandled Promise Rejection (id: " + A + "):");
        var t = (e && (e.stack || e)) + "";
        t.split("\n").forEach(function(A) {
            console.warn("  " + A)
        })
    }
    function i(A, e) {
        return e.some(function(e) {
            return A instanceof e
        })
    }
    var a = t(271)
      , u = [ReferenceError, TypeError, RangeError]
      , l = !1;
    e.disable = n,
    e.enable = r
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n, r) {}
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    var n = t(18)
      , r = t(5)
      , o = t(273);
    A.exports = function() {
        function A(A, e, t, n, i, a) {
            a !== o && r(!1, "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")
        }
        function e() {
            return A
        }
        A.isRequired = A;
        var t = {
            array: A,
            bool: A,
            func: A,
            number: A,
            object: A,
            string: A,
            symbol: A,
            any: A,
            arrayOf: e,
            element: A,
            instanceOf: e,
            node: A,
            objectOf: e,
            oneOf: e,
            oneOfType: e,
            shape: e
        };
        return t.checkPropTypes = n,
        t.PropTypes = t,
        t
    }
}
, function(A, e, t) {
    "use strict";
    var n = t(18)
      , r = t(5)
      , o = t(7)
      , i = t(273)
      , a = t(684);
    A.exports = function(A, e) {
        function t(A) {
            var e = A && (b && A[b] || A[v]);
            if ("function" == typeof e)
                return e
        }
        function u(A, e) {
            return A === e ? 0 !== A || 1 / A === 1 / e : A !== A && e !== e
        }
        function l(A) {
            this.message = A,
            this.stack = ""
        }
        function c(A) {
            function t(t, n, o, a, u, c, s) {
                if (a = a || R,
                c = c || o,
                s !== i)
                    if (e)
                        r(!1, "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    else
                        ;return null == n[o] ? t ? new l(null === n[o] ? "The " + u + " `" + c + "` is marked as required " + ("in `" + a + "`, but its value is `null`.") : "The " + u + " `" + c + "` is marked as required in " + ("`" + a + "`, but its value is `undefined`.")) : null : A(n, o, a, u, c)
            }
            var n = t.bind(null, !1);
            return n.isRequired = t.bind(null, !0),
            n
        }
        function s(A) {
            function e(e, t, n, r, o, i) {
                var a = e[t]
                  , u = V(a);
                if (u !== A) {
                    var c = E(a);
                    return new l("Invalid " + r + " `" + o + "` of type " + ("`" + c + "` supplied to `" + n + "`, expected ") + ("`" + A + "`."))
                }
                return null
            }
            return c(e)
        }
        function p() {
            return c(n.thatReturnsNull)
        }
        function f(A) {
            function e(e, t, n, r, o) {
                if ("function" != typeof A)
                    return new l("Property `" + o + "` of component `" + n + "` has invalid PropType notation inside arrayOf.");
                var a = e[t];
                if (!Array.isArray(a)) {
                    var u = V(a);
                    return new l("Invalid " + r + " `" + o + "` of type " + ("`" + u + "` supplied to `" + n + "`, expected an array."))
                }
                for (var c = 0; c < a.length; c++) {
                    var s = A(a, c, n, r, o + "[" + c + "]", i);
                    if (s instanceof Error)
                        return s
                }
                return null
            }
            return c(e)
        }
        function g() {
            function e(e, t, n, r, o) {
                var i = e[t];
                if (!A(i)) {
                    var a = V(i);
                    return new l("Invalid " + r + " `" + o + "` of type " + ("`" + a + "` supplied to `" + n + "`, expected a single ReactElement."))
                }
                return null
            }
            return c(e)
        }
        function I(A) {
            function e(e, t, n, r, o) {
                if (!(e[t]instanceof A)) {
                    var i = A.name || R
                      , a = k(e[t]);
                    return new l("Invalid " + r + " `" + o + "` of type " + ("`" + a + "` supplied to `" + n + "`, expected ") + ("instance of `" + i + "`."))
                }
                return null
            }
            return c(e)
        }
        function d(A) {
            function e(e, t, n, r, o) {
                for (var i = e[t], a = 0; a < A.length; a++)
                    if (u(i, A[a]))
                        return null;
                var c = JSON.stringify(A);
                return new l("Invalid " + r + " `" + o + "` of value `" + i + "` " + ("supplied to `" + n + "`, expected one of " + c + "."))
            }
            return Array.isArray(A) ? c(e) : n.thatReturnsNull
        }
        function q(A) {
            function e(e, t, n, r, o) {
                if ("function" != typeof A)
                    return new l("Property `" + o + "` of component `" + n + "` has invalid PropType notation inside objectOf.");
                var a = e[t]
                  , u = V(a);
                if ("object" !== u)
                    return new l("Invalid " + r + " `" + o + "` of type " + ("`" + u + "` supplied to `" + n + "`, expected an object."));
                for (var c in a)
                    if (a.hasOwnProperty(c)) {
                        var s = A(a, c, n, r, o + "." + c, i);
                        if (s instanceof Error)
                            return s
                    }
                return null
            }
            return c(e)
        }
        function C(A) {
            function e(e, t, n, r, o) {
                for (var a = 0; a < A.length; a++) {
                    var u = A[a];
                    if (null == u(e, t, n, r, o, i))
                        return null
                }
                return new l("Invalid " + r + " `" + o + "` supplied to " + ("`" + n + "`."))
            }
            if (!Array.isArray(A))
                return n.thatReturnsNull;
            for (var t = 0; t < A.length; t++) {
                var r = A[t];
                if ("function" != typeof r)
                    return o(!1, "Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.", S(r), t),
                    n.thatReturnsNull
            }
            return c(e)
        }
        function m() {
            function A(A, e, t, n, r) {
                return h(A[e]) ? null : new l("Invalid " + n + " `" + r + "` supplied to " + ("`" + t + "`, expected a ReactNode."))
            }
            return c(A)
        }
        function y(A) {
            function e(e, t, n, r, o) {
                var a = e[t]
                  , u = V(a);
                if ("object" !== u)
                    return new l("Invalid " + r + " `" + o + "` of type `" + u + "` " + ("supplied to `" + n + "`, expected `object`."));
                for (var c in A) {
                    var s = A[c];
                    if (s) {
                        var p = s(a, c, n, r, o + "." + c, i);
                        if (p)
                            return p
                    }
                }
                return null
            }
            return c(e)
        }
        function h(e) {
            switch (typeof e) {
            case "number":
            case "string":
            case "undefined":
                return !0;
            case "boolean":
                return !e;
            case "object":
                if (Array.isArray(e))
                    return e.every(h);
                if (null === e || A(e))
                    return !0;
                var n = t(e);
                if (!n)
                    return !1;
                var r, o = n.call(e);
                if (n !== e.entries) {
                    for (; !(r = o.next()).done; )
                        if (!h(r.value))
                            return !1
                } else
                    for (; !(r = o.next()).done; ) {
                        var i = r.value;
                        if (i && !h(i[1]))
                            return !1
                    }
                return !0;
            default:
                return !1
            }
        }
        function M(A, e) {
            return "symbol" === A || ("Symbol" === e["@@toStringTag"] || "function" == typeof Symbol && e instanceof Symbol)
        }
        function V(A) {
            var e = typeof A;
            return Array.isArray(A) ? "array" : A instanceof RegExp ? "object" : M(e, A) ? "symbol" : e
        }
        function E(A) {
            if ("undefined" == typeof A || null === A)
                return "" + A;
            var e = V(A);
            if ("object" === e) {
                if (A instanceof Date)
                    return "date";
                if (A instanceof RegExp)
                    return "regexp"
            }
            return e
        }
        function S(A) {
            var e = E(A);
            switch (e) {
            case "array":
            case "object":
                return "an " + e;
            case "boolean":
            case "date":
            case "regexp":
                return "a " + e;
            default:
                return e
            }
        }
        function k(A) {
            return A.constructor && A.constructor.name ? A.constructor.name : R
        }
        var b = "function" == typeof Symbol && Symbol.iterator
          , v = "@@iterator"
          , R = "<<anonymous>>"
          , U = {
            array: s("array"),
            bool: s("boolean"),
            func: s("function"),
            number: s("number"),
            object: s("object"),
            string: s("string"),
            symbol: s("symbol"),
            any: p(),
            arrayOf: f,
            element: g(),
            instanceOf: I,
            node: m(),
            objectOf: q,
            oneOf: d,
            oneOfType: C,
            shape: y
        };
        return l.prototype = Error.prototype,
        U.checkPropTypes = a,
        U.PropTypes = U,
        U
    }
}
, function(A, e, t) {
    (function(e) {
        (function() {
            var t, n, r, o, i, a;
            "undefined" != typeof performance && null !== performance && performance.now ? A.exports = function() {
                return performance.now()
            }
            : "undefined" != typeof e && null !== e && e.hrtime ? (A.exports = function() {
                return (t() - i) / 1e6
            }
            ,
            n = e.hrtime,
            t = function() {
                var A;
                return A = n(),
                1e9 * A[0] + A[1]
            }
            ,
            o = t(),
            a = 1e9 * e.uptime(),
            i = o - a) : Date.now ? (A.exports = function() {
                return Date.now() - r
            }
            ,
            r = Date.now()) : (A.exports = function() {
                return (new Date).getTime() - r
            }
            ,
            r = (new Date).getTime())
        }
        ).call(this)
    }
    ).call(e, t(39))
}
, function(A, e, t) {
    !function(e, n) {
        A.exports = n(t(1))
    }(this, function(A) {
        return function(A) {
            function e(n) {
                if (t[n])
                    return t[n].exports;
                var r = t[n] = {
                    exports: {},
                    id: n,
                    loaded: !1
                };
                return A[n].call(r.exports, r, r.exports, e),
                r.loaded = !0,
                r.exports
            }
            var t = {};
            return e.m = A,
            e.c = t,
            e.p = "",
            e(0)
        }([function(A, e, t) {
            "use strict";
            function n(A) {
                return A && A.__esModule ? A : {
                    default: A
                }
            }
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var r = t(1)
              , o = n(r)
              , i = o.default.createClass({
                displayName: "Delay",
                propTypes: {
                    wait: o.default.PropTypes.number
                },
                getDefaultProps: function() {
                    return {
                        wait: 250
                    }
                },
                getInitialState: function() {
                    return {
                        waiting: !0
                    }
                },
                componentDidMount: function() {
                    var A = this;
                    this.timer = setTimeout(function() {
                        A.setState({
                            waiting: !1
                        })
                    }, this.props.wait)
                },
                componentWillUnmount: function() {
                    clearTimeout(this.timer)
                },
                render: function() {
                    return this.state.waiting ? null : this.props.children
                }
            });
            e.default = i,
            A.exports = e.default
        }
        , function(e, t) {
            e.exports = A
        }
        ])
    })
}
, function(A, e) {
    "use strict";
    var t = {
        Properties: {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
        },
        DOMAttributeNames: {},
        DOMPropertyNames: {}
    };
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    var n = t(13)
      , r = t(186)
      , o = {
        focusDOMComponent: function() {
            r(n.getNodeFromInstance(this))
        }
    };
    A.exports = o
}
, function(A, e, t) {
    "use strict";
    function n() {
        var A = window.opera;
        return "object" == typeof A && "function" == typeof A.version && parseInt(A.version(), 10) <= 12
    }
    function r(A) {
        return (A.ctrlKey || A.altKey || A.metaKey) && !(A.ctrlKey && A.altKey)
    }
    function o(A) {
        switch (A) {
        case "topCompositionStart":
            return k.compositionStart;
        case "topCompositionEnd":
            return k.compositionEnd;
        case "topCompositionUpdate":
            return k.compositionUpdate
        }
    }
    function i(A, e) {
        return "topKeyDown" === A && e.keyCode === m
    }
    function a(A, e) {
        switch (A) {
        case "topKeyUp":
            return C.indexOf(e.keyCode) !== -1;
        case "topKeyDown":
            return e.keyCode !== m;
        case "topKeyPress":
        case "topMouseDown":
        case "topBlur":
            return !0;
        default:
            return !1
        }
    }
    function u(A) {
        var e = A.detail;
        return "object" == typeof e && "data"in e ? e.data : null
    }
    function l(A, e, t, n) {
        var r, l;
        if (y ? r = o(A) : v ? a(A, t) && (r = k.compositionEnd) : i(A, t) && (r = k.compositionStart),
        !r)
            return null;
        V && (v || r !== k.compositionStart ? r === k.compositionEnd && v && (l = v.getData()) : v = I.getPooled(n));
        var c = d.getPooled(r, e, t, n);
        if (l)
            c.data = l;
        else {
            var s = u(t);
            null !== s && (c.data = s)
        }
        return f.accumulateTwoPhaseDispatches(c),
        c
    }
    function c(A, e) {
        switch (A) {
        case "topCompositionEnd":
            return u(e);
        case "topKeyPress":
            var t = e.which;
            return t !== E ? null : (b = !0,
            S);
        case "topTextInput":
            var n = e.data;
            return n === S && b ? null : n;
        default:
            return null
        }
    }
    function s(A, e) {
        if (v) {
            if ("topCompositionEnd" === A || !y && a(A, e)) {
                var t = v.getData();
                return I.release(v),
                v = null,
                t
            }
            return null
        }
        switch (A) {
        case "topPaste":
            return null;
        case "topKeyPress":
            return e.which && !r(e) ? String.fromCharCode(e.which) : null;
        case "topCompositionEnd":
            return V ? null : e.data;
        default:
            return null
        }
    }
    function p(A, e, t, n) {
        var r;
        if (r = M ? c(A, t) : s(A, t),
        !r)
            return null;
        var o = q.getPooled(k.beforeInput, e, t, n);
        return o.data = r,
        f.accumulateTwoPhaseDispatches(o),
        o
    }
    var f = t(55)
      , g = t(16)
      , I = t(697)
      , d = t(734)
      , q = t(737)
      , C = [9, 13, 27, 32]
      , m = 229
      , y = g.canUseDOM && "CompositionEvent"in window
      , h = null;
    g.canUseDOM && "documentMode"in document && (h = document.documentMode);
    var M = g.canUseDOM && "TextEvent"in window && !h && !n()
      , V = g.canUseDOM && (!y || h && h > 8 && h <= 11)
      , E = 32
      , S = String.fromCharCode(E)
      , k = {
        beforeInput: {
            phasedRegistrationNames: {
                bubbled: "onBeforeInput",
                captured: "onBeforeInputCapture"
            },
            dependencies: ["topCompositionEnd", "topKeyPress", "topTextInput", "topPaste"]
        },
        compositionEnd: {
            phasedRegistrationNames: {
                bubbled: "onCompositionEnd",
                captured: "onCompositionEndCapture"
            },
            dependencies: ["topBlur", "topCompositionEnd", "topKeyDown", "topKeyPress", "topKeyUp", "topMouseDown"]
        },
        compositionStart: {
            phasedRegistrationNames: {
                bubbled: "onCompositionStart",
                captured: "onCompositionStartCapture"
            },
            dependencies: ["topBlur", "topCompositionStart", "topKeyDown", "topKeyPress", "topKeyUp", "topMouseDown"]
        },
        compositionUpdate: {
            phasedRegistrationNames: {
                bubbled: "onCompositionUpdate",
                captured: "onCompositionUpdateCapture"
            },
            dependencies: ["topBlur", "topCompositionUpdate", "topKeyDown", "topKeyPress", "topKeyUp", "topMouseDown"]
        }
    }
      , b = !1
      , v = null
      , R = {
        eventTypes: k,
        extractEvents: function(A, e, t, n) {
            return [l(A, e, t, n), p(A, e, t, n)]
        }
    };
    A.exports = R
}
, function(A, e, t) {
    "use strict";
    var n = t(274)
      , r = t(16)
      , o = (t(19),
    t(448),
    t(743))
      , i = t(455)
      , a = t(458)
      , u = (t(7),
    a(function(A) {
        return i(A)
    }))
      , l = !1
      , c = "cssFloat";
    if (r.canUseDOM) {
        var s = document.createElement("div").style;
        try {
            s.font = ""
        } catch (A) {
            l = !0
        }
        void 0 === document.documentElement.style.cssFloat && (c = "styleFloat")
    }
    var p = {
        createMarkupForStyles: function(A, e) {
            var t = "";
            for (var n in A)
                if (A.hasOwnProperty(n)) {
                    var r = 0 === n.indexOf("--")
                      , i = A[n];
                    null != i && (t += u(n) + ":",
                    t += o(n, i, e, r) + ";")
                }
            return t || null
        },
        setValueForStyles: function(A, e, t) {
            var r = A.style;
            for (var i in e)
                if (e.hasOwnProperty(i)) {
                    var a = 0 === i.indexOf("--")
                      , u = o(i, e[i], t, a);
                    if ("float" !== i && "cssFloat" !== i || (i = c),
                    a)
                        r.setProperty(i, u);
                    else if (u)
                        r[i] = u;
                    else {
                        var s = l && n.shorthandPropertyExpansions[i];
                        if (s)
                            for (var p in s)
                                r[p] = "";
                        else
                            r[i] = ""
                    }
                }
        }
    };
    A.exports = p
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t) {
        var n = k.getPooled(G.change, A, e, t);
        return n.type = "change",
        M.accumulateTwoPhaseDispatches(n),
        n
    }
    function r(A) {
        var e = A.nodeName && A.nodeName.toLowerCase();
        return "select" === e || "input" === e && "file" === A.type
    }
    function o(A) {
        var e = n(Z, A, v(A));
        S.batchedUpdates(i, e)
    }
    function i(A) {
        h.enqueueEvents(A),
        h.processEventQueue(!1)
    }
    function a(A, e) {
        Q = A,
        Z = e,
        Q.attachEvent("onchange", o)
    }
    function u() {
        Q && (Q.detachEvent("onchange", o),
        Q = null,
        Z = null)
    }
    function l(A, e) {
        var t = b.updateValueIfChanged(A)
          , n = e.simulated === !0 && B._allowSimulatedPassThrough;
        if (t || n)
            return A
    }
    function c(A, e) {
        if ("topChange" === A)
            return e
    }
    function s(A, e, t) {
        "topFocus" === A ? (u(),
        a(e, t)) : "topBlur" === A && u()
    }
    function p(A, e) {
        Q = A,
        Z = e,
        Q.attachEvent("onpropertychange", g)
    }
    function f() {
        Q && (Q.detachEvent("onpropertychange", g),
        Q = null,
        Z = null)
    }
    function g(A) {
        "value" === A.propertyName && l(Z, A) && o(A)
    }
    function I(A, e, t) {
        "topFocus" === A ? (f(),
        p(e, t)) : "topBlur" === A && f()
    }
    function d(A, e, t) {
        if ("topSelectionChange" === A || "topKeyUp" === A || "topKeyDown" === A)
            return l(Z, t)
    }
    function q(A) {
        var e = A.nodeName;
        return e && "input" === e.toLowerCase() && ("checkbox" === A.type || "radio" === A.type)
    }
    function C(A, e, t) {
        if ("topClick" === A)
            return l(e, t)
    }
    function m(A, e, t) {
        if ("topInput" === A || "topChange" === A)
            return l(e, t)
    }
    function y(A, e) {
        if (null != A) {
            var t = A._wrapperState || e._wrapperState;
            if (t && t.controlled && "number" === e.type) {
                var n = "" + e.value;
                e.getAttribute("value") !== n && e.setAttribute("value", n)
            }
        }
    }
    var h = t(54)
      , M = t(55)
      , V = t(16)
      , E = t(13)
      , S = t(22)
      , k = t(25)
      , b = t(290)
      , v = t(132)
      , R = t(133)
      , U = t(292)
      , G = {
        change: {
            phasedRegistrationNames: {
                bubbled: "onChange",
                captured: "onChangeCapture"
            },
            dependencies: ["topBlur", "topChange", "topClick", "topFocus", "topInput", "topKeyDown", "topKeyUp", "topSelectionChange"]
        }
    }
      , Q = null
      , Z = null
      , O = !1;
    V.canUseDOM && (O = R("change") && (!document.documentMode || document.documentMode > 8));
    var j = !1;
    V.canUseDOM && (j = R("input") && (!("documentMode"in document) || document.documentMode > 9));
    var B = {
        eventTypes: G,
        _allowSimulatedPassThrough: !0,
        _isInputEventSupported: j,
        extractEvents: function(A, e, t, o) {
            var i, a, u = e ? E.getNodeFromInstance(e) : window;
            if (r(u) ? O ? i = c : a = s : U(u) ? j ? i = m : (i = d,
            a = I) : q(u) && (i = C),
            i) {
                var l = i(A, e, t);
                if (l) {
                    var p = n(l, t, o);
                    return p
                }
            }
            a && a(A, u, e),
            "topBlur" === A && y(e, u)
        }
    };
    A.exports = B
}
, function(A, e, t) {
    "use strict";
    var n = t(8)
      , r = t(40)
      , o = t(16)
      , i = t(451)
      , a = t(18)
      , u = (t(5),
    {
        dangerouslyReplaceNodeWithMarkup: function(A, e) {
            if (o.canUseDOM ? void 0 : n("56"),
            e ? void 0 : n("57"),
            "HTML" === A.nodeName ? n("58") : void 0,
            "string" == typeof e) {
                var t = i(e, a)[0];
                A.parentNode.replaceChild(t, A)
            } else
                r.replaceChildWithTree(A, e)
        }
    });
    A.exports = u
}
, function(A, e) {
    "use strict";
    var t = ["ResponderEventPlugin", "SimpleEventPlugin", "TapEventPlugin", "EnterLeaveEventPlugin", "ChangeEventPlugin", "SelectEventPlugin", "BeforeInputEventPlugin"];
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    var n = t(55)
      , r = t(13)
      , o = t(77)
      , i = {
        mouseEnter: {
            registrationName: "onMouseEnter",
            dependencies: ["topMouseOut", "topMouseOver"]
        },
        mouseLeave: {
            registrationName: "onMouseLeave",
            dependencies: ["topMouseOut", "topMouseOver"]
        }
    }
      , a = {
        eventTypes: i,
        extractEvents: function(A, e, t, a) {
            if ("topMouseOver" === A && (t.relatedTarget || t.fromElement))
                return null;
            if ("topMouseOut" !== A && "topMouseOver" !== A)
                return null;
            var u;
            if (a.window === a)
                u = a;
            else {
                var l = a.ownerDocument;
                u = l ? l.defaultView || l.parentWindow : window
            }
            var c, s;
            if ("topMouseOut" === A) {
                c = e;
                var p = t.relatedTarget || t.toElement;
                s = p ? r.getClosestInstanceFromNode(p) : null
            } else
                c = null,
                s = e;
            if (c === s)
                return null;
            var f = null == c ? u : r.getNodeFromInstance(c)
              , g = null == s ? u : r.getNodeFromInstance(s)
              , I = o.getPooled(i.mouseLeave, c, t, a);
            I.type = "mouseleave",
            I.target = f,
            I.relatedTarget = g;
            var d = o.getPooled(i.mouseEnter, s, t, a);
            return d.type = "mouseenter",
            d.target = g,
            d.relatedTarget = f,
            n.accumulateEnterLeaveDispatches(I, d, c, s),
            [I, d]
        }
    };
    A.exports = a
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        this._root = A,
        this._startText = this.getText(),
        this._fallbackText = null
    }
    var r = t(11)
      , o = t(32)
      , i = t(289);
    r(n.prototype, {
        destructor: function() {
            this._root = null,
            this._startText = null,
            this._fallbackText = null
        },
        getText: function() {
            return "value"in this._root ? this._root.value : this._root[i()]
        },
        getData: function() {
            if (this._fallbackText)
                return this._fallbackText;
            var A, e, t = this._startText, n = t.length, r = this.getText(), o = r.length;
            for (A = 0; A < n && t[A] === r[A]; A++)
                ;
            var i = n - A;
            for (e = 1; e <= i && t[n - e] === r[o - e]; e++)
                ;
            var a = e > 1 ? 1 - e : void 0;
            return this._fallbackText = r.slice(A, a),
            this._fallbackText
        }
    }),
    o.addPoolingTo(n),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    var n = t(41)
      , r = n.injection.MUST_USE_PROPERTY
      , o = n.injection.HAS_BOOLEAN_VALUE
      , i = n.injection.HAS_NUMERIC_VALUE
      , a = n.injection.HAS_POSITIVE_NUMERIC_VALUE
      , u = n.injection.HAS_OVERLOADED_BOOLEAN_VALUE
      , l = {
        isCustomAttribute: RegExp.prototype.test.bind(new RegExp("^(data|aria)-[" + n.ATTRIBUTE_NAME_CHAR + "]*$")),
        Properties: {
            accept: 0,
            acceptCharset: 0,
            accessKey: 0,
            action: 0,
            allowFullScreen: o,
            allowTransparency: 0,
            alt: 0,
            as: 0,
            async: o,
            autoComplete: 0,
            autoPlay: o,
            capture: o,
            cellPadding: 0,
            cellSpacing: 0,
            charSet: 0,
            challenge: 0,
            checked: r | o,
            cite: 0,
            classID: 0,
            className: 0,
            cols: a,
            colSpan: 0,
            content: 0,
            contentEditable: 0,
            contextMenu: 0,
            controls: o,
            coords: 0,
            crossOrigin: 0,
            data: 0,
            dateTime: 0,
            default: o,
            defer: o,
            dir: 0,
            disabled: o,
            download: u,
            draggable: 0,
            encType: 0,
            form: 0,
            formAction: 0,
            formEncType: 0,
            formMethod: 0,
            formNoValidate: o,
            formTarget: 0,
            frameBorder: 0,
            headers: 0,
            height: 0,
            hidden: o,
            high: 0,
            href: 0,
            hrefLang: 0,
            htmlFor: 0,
            httpEquiv: 0,
            icon: 0,
            id: 0,
            inputMode: 0,
            integrity: 0,
            is: 0,
            keyParams: 0,
            keyType: 0,
            kind: 0,
            label: 0,
            lang: 0,
            list: 0,
            loop: o,
            low: 0,
            manifest: 0,
            marginHeight: 0,
            marginWidth: 0,
            max: 0,
            maxLength: 0,
            media: 0,
            mediaGroup: 0,
            method: 0,
            min: 0,
            minLength: 0,
            multiple: r | o,
            muted: r | o,
            name: 0,
            nonce: 0,
            noValidate: o,
            open: o,
            optimum: 0,
            pattern: 0,
            placeholder: 0,
            playsInline: o,
            poster: 0,
            preload: 0,
            profile: 0,
            radioGroup: 0,
            readOnly: o,
            referrerPolicy: 0,
            rel: 0,
            required: o,
            reversed: o,
            role: 0,
            rows: a,
            rowSpan: i,
            sandbox: 0,
            scope: 0,
            scoped: o,
            scrolling: 0,
            seamless: o,
            selected: r | o,
            shape: 0,
            size: a,
            sizes: 0,
            span: a,
            spellCheck: 0,
            src: 0,
            srcDoc: 0,
            srcLang: 0,
            srcSet: 0,
            start: i,
            step: 0,
            style: 0,
            summary: 0,
            tabIndex: 0,
            target: 0,
            title: 0,
            type: 0,
            useMap: 0,
            value: 0,
            width: 0,
            wmode: 0,
            wrap: 0,
            about: 0,
            datatype: 0,
            inlist: 0,
            prefix: 0,
            property: 0,
            resource: 0,
            typeof: 0,
            vocab: 0,
            autoCapitalize: 0,
            autoCorrect: 0,
            autoSave: 0,
            color: 0,
            itemProp: 0,
            itemScope: o,
            itemType: 0,
            itemID: 0,
            itemRef: 0,
            results: 0,
            security: 0,
            unselectable: 0
        },
        DOMAttributeNames: {
            acceptCharset: "accept-charset",
            className: "class",
            htmlFor: "for",
            httpEquiv: "http-equiv"
        },
        DOMPropertyNames: {},
        DOMMutationMethods: {
            value: function(A, e) {
                return null == e ? A.removeAttribute("value") : void ("number" !== A.type || A.hasAttribute("value") === !1 ? A.setAttribute("value", "" + e) : A.validity && !A.validity.badInput && A.ownerDocument.activeElement !== A && A.setAttribute("value", "" + e))
            }
        }
    };
    A.exports = l
}
, function(A, e, t) {
    (function(e) {
        "use strict";
        function n(A, e, t, n) {
            var r = void 0 === A[t];
            null != e && r && (A[t] = o(e, !0))
        }
        var r = t(42)
          , o = t(291)
          , i = (t(124),
        t(134))
          , a = t(294)
          , u = (t(7),
        {
            instantiateChildren: function(A, e, t, r) {
                if (null == A)
                    return null;
                var o = {};
                return a(A, n, o),
                o
            },
            updateChildren: function(A, e, t, n, a, u, l, c, s) {
                if (e || A) {
                    var p, f;
                    for (p in e)
                        if (e.hasOwnProperty(p)) {
                            f = A && A[p];
                            var g = f && f._currentElement
                              , I = e[p];
                            if (null != f && i(g, I))
                                r.receiveComponent(f, I, a, c),
                                e[p] = f;
                            else {
                                f && (n[p] = r.getHostNode(f),
                                r.unmountComponent(f, !1));
                                var d = o(I, !0);
                                e[p] = d;
                                var q = r.mountComponent(d, a, u, l, c, s);
                                t.push(q)
                            }
                        }
                    for (p in A)
                        !A.hasOwnProperty(p) || e && e.hasOwnProperty(p) || (f = A[p],
                        n[p] = r.getHostNode(f),
                        r.unmountComponent(f, !1))
                }
            },
            unmountChildren: function(A, e) {
                for (var t in A)
                    if (A.hasOwnProperty(t)) {
                        var n = A[t];
                        r.unmountComponent(n, e)
                    }
            }
        });
        A.exports = u
    }
    ).call(e, t(39))
}
, function(A, e, t) {
    "use strict";
    var n = t(120)
      , r = t(707)
      , o = {
        processChildrenUpdates: r.dangerouslyProcessChildrenUpdates,
        replaceNodeWithMarkup: n.dangerouslyReplaceNodeWithMarkup
    };
    A.exports = o
}
, function(A, e, t) {
    "use strict";
    function n(A) {}
    function r(A, e) {}
    function o(A) {
        return !(!A.prototype || !A.prototype.isReactComponent)
    }
    function i(A) {
        return !(!A.prototype || !A.prototype.isPureReactComponent)
    }
    var a = t(8)
      , u = t(11)
      , l = t(43)
      , c = t(126)
      , s = t(26)
      , p = t(127)
      , f = t(56)
      , g = (t(19),
    t(284))
      , I = t(42)
      , d = t(69)
      , q = (t(5),
    t(110))
      , C = t(134)
      , m = (t(7),
    {
        ImpureClass: 0,
        PureClass: 1,
        StatelessFunctional: 2
    });
    n.prototype.render = function() {
        var A = f.get(this)._currentElement.type
          , e = A(this.props, this.context, this.updater);
        return r(A, e),
        e
    }
    ;
    var y = 1
      , h = {
        construct: function(A) {
            this._currentElement = A,
            this._rootNodeID = 0,
            this._compositeType = null,
            this._instance = null,
            this._hostParent = null,
            this._hostContainerInfo = null,
            this._updateBatchNumber = null,
            this._pendingElement = null,
            this._pendingStateQueue = null,
            this._pendingReplaceState = !1,
            this._pendingForceUpdate = !1,
            this._renderedNodeType = null,
            this._renderedComponent = null,
            this._context = null,
            this._mountOrder = 0,
            this._topLevelWrapper = null,
            this._pendingCallbacks = null,
            this._calledComponentWillUnmount = !1
        },
        mountComponent: function(A, e, t, u) {
            this._context = u,
            this._mountOrder = y++,
            this._hostParent = e,
            this._hostContainerInfo = t;
            var c, s = this._currentElement.props, p = this._processContext(u), g = this._currentElement.type, I = A.getUpdateQueue(), q = o(g), C = this._constructComponent(q, s, p, I);
            q || null != C && null != C.render ? i(g) ? this._compositeType = m.PureClass : this._compositeType = m.ImpureClass : (c = C,
            r(g, c),
            null === C || C === !1 || l.isValidElement(C) ? void 0 : a("105", g.displayName || g.name || "Component"),
            C = new n(g),
            this._compositeType = m.StatelessFunctional);
            C.props = s,
            C.context = p,
            C.refs = d,
            C.updater = I,
            this._instance = C,
            f.set(C, this);
            var h = C.state;
            void 0 === h && (C.state = h = null),
            "object" != typeof h || Array.isArray(h) ? a("106", this.getName() || "ReactCompositeComponent") : void 0,
            this._pendingStateQueue = null,
            this._pendingReplaceState = !1,
            this._pendingForceUpdate = !1;
            var M;
            return M = C.unstable_handleError ? this.performInitialMountWithErrorHandling(c, e, t, A, u) : this.performInitialMount(c, e, t, A, u),
            C.componentDidMount && A.getReactMountReady().enqueue(C.componentDidMount, C),
            M
        },
        _constructComponent: function(A, e, t, n) {
            return this._constructComponentWithoutOwner(A, e, t, n)
        },
        _constructComponentWithoutOwner: function(A, e, t, n) {
            var r = this._currentElement.type;
            return A ? new r(e,t,n) : r(e, t, n)
        },
        performInitialMountWithErrorHandling: function(A, e, t, n, r) {
            var o, i = n.checkpoint();
            try {
                o = this.performInitialMount(A, e, t, n, r)
            } catch (a) {
                n.rollback(i),
                this._instance.unstable_handleError(a),
                this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)),
                i = n.checkpoint(),
                this._renderedComponent.unmountComponent(!0),
                n.rollback(i),
                o = this.performInitialMount(A, e, t, n, r)
            }
            return o
        },
        performInitialMount: function(A, e, t, n, r) {
            var o = this._instance
              , i = 0;
            o.componentWillMount && (o.componentWillMount(),
            this._pendingStateQueue && (o.state = this._processPendingState(o.props, o.context))),
            void 0 === A && (A = this._renderValidatedComponent());
            var a = g.getType(A);
            this._renderedNodeType = a;
            var u = this._instantiateReactComponent(A, a !== g.EMPTY);
            this._renderedComponent = u;
            var l = I.mountComponent(u, n, e, t, this._processChildContext(r), i);
            return l
        },
        getHostNode: function() {
            return I.getHostNode(this._renderedComponent)
        },
        unmountComponent: function(A) {
            if (this._renderedComponent) {
                var e = this._instance;
                if (e.componentWillUnmount && !e._calledComponentWillUnmount)
                    if (e._calledComponentWillUnmount = !0,
                    A) {
                        var t = this.getName() + ".componentWillUnmount()";
                        p.invokeGuardedCallback(t, e.componentWillUnmount.bind(e))
                    } else
                        e.componentWillUnmount();
                this._renderedComponent && (I.unmountComponent(this._renderedComponent, A),
                this._renderedNodeType = null,
                this._renderedComponent = null,
                this._instance = null),
                this._pendingStateQueue = null,
                this._pendingReplaceState = !1,
                this._pendingForceUpdate = !1,
                this._pendingCallbacks = null,
                this._pendingElement = null,
                this._context = null,
                this._rootNodeID = 0,
                this._topLevelWrapper = null,
                f.remove(e)
            }
        },
        _maskContext: function(A) {
            var e = this._currentElement.type
              , t = e.contextTypes;
            if (!t)
                return d;
            var n = {};
            for (var r in t)
                n[r] = A[r];
            return n
        },
        _processContext: function(A) {
            var e = this._maskContext(A);
            return e
        },
        _processChildContext: function(A) {
            var e, t = this._currentElement.type, n = this._instance;
            if (n.getChildContext && (e = n.getChildContext()),
            e) {
                "object" != typeof t.childContextTypes ? a("107", this.getName() || "ReactCompositeComponent") : void 0;
                for (var r in e)
                    r in t.childContextTypes ? void 0 : a("108", this.getName() || "ReactCompositeComponent", r);
                return u({}, A, e)
            }
            return A
        },
        _checkContextTypes: function(A, e, t) {},
        receiveComponent: function(A, e, t) {
            var n = this._currentElement
              , r = this._context;
            this._pendingElement = null,
            this.updateComponent(e, n, A, r, t)
        },
        performUpdateIfNecessary: function(A) {
            null != this._pendingElement ? I.receiveComponent(this, this._pendingElement, A, this._context) : null !== this._pendingStateQueue || this._pendingForceUpdate ? this.updateComponent(A, this._currentElement, this._currentElement, this._context, this._context) : this._updateBatchNumber = null
        },
        updateComponent: function(A, e, t, n, r) {
            var o = this._instance;
            null == o ? a("136", this.getName() || "ReactCompositeComponent") : void 0;
            var i, u = !1;
            this._context === r ? i = o.context : (i = this._processContext(r),
            u = !0);
            var l = e.props
              , c = t.props;
            e !== t && (u = !0),
            u && o.componentWillReceiveProps && o.componentWillReceiveProps(c, i);
            var s = this._processPendingState(c, i)
              , p = !0;
            this._pendingForceUpdate || (o.shouldComponentUpdate ? p = o.shouldComponentUpdate(c, s, i) : this._compositeType === m.PureClass && (p = !q(l, c) || !q(o.state, s))),
            this._updateBatchNumber = null,
            p ? (this._pendingForceUpdate = !1,
            this._performComponentUpdate(t, c, s, i, A, r)) : (this._currentElement = t,
            this._context = r,
            o.props = c,
            o.state = s,
            o.context = i)
        },
        _processPendingState: function(A, e) {
            var t = this._instance
              , n = this._pendingStateQueue
              , r = this._pendingReplaceState;
            if (this._pendingReplaceState = !1,
            this._pendingStateQueue = null,
            !n)
                return t.state;
            if (r && 1 === n.length)
                return n[0];
            for (var o = u({}, r ? n[0] : t.state), i = r ? 1 : 0; i < n.length; i++) {
                var a = n[i];
                u(o, "function" == typeof a ? a.call(t, o, A, e) : a)
            }
            return o
        },
        _performComponentUpdate: function(A, e, t, n, r, o) {
            var i, a, u, l = this._instance, c = Boolean(l.componentDidUpdate);
            c && (i = l.props,
            a = l.state,
            u = l.context),
            l.componentWillUpdate && l.componentWillUpdate(e, t, n),
            this._currentElement = A,
            this._context = o,
            l.props = e,
            l.state = t,
            l.context = n,
            this._updateRenderedComponent(r, o),
            c && r.getReactMountReady().enqueue(l.componentDidUpdate.bind(l, i, a, u), l)
        },
        _updateRenderedComponent: function(A, e) {
            var t = this._renderedComponent
              , n = t._currentElement
              , r = this._renderValidatedComponent()
              , o = 0;
            if (C(n, r))
                I.receiveComponent(t, r, A, this._processChildContext(e));
            else {
                var i = I.getHostNode(t);
                I.unmountComponent(t, !1);
                var a = g.getType(r);
                this._renderedNodeType = a;
                var u = this._instantiateReactComponent(r, a !== g.EMPTY);
                this._renderedComponent = u;
                var l = I.mountComponent(u, A, this._hostParent, this._hostContainerInfo, this._processChildContext(e), o);
                this._replaceNodeWithMarkup(i, l, t)
            }
        },
        _replaceNodeWithMarkup: function(A, e, t) {
            c.replaceNodeWithMarkup(A, e, t)
        },
        _renderValidatedComponentWithoutOwnerOrContext: function() {
            var A, e = this._instance;
            return A = e.render()
        },
        _renderValidatedComponent: function() {
            var A;
            if (this._compositeType !== m.StatelessFunctional) {
                s.current = this;
                try {
                    A = this._renderValidatedComponentWithoutOwnerOrContext()
                } finally {
                    s.current = null
                }
            } else
                A = this._renderValidatedComponentWithoutOwnerOrContext();
            return null === A || A === !1 || l.isValidElement(A) ? void 0 : a("109", this.getName() || "ReactCompositeComponent"),
            A
        },
        attachRef: function(A, e) {
            var t = this.getPublicInstance();
            null == t ? a("110") : void 0;
            var n = e.getPublicInstance()
              , r = t.refs === d ? t.refs = {} : t.refs;
            r[A] = n
        },
        detachRef: function(A) {
            var e = this.getPublicInstance().refs;
            delete e[A]
        },
        getName: function() {
            var A = this._currentElement.type
              , e = this._instance && this._instance.constructor;
            return A.displayName || e && e.displayName || A.name || e && e.name || null
        },
        getPublicInstance: function() {
            var A = this._instance;
            return this._compositeType === m.StatelessFunctional ? null : A
        },
        _instantiateReactComponent: null
    };
    A.exports = h
}
, function(A, e, t) {
    "use strict";
    var n = t(13)
      , r = t(715)
      , o = t(283)
      , i = t(42)
      , a = t(22)
      , u = t(728)
      , l = t(744)
      , c = t(288)
      , s = t(751);
    t(7);
    r.inject();
    var p = {
        findDOMNode: l,
        render: o.render,
        unmountComponentAtNode: o.unmountComponentAtNode,
        version: u,
        unstable_batchedUpdates: a.batchedUpdates,
        unstable_renderSubtreeIntoContainer: s
    };
    "undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject && __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
        ComponentTree: {
            getClosestInstanceFromNode: n.getClosestInstanceFromNode,
            getNodeFromInstance: function(A) {
                return A._renderedComponent && (A = c(A)),
                A ? n.getNodeFromInstance(A) : null
            }
        },
        Mount: o,
        Reconciler: i
    });
    A.exports = p
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A) {
            var e = A._currentElement._owner || null;
            if (e) {
                var t = e.getName();
                if (t)
                    return " This DOM node was rendered by `" + t + "`."
            }
        }
        return ""
    }
    function r(A, e) {
        e && (X[A._tag] && (null != e.children || null != e.dangerouslySetInnerHTML ? d("137", A._tag, A._currentElement._owner ? " Check the render method of " + A._currentElement._owner.getName() + "." : "") : void 0),
        null != e.dangerouslySetInnerHTML && (null != e.children ? d("60") : void 0,
        "object" == typeof e.dangerouslySetInnerHTML && W in e.dangerouslySetInnerHTML ? void 0 : d("61")),
        null != e.style && "object" != typeof e.style ? d("62", n(A)) : void 0)
    }
    function o(A, e, t, n) {
        if (!(n instanceof O)) {
            var r = A._hostContainerInfo
              , o = r._node && r._node.nodeType === x
              , a = o ? r._node : r._ownerDocument;
            D(e, a),
            n.getReactMountReady().enqueue(i, {
                inst: A,
                registrationName: e,
                listener: t
            })
        }
    }
    function i() {
        var A = this;
        E.putListener(A.inst, A.registrationName, A.listener)
    }
    function a() {
        var A = this;
        R.postMountWrapper(A)
    }
    function u() {
        var A = this;
        Q.postMountWrapper(A)
    }
    function l() {
        var A = this;
        U.postMountWrapper(A)
    }
    function c() {
        B.track(this)
    }
    function s() {
        var A = this;
        A._rootNodeID ? void 0 : d("63");
        var e = T(A);
        switch (e ? void 0 : d("64"),
        A._tag) {
        case "iframe":
        case "object":
            A._wrapperState.listeners = [k.trapBubbledEvent("topLoad", "load", e)];
            break;
        case "video":
        case "audio":
            A._wrapperState.listeners = [];
            for (var t in L)
                L.hasOwnProperty(t) && A._wrapperState.listeners.push(k.trapBubbledEvent(t, L[t], e));
            break;
        case "source":
            A._wrapperState.listeners = [k.trapBubbledEvent("topError", "error", e)];
            break;
        case "img":
            A._wrapperState.listeners = [k.trapBubbledEvent("topError", "error", e), k.trapBubbledEvent("topLoad", "load", e)];
            break;
        case "form":
            A._wrapperState.listeners = [k.trapBubbledEvent("topReset", "reset", e), k.trapBubbledEvent("topSubmit", "submit", e)];
            break;
        case "input":
        case "select":
        case "textarea":
            A._wrapperState.listeners = [k.trapBubbledEvent("topInvalid", "invalid", e)]
        }
    }
    function p() {
        G.postUpdateWrapper(this)
    }
    function f(A) {
        $.call(_, A) || (H.test(A) ? void 0 : d("65", A),
        _[A] = !0)
    }
    function g(A, e) {
        return A.indexOf("-") >= 0 || null != e.is
    }
    function I(A) {
        var e = A.type;
        f(e),
        this._currentElement = A,
        this._tag = e.toLowerCase(),
        this._namespaceURI = null,
        this._renderedChildren = null,
        this._previousStyle = null,
        this._previousStyleCopy = null,
        this._hostNode = null,
        this._hostParent = null,
        this._rootNodeID = 0,
        this._domID = 0,
        this._hostContainerInfo = null,
        this._wrapperState = null,
        this._topLevelWrapper = null,
        this._flags = 0
    }
    var d = t(8)
      , q = t(11)
      , C = t(690)
      , m = t(692)
      , y = t(40)
      , h = t(121)
      , M = t(41)
      , V = t(276)
      , E = t(54)
      , S = t(122)
      , k = t(76)
      , b = t(277)
      , v = t(13)
      , R = t(708)
      , U = t(709)
      , G = t(278)
      , Q = t(712)
      , Z = (t(19),
    t(721))
      , O = t(726)
      , j = (t(18),
    t(79))
      , B = (t(5),
    t(133),
    t(110),
    t(290))
      , w = (t(135),
    t(7),
    b)
      , Y = E.deleteListener
      , T = v.getNodeFromInstance
      , D = k.listenTo
      , K = S.registrationNameModules
      , N = {
        string: !0,
        number: !0
    }
      , J = "style"
      , W = "__html"
      , z = {
        children: null,
        dangerouslySetInnerHTML: null,
        suppressContentEditableWarning: null
    }
      , x = 11
      , L = {
        topAbort: "abort",
        topCanPlay: "canplay",
        topCanPlayThrough: "canplaythrough",
        topDurationChange: "durationchange",
        topEmptied: "emptied",
        topEncrypted: "encrypted",
        topEnded: "ended",
        topError: "error",
        topLoadedData: "loadeddata",
        topLoadedMetadata: "loadedmetadata",
        topLoadStart: "loadstart",
        topPause: "pause",
        topPlay: "play",
        topPlaying: "playing",
        topProgress: "progress",
        topRateChange: "ratechange",
        topSeeked: "seeked",
        topSeeking: "seeking",
        topStalled: "stalled",
        topSuspend: "suspend",
        topTimeUpdate: "timeupdate",
        topVolumeChange: "volumechange",
        topWaiting: "waiting"
    }
      , F = {
        area: !0,
        base: !0,
        br: !0,
        col: !0,
        embed: !0,
        hr: !0,
        img: !0,
        input: !0,
        keygen: !0,
        link: !0,
        meta: !0,
        param: !0,
        source: !0,
        track: !0,
        wbr: !0
    }
      , P = {
        listing: !0,
        pre: !0,
        textarea: !0
    }
      , X = q({
        menuitem: !0
    }, F)
      , H = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/
      , _ = {}
      , $ = {}.hasOwnProperty
      , AA = 1;
    I.displayName = "ReactDOMComponent",
    I.Mixin = {
        mountComponent: function(A, e, t, n) {
            this._rootNodeID = AA++,
            this._domID = t._idCounter++,
            this._hostParent = e,
            this._hostContainerInfo = t;
            var o = this._currentElement.props;
            switch (this._tag) {
            case "audio":
            case "form":
            case "iframe":
            case "img":
            case "link":
            case "object":
            case "source":
            case "video":
                this._wrapperState = {
                    listeners: null
                },
                A.getReactMountReady().enqueue(s, this);
                break;
            case "input":
                R.mountWrapper(this, o, e),
                o = R.getHostProps(this, o),
                A.getReactMountReady().enqueue(c, this),
                A.getReactMountReady().enqueue(s, this);
                break;
            case "option":
                U.mountWrapper(this, o, e),
                o = U.getHostProps(this, o);
                break;
            case "select":
                G.mountWrapper(this, o, e),
                o = G.getHostProps(this, o),
                A.getReactMountReady().enqueue(s, this);
                break;
            case "textarea":
                Q.mountWrapper(this, o, e),
                o = Q.getHostProps(this, o),
                A.getReactMountReady().enqueue(c, this),
                A.getReactMountReady().enqueue(s, this)
            }
            r(this, o);
            var i, p;
            null != e ? (i = e._namespaceURI,
            p = e._tag) : t._tag && (i = t._namespaceURI,
            p = t._tag),
            (null == i || i === h.svg && "foreignobject" === p) && (i = h.html),
            i === h.html && ("svg" === this._tag ? i = h.svg : "math" === this._tag && (i = h.mathml)),
            this._namespaceURI = i;
            var f;
            if (A.useCreateElement) {
                var g, I = t._ownerDocument;
                if (i === h.html)
                    if ("script" === this._tag) {
                        var d = I.createElement("div")
                          , q = this._currentElement.type;
                        d.innerHTML = "<" + q + "></" + q + ">",
                        g = d.removeChild(d.firstChild)
                    } else
                        g = o.is ? I.createElement(this._currentElement.type, o.is) : I.createElement(this._currentElement.type);
                else
                    g = I.createElementNS(i, this._currentElement.type);
                v.precacheNode(this, g),
                this._flags |= w.hasCachedChildNodes,
                this._hostParent || V.setAttributeForRoot(g),
                this._updateDOMProperties(null, o, A);
                var m = y(g);
                this._createInitialChildren(A, o, n, m),
                f = m
            } else {
                var M = this._createOpenTagMarkupAndPutListeners(A, o)
                  , E = this._createContentMarkup(A, o, n);
                f = !E && F[this._tag] ? M + "/>" : M + ">" + E + "</" + this._currentElement.type + ">"
            }
            switch (this._tag) {
            case "input":
                A.getReactMountReady().enqueue(a, this),
                o.autoFocus && A.getReactMountReady().enqueue(C.focusDOMComponent, this);
                break;
            case "textarea":
                A.getReactMountReady().enqueue(u, this),
                o.autoFocus && A.getReactMountReady().enqueue(C.focusDOMComponent, this);
                break;
            case "select":
                o.autoFocus && A.getReactMountReady().enqueue(C.focusDOMComponent, this);
                break;
            case "button":
                o.autoFocus && A.getReactMountReady().enqueue(C.focusDOMComponent, this);
                break;
            case "option":
                A.getReactMountReady().enqueue(l, this)
            }
            return f
        },
        _createOpenTagMarkupAndPutListeners: function(A, e) {
            var t = "<" + this._currentElement.type;
            for (var n in e)
                if (e.hasOwnProperty(n)) {
                    var r = e[n];
                    if (null != r)
                        if (K.hasOwnProperty(n))
                            r && o(this, n, r, A);
                        else {
                            n === J && (r && (r = this._previousStyleCopy = q({}, e.style)),
                            r = m.createMarkupForStyles(r, this));
                            var i = null;
                            null != this._tag && g(this._tag, e) ? z.hasOwnProperty(n) || (i = V.createMarkupForCustomAttribute(n, r)) : i = V.createMarkupForProperty(n, r),
                            i && (t += " " + i)
                        }
                }
            return A.renderToStaticMarkup ? t : (this._hostParent || (t += " " + V.createMarkupForRoot()),
            t += " " + V.createMarkupForID(this._domID))
        },
        _createContentMarkup: function(A, e, t) {
            var n = ""
              , r = e.dangerouslySetInnerHTML;
            if (null != r)
                null != r.__html && (n = r.__html);
            else {
                var o = N[typeof e.children] ? e.children : null
                  , i = null != o ? null : e.children;
                if (null != o)
                    n = j(o);
                else if (null != i) {
                    var a = this.mountChildren(i, A, t);
                    n = a.join("")
                }
            }
            return P[this._tag] && "\n" === n.charAt(0) ? "\n" + n : n
        },
        _createInitialChildren: function(A, e, t, n) {
            var r = e.dangerouslySetInnerHTML;
            if (null != r)
                null != r.__html && y.queueHTML(n, r.__html);
            else {
                var o = N[typeof e.children] ? e.children : null
                  , i = null != o ? null : e.children;
                if (null != o)
                    "" !== o && y.queueText(n, o);
                else if (null != i)
                    for (var a = this.mountChildren(i, A, t), u = 0; u < a.length; u++)
                        y.queueChild(n, a[u])
            }
        },
        receiveComponent: function(A, e, t) {
            var n = this._currentElement;
            this._currentElement = A,
            this.updateComponent(e, n, A, t)
        },
        updateComponent: function(A, e, t, n) {
            var o = e.props
              , i = this._currentElement.props;
            switch (this._tag) {
            case "input":
                o = R.getHostProps(this, o),
                i = R.getHostProps(this, i);
                break;
            case "option":
                o = U.getHostProps(this, o),
                i = U.getHostProps(this, i);
                break;
            case "select":
                o = G.getHostProps(this, o),
                i = G.getHostProps(this, i);
                break;
            case "textarea":
                o = Q.getHostProps(this, o),
                i = Q.getHostProps(this, i)
            }
            switch (r(this, i),
            this._updateDOMProperties(o, i, A),
            this._updateDOMChildren(o, i, A, n),
            this._tag) {
            case "input":
                R.updateWrapper(this);
                break;
            case "textarea":
                Q.updateWrapper(this);
                break;
            case "select":
                A.getReactMountReady().enqueue(p, this)
            }
        },
        _updateDOMProperties: function(A, e, t) {
            var n, r, i;
            for (n in A)
                if (!e.hasOwnProperty(n) && A.hasOwnProperty(n) && null != A[n])
                    if (n === J) {
                        var a = this._previousStyleCopy;
                        for (r in a)
                            a.hasOwnProperty(r) && (i = i || {},
                            i[r] = "");
                        this._previousStyleCopy = null
                    } else
                        K.hasOwnProperty(n) ? A[n] && Y(this, n) : g(this._tag, A) ? z.hasOwnProperty(n) || V.deleteValueForAttribute(T(this), n) : (M.properties[n] || M.isCustomAttribute(n)) && V.deleteValueForProperty(T(this), n);
            for (n in e) {
                var u = e[n]
                  , l = n === J ? this._previousStyleCopy : null != A ? A[n] : void 0;
                if (e.hasOwnProperty(n) && u !== l && (null != u || null != l))
                    if (n === J)
                        if (u ? u = this._previousStyleCopy = q({}, u) : this._previousStyleCopy = null,
                        l) {
                            for (r in l)
                                !l.hasOwnProperty(r) || u && u.hasOwnProperty(r) || (i = i || {},
                                i[r] = "");
                            for (r in u)
                                u.hasOwnProperty(r) && l[r] !== u[r] && (i = i || {},
                                i[r] = u[r])
                        } else
                            i = u;
                    else if (K.hasOwnProperty(n))
                        u ? o(this, n, u, t) : l && Y(this, n);
                    else if (g(this._tag, e))
                        z.hasOwnProperty(n) || V.setValueForAttribute(T(this), n, u);
                    else if (M.properties[n] || M.isCustomAttribute(n)) {
                        var c = T(this);
                        null != u ? V.setValueForProperty(c, n, u) : V.deleteValueForProperty(c, n)
                    }
            }
            i && m.setValueForStyles(T(this), i, this)
        },
        _updateDOMChildren: function(A, e, t, n) {
            var r = N[typeof A.children] ? A.children : null
              , o = N[typeof e.children] ? e.children : null
              , i = A.dangerouslySetInnerHTML && A.dangerouslySetInnerHTML.__html
              , a = e.dangerouslySetInnerHTML && e.dangerouslySetInnerHTML.__html
              , u = null != r ? null : A.children
              , l = null != o ? null : e.children
              , c = null != r || null != i
              , s = null != o || null != a;
            null != u && null == l ? this.updateChildren(null, t, n) : c && !s && this.updateTextContent(""),
            null != o ? r !== o && this.updateTextContent("" + o) : null != a ? i !== a && this.updateMarkup("" + a) : null != l && this.updateChildren(l, t, n)
        },
        getHostNode: function() {
            return T(this)
        },
        unmountComponent: function(A) {
            switch (this._tag) {
            case "audio":
            case "form":
            case "iframe":
            case "img":
            case "link":
            case "object":
            case "source":
            case "video":
                var e = this._wrapperState.listeners;
                if (e)
                    for (var t = 0; t < e.length; t++)
                        e[t].remove();
                break;
            case "input":
            case "textarea":
                B.stopTracking(this);
                break;
            case "html":
            case "head":
            case "body":
                d("66", this._tag)
            }
            this.unmountChildren(A),
            v.uncacheNode(this),
            E.deleteAllListeners(this),
            this._rootNodeID = 0,
            this._domID = 0,
            this._wrapperState = null
        },
        getPublicInstance: function() {
            return T(this)
        }
    },
    q(I.prototype, I.Mixin, Z.Mixin),
    A.exports = I
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        var t = {
            _topLevelWrapper: A,
            _idCounter: 1,
            _ownerDocument: e ? e.nodeType === r ? e : e.ownerDocument : null,
            _node: e,
            _tag: e ? e.nodeName.toLowerCase() : null,
            _namespaceURI: e ? e.namespaceURI : null
        };
        return t
    }
    var r = (t(135),
    9);
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    var n = t(11)
      , r = t(40)
      , o = t(13)
      , i = function(A) {
        this._currentElement = null,
        this._hostNode = null,
        this._hostParent = null,
        this._hostContainerInfo = null,
        this._domID = 0
    };
    n(i.prototype, {
        mountComponent: function(A, e, t, n) {
            var i = t._idCounter++;
            this._domID = i,
            this._hostParent = e,
            this._hostContainerInfo = t;
            var a = " react-empty: " + this._domID + " ";
            if (A.useCreateElement) {
                var u = t._ownerDocument
                  , l = u.createComment(a);
                return o.precacheNode(this, l),
                r(l)
            }
            return A.renderToStaticMarkup ? "" : "<!--" + a + "-->"
        },
        receiveComponent: function() {},
        getHostNode: function() {
            return o.getNodeFromInstance(this)
        },
        unmountComponent: function() {
            o.uncacheNode(this)
        }
    }),
    A.exports = i
}
, function(A, e) {
    "use strict";
    var t = {
        useCreateElement: !0,
        useFiber: !1
    };
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    var n = t(120)
      , r = t(13)
      , o = {
        dangerouslyProcessChildrenUpdates: function(A, e) {
            var t = r.getNodeFromInstance(A);
            n.processUpdates(t, e)
        }
    };
    A.exports = o
}
, function(A, e, t) {
    "use strict";
    function n() {
        this._rootNodeID && p.updateWrapper(this)
    }
    function r(A) {
        var e = "checkbox" === A.type || "radio" === A.type;
        return e ? null != A.checked : null != A.value
    }
    function o(A) {
        var e = this._currentElement.props
          , t = l.executeOnChange(e, A);
        s.asap(n, this);
        var r = e.name;
        if ("radio" === e.type && null != r) {
            for (var o = c.getNodeFromInstance(this), a = o; a.parentNode; )
                a = a.parentNode;
            for (var u = a.querySelectorAll("input[name=" + JSON.stringify("" + r) + '][type="radio"]'), p = 0; p < u.length; p++) {
                var f = u[p];
                if (f !== o && f.form === o.form) {
                    var g = c.getInstanceFromNode(f);
                    g ? void 0 : i("90"),
                    s.asap(n, g)
                }
            }
        }
        return t
    }
    var i = t(8)
      , a = t(11)
      , u = t(276)
      , l = t(125)
      , c = t(13)
      , s = t(22)
      , p = (t(5),
    t(7),
    {
        getHostProps: function(A, e) {
            var t = l.getValue(e)
              , n = l.getChecked(e)
              , r = a({
                type: void 0,
                step: void 0,
                min: void 0,
                max: void 0
            }, e, {
                defaultChecked: void 0,
                defaultValue: void 0,
                value: null != t ? t : A._wrapperState.initialValue,
                checked: null != n ? n : A._wrapperState.initialChecked,
                onChange: A._wrapperState.onChange
            });
            return r
        },
        mountWrapper: function(A, e) {
            var t = e.defaultValue;
            A._wrapperState = {
                initialChecked: null != e.checked ? e.checked : e.defaultChecked,
                initialValue: null != e.value ? e.value : t,
                listeners: null,
                onChange: o.bind(A),
                controlled: r(e)
            }
        },
        updateWrapper: function(A) {
            var e = A._currentElement.props
              , t = e.checked;
            null != t && u.setValueForProperty(c.getNodeFromInstance(A), "checked", t || !1);
            var n = c.getNodeFromInstance(A)
              , r = l.getValue(e);
            if (null != r)
                if (0 === r && "" === n.value)
                    n.value = "0";
                else if ("number" === e.type) {
                    var o = parseFloat(n.value, 10) || 0;
                    (r != o || r == o && n.value != r) && (n.value = "" + r)
                } else
                    n.value !== "" + r && (n.value = "" + r);
            else
                null == e.value && null != e.defaultValue && n.defaultValue !== "" + e.defaultValue && (n.defaultValue = "" + e.defaultValue),
                null == e.checked && null != e.defaultChecked && (n.defaultChecked = !!e.defaultChecked)
        },
        postMountWrapper: function(A) {
            var e = A._currentElement.props
              , t = c.getNodeFromInstance(A);
            switch (e.type) {
            case "submit":
            case "reset":
                break;
            case "color":
            case "date":
            case "datetime":
            case "datetime-local":
            case "month":
            case "time":
            case "week":
                t.value = "",
                t.value = t.defaultValue;
                break;
            default:
                t.value = t.value
            }
            var n = t.name;
            "" !== n && (t.name = ""),
            t.defaultChecked = !t.defaultChecked,
            t.defaultChecked = !t.defaultChecked,
            "" !== n && (t.name = n)
        }
    });
    A.exports = p
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        var e = "";
        return o.Children.forEach(A, function(A) {
            null != A && ("string" == typeof A || "number" == typeof A ? e += A : u || (u = !0))
        }),
        e
    }
    var r = t(11)
      , o = t(43)
      , i = t(13)
      , a = t(278)
      , u = (t(7),
    !1)
      , l = {
        mountWrapper: function(A, e, t) {
            var r = null;
            if (null != t) {
                var o = t;
                "optgroup" === o._tag && (o = o._hostParent),
                null != o && "select" === o._tag && (r = a.getSelectValueContext(o))
            }
            var i = null;
            if (null != r) {
                var u;
                if (u = null != e.value ? e.value + "" : n(e.children),
                i = !1,
                Array.isArray(r)) {
                    for (var l = 0; l < r.length; l++)
                        if ("" + r[l] === u) {
                            i = !0;
                            break
                        }
                } else
                    i = "" + r === u
            }
            A._wrapperState = {
                selected: i
            }
        },
        postMountWrapper: function(A) {
            var e = A._currentElement.props;
            if (null != e.value) {
                var t = i.getNodeFromInstance(A);
                t.setAttribute("value", e.value)
            }
        },
        getHostProps: function(A, e) {
            var t = r({
                selected: void 0,
                children: void 0
            }, e);
            null != A._wrapperState.selected && (t.selected = A._wrapperState.selected);
            var o = n(e.children);
            return o && (t.children = o),
            t
        }
    };
    A.exports = l
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return A === t && e === n
    }
    function r(A) {
        var e = document.selection
          , t = e.createRange()
          , n = t.text.length
          , r = t.duplicate();
        r.moveToElementText(A),
        r.setEndPoint("EndToStart", t);
        var o = r.text.length
          , i = o + n;
        return {
            start: o,
            end: i
        }
    }
    function o(A) {
        var e = window.getSelection && window.getSelection();
        if (!e || 0 === e.rangeCount)
            return null;
        var t = e.anchorNode
          , r = e.anchorOffset
          , o = e.focusNode
          , i = e.focusOffset
          , a = e.getRangeAt(0);
        try {
            a.startContainer.nodeType,
            a.endContainer.nodeType
        } catch (A) {
            return null
        }
        var u = n(e.anchorNode, e.anchorOffset, e.focusNode, e.focusOffset)
          , l = u ? 0 : a.toString().length
          , c = a.cloneRange();
        c.selectNodeContents(A),
        c.setEnd(a.startContainer, a.startOffset);
        var s = n(c.startContainer, c.startOffset, c.endContainer, c.endOffset)
          , p = s ? 0 : c.toString().length
          , f = p + l
          , g = document.createRange();
        g.setStart(t, r),
        g.setEnd(o, i);
        var I = g.collapsed;
        return {
            start: I ? f : p,
            end: I ? p : f
        }
    }
    function i(A, e) {
        var t, n, r = document.selection.createRange().duplicate();
        void 0 === e.end ? (t = e.start,
        n = t) : e.start > e.end ? (t = e.end,
        n = e.start) : (t = e.start,
        n = e.end),
        r.moveToElementText(A),
        r.moveStart("character", t),
        r.setEndPoint("EndToStart", r),
        r.moveEnd("character", n - t),
        r.select()
    }
    function a(A, e) {
        if (window.getSelection) {
            var t = window.getSelection()
              , n = A[c()].length
              , r = Math.min(e.start, n)
              , o = void 0 === e.end ? r : Math.min(e.end, n);
            if (!t.extend && r > o) {
                var i = o;
                o = r,
                r = i
            }
            var a = l(A, r)
              , u = l(A, o);
            if (a && u) {
                var s = document.createRange();
                s.setStart(a.node, a.offset),
                t.removeAllRanges(),
                r > o ? (t.addRange(s),
                t.extend(u.node, u.offset)) : (s.setEnd(u.node, u.offset),
                t.addRange(s))
            }
        }
    }
    var u = t(16)
      , l = t(748)
      , c = t(289)
      , s = u.canUseDOM && "selection"in document && !("getSelection"in window)
      , p = {
        getOffsets: s ? r : o,
        setOffsets: s ? i : a
    };
    A.exports = p
}
, function(A, e, t) {
    "use strict";
    var n = t(8)
      , r = t(11)
      , o = t(120)
      , i = t(40)
      , a = t(13)
      , u = t(79)
      , l = (t(5),
    t(135),
    function(A) {
        this._currentElement = A,
        this._stringText = "" + A,
        this._hostNode = null,
        this._hostParent = null,
        this._domID = 0,
        this._mountIndex = 0,
        this._closingComment = null,
        this._commentNodes = null
    }
    );
    r(l.prototype, {
        mountComponent: function(A, e, t, n) {
            var r = t._idCounter++
              , o = " react-text: " + r + " "
              , l = " /react-text ";
            if (this._domID = r,
            this._hostParent = e,
            A.useCreateElement) {
                var c = t._ownerDocument
                  , s = c.createComment(o)
                  , p = c.createComment(l)
                  , f = i(c.createDocumentFragment());
                return i.queueChild(f, i(s)),
                this._stringText && i.queueChild(f, i(c.createTextNode(this._stringText))),
                i.queueChild(f, i(p)),
                a.precacheNode(this, s),
                this._closingComment = p,
                f
            }
            var g = u(this._stringText);
            return A.renderToStaticMarkup ? g : "<!--" + o + "-->" + g + "<!--" + l + "-->"
        },
        receiveComponent: function(A, e) {
            if (A !== this._currentElement) {
                this._currentElement = A;
                var t = "" + A;
                if (t !== this._stringText) {
                    this._stringText = t;
                    var n = this.getHostNode();
                    o.replaceDelimitedText(n[0], n[1], t)
                }
            }
        },
        getHostNode: function() {
            var A = this._commentNodes;
            if (A)
                return A;
            if (!this._closingComment)
                for (var e = a.getNodeFromInstance(this), t = e.nextSibling; ; ) {
                    if (null == t ? n("67", this._domID) : void 0,
                    8 === t.nodeType && " /react-text " === t.nodeValue) {
                        this._closingComment = t;
                        break
                    }
                    t = t.nextSibling
                }
            return A = [this._hostNode, this._closingComment],
            this._commentNodes = A,
            A
        },
        unmountComponent: function() {
            this._closingComment = null,
            this._commentNodes = null,
            a.uncacheNode(this)
        }
    }),
    A.exports = l
}
, function(A, e, t) {
    "use strict";
    function n() {
        this._rootNodeID && c.updateWrapper(this)
    }
    function r(A) {
        var e = this._currentElement.props
          , t = a.executeOnChange(e, A);
        return l.asap(n, this),
        t
    }
    var o = t(8)
      , i = t(11)
      , a = t(125)
      , u = t(13)
      , l = t(22)
      , c = (t(5),
    t(7),
    {
        getHostProps: function(A, e) {
            null != e.dangerouslySetInnerHTML ? o("91") : void 0;
            var t = i({}, e, {
                value: void 0,
                defaultValue: void 0,
                children: "" + A._wrapperState.initialValue,
                onChange: A._wrapperState.onChange
            });
            return t
        },
        mountWrapper: function(A, e) {
            var t = a.getValue(e)
              , n = t;
            if (null == t) {
                var i = e.defaultValue
                  , u = e.children;
                null != u && (null != i ? o("92") : void 0,
                Array.isArray(u) && (u.length <= 1 ? void 0 : o("93"),
                u = u[0]),
                i = "" + u),
                null == i && (i = ""),
                n = i
            }
            A._wrapperState = {
                initialValue: "" + n,
                listeners: null,
                onChange: r.bind(A)
            }
        },
        updateWrapper: function(A) {
            var e = A._currentElement.props
              , t = u.getNodeFromInstance(A)
              , n = a.getValue(e);
            if (null != n) {
                var r = "" + n;
                r !== t.value && (t.value = r),
                null == e.defaultValue && (t.defaultValue = r)
            }
            null != e.defaultValue && (t.defaultValue = e.defaultValue)
        },
        postMountWrapper: function(A) {
            var e = u.getNodeFromInstance(A)
              , t = e.textContent;
            t === A._wrapperState.initialValue && (e.value = t)
        }
    });
    A.exports = c
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        "_hostNode"in A ? void 0 : u("33"),
        "_hostNode"in e ? void 0 : u("33");
        for (var t = 0, n = A; n; n = n._hostParent)
            t++;
        for (var r = 0, o = e; o; o = o._hostParent)
            r++;
        for (; t - r > 0; )
            A = A._hostParent,
            t--;
        for (; r - t > 0; )
            e = e._hostParent,
            r--;
        for (var i = t; i--; ) {
            if (A === e)
                return A;
            A = A._hostParent,
            e = e._hostParent
        }
        return null
    }
    function r(A, e) {
        "_hostNode"in A ? void 0 : u("35"),
        "_hostNode"in e ? void 0 : u("35");
        for (; e; ) {
            if (e === A)
                return !0;
            e = e._hostParent
        }
        return !1
    }
    function o(A) {
        return "_hostNode"in A ? void 0 : u("36"),
        A._hostParent
    }
    function i(A, e, t) {
        for (var n = []; A; )
            n.push(A),
            A = A._hostParent;
        var r;
        for (r = n.length; r-- > 0; )
            e(n[r], "captured", t);
        for (r = 0; r < n.length; r++)
            e(n[r], "bubbled", t)
    }
    function a(A, e, t, r, o) {
        for (var i = A && e ? n(A, e) : null, a = []; A && A !== i; )
            a.push(A),
            A = A._hostParent;
        for (var u = []; e && e !== i; )
            u.push(e),
            e = e._hostParent;
        var l;
        for (l = 0; l < a.length; l++)
            t(a[l], "bubbled", r);
        for (l = u.length; l-- > 0; )
            t(u[l], "captured", o)
    }
    var u = t(8);
    t(5);
    A.exports = {
        isAncestor: r,
        getLowestCommonAncestor: n,
        getParentInstance: o,
        traverseTwoPhase: i,
        traverseEnterLeave: a
    }
}
, function(A, e, t) {
    "use strict";
    function n() {
        this.reinitializeTransaction()
    }
    var r = t(11)
      , o = t(22)
      , i = t(78)
      , a = t(18)
      , u = {
        initialize: a,
        close: function() {
            p.isBatchingUpdates = !1
        }
    }
      , l = {
        initialize: a,
        close: o.flushBatchedUpdates.bind(o)
    }
      , c = [l, u];
    r(n.prototype, i, {
        getTransactionWrappers: function() {
            return c
        }
    });
    var s = new n
      , p = {
        isBatchingUpdates: !1,
        batchedUpdates: function(A, e, t, n, r, o) {
            var i = p.isBatchingUpdates;
            return p.isBatchingUpdates = !0,
            i ? A(e, t, n, r, o) : s.perform(A, null, e, t, n, r, o)
        }
    };
    A.exports = p
}
, function(A, e, t) {
    "use strict";
    function n() {
        V || (V = !0,
        C.EventEmitter.injectReactEventListener(q),
        C.EventPluginHub.injectEventPluginOrder(a),
        C.EventPluginUtils.injectComponentTree(p),
        C.EventPluginUtils.injectTreeTraversal(g),
        C.EventPluginHub.injectEventPluginsByName({
            SimpleEventPlugin: M,
            EnterLeaveEventPlugin: u,
            ChangeEventPlugin: i,
            SelectEventPlugin: h,
            BeforeInputEventPlugin: o
        }),
        C.HostComponent.injectGenericComponentClass(s),
        C.HostComponent.injectTextComponentClass(I),
        C.DOMProperty.injectDOMPropertyConfig(r),
        C.DOMProperty.injectDOMPropertyConfig(l),
        C.DOMProperty.injectDOMPropertyConfig(y),
        C.EmptyComponent.injectEmptyComponentFactory(function(A) {
            return new f(A)
        }),
        C.Updates.injectReconcileTransaction(m),
        C.Updates.injectBatchingStrategy(d),
        C.Component.injectEnvironment(c))
    }
    var r = t(689)
      , o = t(691)
      , i = t(693)
      , a = t(695)
      , u = t(696)
      , l = t(698)
      , c = t(700)
      , s = t(703)
      , p = t(13)
      , f = t(705)
      , g = t(713)
      , I = t(711)
      , d = t(714)
      , q = t(718)
      , C = t(719)
      , m = t(724)
      , y = t(729)
      , h = t(730)
      , M = t(731)
      , V = !1;
    A.exports = {
        inject: n
    }
}
, 306, function(A, e, t) {
    "use strict";
    function n(A) {
        r.enqueueEvents(A),
        r.processEventQueue(!1)
    }
    var r = t(54)
      , o = {
        handleTopLevel: function(A, e, t, o) {
            var i = r.extractEvents(A, e, t, o);
            n(i)
        }
    };
    A.exports = o
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        for (; A._hostParent; )
            A = A._hostParent;
        var e = s.getNodeFromInstance(A)
          , t = e.parentNode;
        return s.getClosestInstanceFromNode(t)
    }
    function r(A, e) {
        this.topLevelType = A,
        this.nativeEvent = e,
        this.ancestors = []
    }
    function o(A) {
        var e = f(A.nativeEvent)
          , t = s.getClosestInstanceFromNode(e)
          , r = t;
        do
            A.ancestors.push(r),
            r = r && n(r);
        while (r);for (var o = 0; o < A.ancestors.length; o++)
            t = A.ancestors[o],
            I._handleTopLevel(A.topLevelType, t, A.nativeEvent, f(A.nativeEvent))
    }
    function i(A) {
        var e = g(window);
        A(e)
    }
    var a = t(11)
      , u = t(185)
      , l = t(16)
      , c = t(32)
      , s = t(13)
      , p = t(22)
      , f = t(132)
      , g = t(453);
    a(r.prototype, {
        destructor: function() {
            this.topLevelType = null,
            this.nativeEvent = null,
            this.ancestors.length = 0
        }
    }),
    c.addPoolingTo(r, c.twoArgumentPooler);
    var I = {
        _enabled: !0,
        _handleTopLevel: null,
        WINDOW_HANDLE: l.canUseDOM ? window : null,
        setHandleTopLevel: function(A) {
            I._handleTopLevel = A
        },
        setEnabled: function(A) {
            I._enabled = !!A
        },
        isEnabled: function() {
            return I._enabled
        },
        trapBubbledEvent: function(A, e, t) {
            return t ? u.listen(t, e, I.dispatchEvent.bind(null, A)) : null
        },
        trapCapturedEvent: function(A, e, t) {
            return t ? u.capture(t, e, I.dispatchEvent.bind(null, A)) : null
        },
        monitorScrollValue: function(A) {
            var e = i.bind(null, A);
            u.listen(window, "scroll", e)
        },
        dispatchEvent: function(A, e) {
            if (I._enabled) {
                var t = r.getPooled(A, e);
                try {
                    p.batchedUpdates(o, t)
                } finally {
                    r.release(t)
                }
            }
        }
    };
    A.exports = I
}
, function(A, e, t) {
    "use strict";
    var n = t(41)
      , r = t(54)
      , o = t(123)
      , i = t(126)
      , a = t(279)
      , u = t(76)
      , l = t(281)
      , c = t(22)
      , s = {
        Component: i.injection,
        DOMProperty: n.injection,
        EmptyComponent: a.injection,
        EventPluginHub: r.injection,
        EventPluginUtils: o.injection,
        EventEmitter: u.injection,
        HostComponent: l.injection,
        Updates: c.injection
    };
    A.exports = s
}
, function(A, e, t) {
    "use strict";
    var n = t(742)
      , r = /\/?>/
      , o = /^<\!\-\-/
      , i = {
        CHECKSUM_ATTR_NAME: "data-react-checksum",
        addChecksumToMarkup: function(A) {
            var e = n(A);
            return o.test(A) ? A : A.replace(r, " " + i.CHECKSUM_ATTR_NAME + '="' + e + '"$&')
        },
        canReuseMarkup: function(A, e) {
            var t = e.getAttribute(i.CHECKSUM_ATTR_NAME);
            t = t && parseInt(t, 10);
            var r = n(A);
            return r === t
        }
    };
    A.exports = i
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t) {
        return {
            type: "INSERT_MARKUP",
            content: A,
            fromIndex: null,
            fromNode: null,
            toIndex: t,
            afterNode: e
        }
    }
    function r(A, e, t) {
        return {
            type: "MOVE_EXISTING",
            content: null,
            fromIndex: A._mountIndex,
            fromNode: p.getHostNode(A),
            toIndex: t,
            afterNode: e
        }
    }
    function o(A, e) {
        return {
            type: "REMOVE_NODE",
            content: null,
            fromIndex: A._mountIndex,
            fromNode: e,
            toIndex: null,
            afterNode: null
        }
    }
    function i(A) {
        return {
            type: "SET_MARKUP",
            content: A,
            fromIndex: null,
            fromNode: null,
            toIndex: null,
            afterNode: null
        }
    }
    function a(A) {
        return {
            type: "TEXT_CONTENT",
            content: A,
            fromIndex: null,
            fromNode: null,
            toIndex: null,
            afterNode: null
        }
    }
    function u(A, e) {
        return e && (A = A || [],
        A.push(e)),
        A
    }
    function l(A, e) {
        s.processChildrenUpdates(A, e)
    }
    var c = t(8)
      , s = t(126)
      , p = (t(56),
    t(19),
    t(26),
    t(42))
      , f = t(699)
      , g = (t(18),
    t(745))
      , I = (t(5),
    {
        Mixin: {
            _reconcilerInstantiateChildren: function(A, e, t) {
                return f.instantiateChildren(A, e, t)
            },
            _reconcilerUpdateChildren: function(A, e, t, n, r, o) {
                var i, a = 0;
                return i = g(e, a),
                f.updateChildren(A, i, t, n, r, this, this._hostContainerInfo, o, a),
                i
            },
            mountChildren: function(A, e, t) {
                var n = this._reconcilerInstantiateChildren(A, e, t);
                this._renderedChildren = n;
                var r = []
                  , o = 0;
                for (var i in n)
                    if (n.hasOwnProperty(i)) {
                        var a = n[i]
                          , u = 0
                          , l = p.mountComponent(a, e, this, this._hostContainerInfo, t, u);
                        a._mountIndex = o++,
                        r.push(l)
                    }
                return r
            },
            updateTextContent: function(A) {
                var e = this._renderedChildren;
                f.unmountChildren(e, !1);
                for (var t in e)
                    e.hasOwnProperty(t) && c("118");
                var n = [a(A)];
                l(this, n)
            },
            updateMarkup: function(A) {
                var e = this._renderedChildren;
                f.unmountChildren(e, !1);
                for (var t in e)
                    e.hasOwnProperty(t) && c("118");
                var n = [i(A)];
                l(this, n)
            },
            updateChildren: function(A, e, t) {
                this._updateChildren(A, e, t)
            },
            _updateChildren: function(A, e, t) {
                var n = this._renderedChildren
                  , r = {}
                  , o = []
                  , i = this._reconcilerUpdateChildren(n, A, o, r, e, t);
                if (i || n) {
                    var a, c = null, s = 0, f = 0, g = 0, I = null;
                    for (a in i)
                        if (i.hasOwnProperty(a)) {
                            var d = n && n[a]
                              , q = i[a];
                            d === q ? (c = u(c, this.moveChild(d, I, s, f)),
                            f = Math.max(d._mountIndex, f),
                            d._mountIndex = s) : (d && (f = Math.max(d._mountIndex, f)),
                            c = u(c, this._mountChildAtIndex(q, o[g], I, s, e, t)),
                            g++),
                            s++,
                            I = p.getHostNode(q)
                        }
                    for (a in r)
                        r.hasOwnProperty(a) && (c = u(c, this._unmountChild(n[a], r[a])));
                    c && l(this, c),
                    this._renderedChildren = i
                }
            },
            unmountChildren: function(A) {
                var e = this._renderedChildren;
                f.unmountChildren(e, A),
                this._renderedChildren = null
            },
            moveChild: function(A, e, t, n) {
                if (A._mountIndex < n)
                    return r(A, e, t)
            },
            createChild: function(A, e, t) {
                return n(t, e, A._mountIndex)
            },
            removeChild: function(A, e) {
                return o(A, e)
            },
            _mountChildAtIndex: function(A, e, t, n, r, o) {
                return A._mountIndex = n,
                this.createChild(A, t, e)
            },
            _unmountChild: function(A, e) {
                var t = this.removeChild(A, e);
                return A._mountIndex = null,
                t
            }
        }
    });
    A.exports = I
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return !(!A || "function" != typeof A.attachRef || "function" != typeof A.detachRef)
    }
    var r = t(8)
      , o = (t(5),
    {
        addComponentAsRefTo: function(A, e, t) {
            n(t) ? void 0 : r("119"),
            t.attachRef(e, A)
        },
        removeComponentAsRefFrom: function(A, e, t) {
            n(t) ? void 0 : r("120");
            var o = t.getPublicInstance();
            o && o.refs[e] === A.getPublicInstance() && t.detachRef(e)
        }
    });
    A.exports = o
}
, function(A, e) {
    "use strict";
    var t = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        this.reinitializeTransaction(),
        this.renderToStaticMarkup = !1,
        this.reactMountReady = o.getPooled(null),
        this.useCreateElement = A
    }
    var r = t(11)
      , o = t(275)
      , i = t(32)
      , a = t(76)
      , u = t(282)
      , l = (t(19),
    t(78))
      , c = t(128)
      , s = {
        initialize: u.getSelectionInformation,
        close: u.restoreSelection
    }
      , p = {
        initialize: function() {
            var A = a.isEnabled();
            return a.setEnabled(!1),
            A
        },
        close: function(A) {
            a.setEnabled(A)
        }
    }
      , f = {
        initialize: function() {
            this.reactMountReady.reset()
        },
        close: function() {
            this.reactMountReady.notifyAll()
        }
    }
      , g = [s, p, f]
      , I = {
        getTransactionWrappers: function() {
            return g
        },
        getReactMountReady: function() {
            return this.reactMountReady
        },
        getUpdateQueue: function() {
            return c
        },
        checkpoint: function() {
            return this.reactMountReady.checkpoint()
        },
        rollback: function(A) {
            this.reactMountReady.rollback(A)
        },
        destructor: function() {
            o.release(this.reactMountReady),
            this.reactMountReady = null
        }
    };
    r(n.prototype, l, I),
    i.addPoolingTo(n),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t) {
        "function" == typeof A ? A(e.getPublicInstance()) : o.addComponentAsRefTo(e, A, t)
    }
    function r(A, e, t) {
        "function" == typeof A ? A(null) : o.removeComponentAsRefFrom(e, A, t)
    }
    var o = t(722)
      , i = {};
    i.attachRefs = function(A, e) {
        if (null !== e && "object" == typeof e) {
            var t = e.ref;
            null != t && n(t, A, e._owner)
        }
    }
    ,
    i.shouldUpdateRefs = function(A, e) {
        var t = null
          , n = null;
        null !== A && "object" == typeof A && (t = A.ref,
        n = A._owner);
        var r = null
          , o = null;
        return null !== e && "object" == typeof e && (r = e.ref,
        o = e._owner),
        t !== r || "string" == typeof r && o !== n
    }
    ,
    i.detachRefs = function(A, e) {
        if (null !== e && "object" == typeof e) {
            var t = e.ref;
            null != t && r(t, A, e._owner)
        }
    }
    ,
    A.exports = i
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        this.reinitializeTransaction(),
        this.renderToStaticMarkup = A,
        this.useCreateElement = !1,
        this.updateQueue = new a(this)
    }
    var r = t(11)
      , o = t(32)
      , i = t(78)
      , a = (t(19),
    t(727))
      , u = []
      , l = {
        enqueue: function() {}
    }
      , c = {
        getTransactionWrappers: function() {
            return u
        },
        getReactMountReady: function() {
            return l
        },
        getUpdateQueue: function() {
            return this.updateQueue
        },
        destructor: function() {},
        checkpoint: function() {},
        rollback: function() {}
    };
    r(n.prototype, i, c),
    o.addPoolingTo(n),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function r(A, e) {}
    var o = t(128)
      , i = (t(7),
    function() {
        function A(e) {
            n(this, A),
            this.transaction = e
        }
        return A.prototype.isMounted = function(A) {
            return !1
        }
        ,
        A.prototype.enqueueCallback = function(A, e, t) {
            this.transaction.isInTransaction() && o.enqueueCallback(A, e, t)
        }
        ,
        A.prototype.enqueueForceUpdate = function(A) {
            this.transaction.isInTransaction() ? o.enqueueForceUpdate(A) : r(A, "forceUpdate")
        }
        ,
        A.prototype.enqueueReplaceState = function(A, e) {
            this.transaction.isInTransaction() ? o.enqueueReplaceState(A, e) : r(A, "replaceState")
        }
        ,
        A.prototype.enqueueSetState = function(A, e) {
            this.transaction.isInTransaction() ? o.enqueueSetState(A, e) : r(A, "setState")
        }
        ,
        A
    }());
    A.exports = i
}
, function(A, e) {
    "use strict";
    A.exports = "15.6.1"
}
, function(A, e) {
    "use strict";
    var t = {
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace"
    }
      , n = {
        accentHeight: "accent-height",
        accumulate: 0,
        additive: 0,
        alignmentBaseline: "alignment-baseline",
        allowReorder: "allowReorder",
        alphabetic: 0,
        amplitude: 0,
        arabicForm: "arabic-form",
        ascent: 0,
        attributeName: "attributeName",
        attributeType: "attributeType",
        autoReverse: "autoReverse",
        azimuth: 0,
        baseFrequency: "baseFrequency",
        baseProfile: "baseProfile",
        baselineShift: "baseline-shift",
        bbox: 0,
        begin: 0,
        bias: 0,
        by: 0,
        calcMode: "calcMode",
        capHeight: "cap-height",
        clip: 0,
        clipPath: "clip-path",
        clipRule: "clip-rule",
        clipPathUnits: "clipPathUnits",
        colorInterpolation: "color-interpolation",
        colorInterpolationFilters: "color-interpolation-filters",
        colorProfile: "color-profile",
        colorRendering: "color-rendering",
        contentScriptType: "contentScriptType",
        contentStyleType: "contentStyleType",
        cursor: 0,
        cx: 0,
        cy: 0,
        d: 0,
        decelerate: 0,
        descent: 0,
        diffuseConstant: "diffuseConstant",
        direction: 0,
        display: 0,
        divisor: 0,
        dominantBaseline: "dominant-baseline",
        dur: 0,
        dx: 0,
        dy: 0,
        edgeMode: "edgeMode",
        elevation: 0,
        enableBackground: "enable-background",
        end: 0,
        exponent: 0,
        externalResourcesRequired: "externalResourcesRequired",
        fill: 0,
        fillOpacity: "fill-opacity",
        fillRule: "fill-rule",
        filter: 0,
        filterRes: "filterRes",
        filterUnits: "filterUnits",
        floodColor: "flood-color",
        floodOpacity: "flood-opacity",
        focusable: 0,
        fontFamily: "font-family",
        fontSize: "font-size",
        fontSizeAdjust: "font-size-adjust",
        fontStretch: "font-stretch",
        fontStyle: "font-style",
        fontVariant: "font-variant",
        fontWeight: "font-weight",
        format: 0,
        from: 0,
        fx: 0,
        fy: 0,
        g1: 0,
        g2: 0,
        glyphName: "glyph-name",
        glyphOrientationHorizontal: "glyph-orientation-horizontal",
        glyphOrientationVertical: "glyph-orientation-vertical",
        glyphRef: "glyphRef",
        gradientTransform: "gradientTransform",
        gradientUnits: "gradientUnits",
        hanging: 0,
        horizAdvX: "horiz-adv-x",
        horizOriginX: "horiz-origin-x",
        ideographic: 0,
        imageRendering: "image-rendering",
        in: 0,
        in2: 0,
        intercept: 0,
        k: 0,
        k1: 0,
        k2: 0,
        k3: 0,
        k4: 0,
        kernelMatrix: "kernelMatrix",
        kernelUnitLength: "kernelUnitLength",
        kerning: 0,
        keyPoints: "keyPoints",
        keySplines: "keySplines",
        keyTimes: "keyTimes",
        lengthAdjust: "lengthAdjust",
        letterSpacing: "letter-spacing",
        lightingColor: "lighting-color",
        limitingConeAngle: "limitingConeAngle",
        local: 0,
        markerEnd: "marker-end",
        markerMid: "marker-mid",
        markerStart: "marker-start",
        markerHeight: "markerHeight",
        markerUnits: "markerUnits",
        markerWidth: "markerWidth",
        mask: 0,
        maskContentUnits: "maskContentUnits",
        maskUnits: "maskUnits",
        mathematical: 0,
        mode: 0,
        numOctaves: "numOctaves",
        offset: 0,
        opacity: 0,
        operator: 0,
        order: 0,
        orient: 0,
        orientation: 0,
        origin: 0,
        overflow: 0,
        overlinePosition: "overline-position",
        overlineThickness: "overline-thickness",
        paintOrder: "paint-order",
        panose1: "panose-1",
        pathLength: "pathLength",
        patternContentUnits: "patternContentUnits",
        patternTransform: "patternTransform",
        patternUnits: "patternUnits",
        pointerEvents: "pointer-events",
        points: 0,
        pointsAtX: "pointsAtX",
        pointsAtY: "pointsAtY",
        pointsAtZ: "pointsAtZ",
        preserveAlpha: "preserveAlpha",
        preserveAspectRatio: "preserveAspectRatio",
        primitiveUnits: "primitiveUnits",
        r: 0,
        radius: 0,
        refX: "refX",
        refY: "refY",
        renderingIntent: "rendering-intent",
        repeatCount: "repeatCount",
        repeatDur: "repeatDur",
        requiredExtensions: "requiredExtensions",
        requiredFeatures: "requiredFeatures",
        restart: 0,
        result: 0,
        rotate: 0,
        rx: 0,
        ry: 0,
        scale: 0,
        seed: 0,
        shapeRendering: "shape-rendering",
        slope: 0,
        spacing: 0,
        specularConstant: "specularConstant",
        specularExponent: "specularExponent",
        speed: 0,
        spreadMethod: "spreadMethod",
        startOffset: "startOffset",
        stdDeviation: "stdDeviation",
        stemh: 0,
        stemv: 0,
        stitchTiles: "stitchTiles",
        stopColor: "stop-color",
        stopOpacity: "stop-opacity",
        strikethroughPosition: "strikethrough-position",
        strikethroughThickness: "strikethrough-thickness",
        string: 0,
        stroke: 0,
        strokeDasharray: "stroke-dasharray",
        strokeDashoffset: "stroke-dashoffset",
        strokeLinecap: "stroke-linecap",
        strokeLinejoin: "stroke-linejoin",
        strokeMiterlimit: "stroke-miterlimit",
        strokeOpacity: "stroke-opacity",
        strokeWidth: "stroke-width",
        surfaceScale: "surfaceScale",
        systemLanguage: "systemLanguage",
        tableValues: "tableValues",
        targetX: "targetX",
        targetY: "targetY",
        textAnchor: "text-anchor",
        textDecoration: "text-decoration",
        textRendering: "text-rendering",
        textLength: "textLength",
        to: 0,
        transform: 0,
        u1: 0,
        u2: 0,
        underlinePosition: "underline-position",
        underlineThickness: "underline-thickness",
        unicode: 0,
        unicodeBidi: "unicode-bidi",
        unicodeRange: "unicode-range",
        unitsPerEm: "units-per-em",
        vAlphabetic: "v-alphabetic",
        vHanging: "v-hanging",
        vIdeographic: "v-ideographic",
        vMathematical: "v-mathematical",
        values: 0,
        vectorEffect: "vector-effect",
        version: 0,
        vertAdvY: "vert-adv-y",
        vertOriginX: "vert-origin-x",
        vertOriginY: "vert-origin-y",
        viewBox: "viewBox",
        viewTarget: "viewTarget",
        visibility: 0,
        widths: 0,
        wordSpacing: "word-spacing",
        writingMode: "writing-mode",
        x: 0,
        xHeight: "x-height",
        x1: 0,
        x2: 0,
        xChannelSelector: "xChannelSelector",
        xlinkActuate: "xlink:actuate",
        xlinkArcrole: "xlink:arcrole",
        xlinkHref: "xlink:href",
        xlinkRole: "xlink:role",
        xlinkShow: "xlink:show",
        xlinkTitle: "xlink:title",
        xlinkType: "xlink:type",
        xmlBase: "xml:base",
        xmlns: 0,
        xmlnsXlink: "xmlns:xlink",
        xmlLang: "xml:lang",
        xmlSpace: "xml:space",
        y: 0,
        y1: 0,
        y2: 0,
        yChannelSelector: "yChannelSelector",
        z: 0,
        zoomAndPan: "zoomAndPan"
    }
      , r = {
        Properties: {},
        DOMAttributeNamespaces: {
            xlinkActuate: t.xlink,
            xlinkArcrole: t.xlink,
            xlinkHref: t.xlink,
            xlinkRole: t.xlink,
            xlinkShow: t.xlink,
            xlinkTitle: t.xlink,
            xlinkType: t.xlink,
            xmlBase: t.xml,
            xmlLang: t.xml,
            xmlSpace: t.xml
        },
        DOMAttributeNames: {}
    };
    Object.keys(n).forEach(function(A) {
        r.Properties[A] = 0,
        n[A] && (r.DOMAttributeNames[A] = n[A])
    }),
    A.exports = r
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if ("selectionStart"in A && u.hasSelectionCapabilities(A))
            return {
                start: A.selectionStart,
                end: A.selectionEnd
            };
        if (window.getSelection) {
            var e = window.getSelection();
            return {
                anchorNode: e.anchorNode,
                anchorOffset: e.anchorOffset,
                focusNode: e.focusNode,
                focusOffset: e.focusOffset
            }
        }
        if (document.selection) {
            var t = document.selection.createRange();
            return {
                parentElement: t.parentElement(),
                text: t.text,
                top: t.boundingTop,
                left: t.boundingLeft
            }
        }
    }
    function r(A, e) {
        if (C || null == I || I !== c())
            return null;
        var t = n(I);
        if (!q || !p(q, t)) {
            q = t;
            var r = l.getPooled(g.select, d, A, e);
            return r.type = "select",
            r.target = I,
            o.accumulateTwoPhaseDispatches(r),
            r
        }
        return null
    }
    var o = t(55)
      , i = t(16)
      , a = t(13)
      , u = t(282)
      , l = t(25)
      , c = t(187)
      , s = t(292)
      , p = t(110)
      , f = i.canUseDOM && "documentMode"in document && document.documentMode <= 11
      , g = {
        select: {
            phasedRegistrationNames: {
                bubbled: "onSelect",
                captured: "onSelectCapture"
            },
            dependencies: ["topBlur", "topContextMenu", "topFocus", "topKeyDown", "topKeyUp", "topMouseDown", "topMouseUp", "topSelectionChange"]
        }
    }
      , I = null
      , d = null
      , q = null
      , C = !1
      , m = !1
      , y = {
        eventTypes: g,
        extractEvents: function(A, e, t, n) {
            if (!m)
                return null;
            var o = e ? a.getNodeFromInstance(e) : window;
            switch (A) {
            case "topFocus":
                (s(o) || "true" === o.contentEditable) && (I = o,
                d = e,
                q = null);
                break;
            case "topBlur":
                I = null,
                d = null,
                q = null;
                break;
            case "topMouseDown":
                C = !0;
                break;
            case "topContextMenu":
            case "topMouseUp":
                return C = !1,
                r(t, n);
            case "topSelectionChange":
                if (f)
                    break;
            case "topKeyDown":
            case "topKeyUp":
                return r(t, n)
            }
            return null
        },
        didPutListener: function(A, e, t) {
            "onSelect" === e && (m = !0)
        }
    };
    A.exports = y
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return "." + A._rootNodeID
    }
    function r(A) {
        return "button" === A || "input" === A || "select" === A || "textarea" === A
    }
    var o = t(8)
      , i = t(185)
      , a = t(55)
      , u = t(13)
      , l = t(732)
      , c = t(733)
      , s = t(25)
      , p = t(736)
      , f = t(738)
      , g = t(77)
      , I = t(735)
      , d = t(739)
      , q = t(740)
      , C = t(57)
      , m = t(741)
      , y = t(18)
      , h = t(130)
      , M = (t(5),
    {})
      , V = {};
    ["abort", "animationEnd", "animationIteration", "animationStart", "blur", "canPlay", "canPlayThrough", "click", "contextMenu", "copy", "cut", "doubleClick", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "focus", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "progress", "rateChange", "reset", "scroll", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchMove", "touchStart", "transitionEnd", "volumeChange", "waiting", "wheel"].forEach(function(A) {
        var e = A[0].toUpperCase() + A.slice(1)
          , t = "on" + e
          , n = "top" + e
          , r = {
            phasedRegistrationNames: {
                bubbled: t,
                captured: t + "Capture"
            },
            dependencies: [n]
        };
        M[A] = r,
        V[n] = r
    });
    var E = {}
      , S = {
        eventTypes: M,
        extractEvents: function(A, e, t, n) {
            var r = V[A];
            if (!r)
                return null;
            var i;
            switch (A) {
            case "topAbort":
            case "topCanPlay":
            case "topCanPlayThrough":
            case "topDurationChange":
            case "topEmptied":
            case "topEncrypted":
            case "topEnded":
            case "topError":
            case "topInput":
            case "topInvalid":
            case "topLoad":
            case "topLoadedData":
            case "topLoadedMetadata":
            case "topLoadStart":
            case "topPause":
            case "topPlay":
            case "topPlaying":
            case "topProgress":
            case "topRateChange":
            case "topReset":
            case "topSeeked":
            case "topSeeking":
            case "topStalled":
            case "topSubmit":
            case "topSuspend":
            case "topTimeUpdate":
            case "topVolumeChange":
            case "topWaiting":
                i = s;
                break;
            case "topKeyPress":
                if (0 === h(t))
                    return null;
            case "topKeyDown":
            case "topKeyUp":
                i = f;
                break;
            case "topBlur":
            case "topFocus":
                i = p;
                break;
            case "topClick":
                if (2 === t.button)
                    return null;
            case "topDoubleClick":
            case "topMouseDown":
            case "topMouseMove":
            case "topMouseUp":
            case "topMouseOut":
            case "topMouseOver":
            case "topContextMenu":
                i = g;
                break;
            case "topDrag":
            case "topDragEnd":
            case "topDragEnter":
            case "topDragExit":
            case "topDragLeave":
            case "topDragOver":
            case "topDragStart":
            case "topDrop":
                i = I;
                break;
            case "topTouchCancel":
            case "topTouchEnd":
            case "topTouchMove":
            case "topTouchStart":
                i = d;
                break;
            case "topAnimationEnd":
            case "topAnimationIteration":
            case "topAnimationStart":
                i = l;
                break;
            case "topTransitionEnd":
                i = q;
                break;
            case "topScroll":
                i = C;
                break;
            case "topWheel":
                i = m;
                break;
            case "topCopy":
            case "topCut":
            case "topPaste":
                i = c
            }
            i ? void 0 : o("86", A);
            var u = i.getPooled(r, e, t, n);
            return a.accumulateTwoPhaseDispatches(u),
            u
        },
        didPutListener: function(A, e, t) {
            if ("onClick" === e && !r(A._tag)) {
                var o = n(A)
                  , a = u.getNodeFromInstance(A);
                E[o] || (E[o] = i.listen(a, "click", y))
            }
        },
        willDeleteListener: function(A, e) {
            if ("onClick" === e && !r(A._tag)) {
                var t = n(A);
                E[t].remove(),
                delete E[t]
            }
        }
    };
    A.exports = S
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(25)
      , o = {
        animationName: null,
        elapsedTime: null,
        pseudoElement: null
    };
    r.augmentClass(n, o),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(25)
      , o = {
        clipboardData: function(A) {
            return "clipboardData"in A ? A.clipboardData : window.clipboardData
        }
    };
    r.augmentClass(n, o),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(25)
      , o = {
        data: null
    };
    r.augmentClass(n, o),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(77)
      , o = {
        dataTransfer: null
    };
    r.augmentClass(n, o),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(57)
      , o = {
        relatedTarget: null
    };
    r.augmentClass(n, o),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(25)
      , o = {
        data: null
    };
    r.augmentClass(n, o),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(57)
      , o = t(130)
      , i = t(746)
      , a = t(131)
      , u = {
        key: i,
        location: null,
        ctrlKey: null,
        shiftKey: null,
        altKey: null,
        metaKey: null,
        repeat: null,
        locale: null,
        getModifierState: a,
        charCode: function(A) {
            return "keypress" === A.type ? o(A) : 0
        },
        keyCode: function(A) {
            return "keydown" === A.type || "keyup" === A.type ? A.keyCode : 0
        },
        which: function(A) {
            return "keypress" === A.type ? o(A) : "keydown" === A.type || "keyup" === A.type ? A.keyCode : 0
        }
    };
    r.augmentClass(n, u),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(57)
      , o = t(131)
      , i = {
        touches: null,
        targetTouches: null,
        changedTouches: null,
        altKey: null,
        metaKey: null,
        ctrlKey: null,
        shiftKey: null,
        getModifierState: o
    };
    r.augmentClass(n, i),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(25)
      , o = {
        propertyName: null,
        elapsedTime: null,
        pseudoElement: null
    };
    r.augmentClass(n, o),
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        return r.call(this, A, e, t, n)
    }
    var r = t(77)
      , o = {
        deltaX: function(A) {
            return "deltaX"in A ? A.deltaX : "wheelDeltaX"in A ? -A.wheelDeltaX : 0
        },
        deltaY: function(A) {
            return "deltaY"in A ? A.deltaY : "wheelDeltaY"in A ? -A.wheelDeltaY : "wheelDelta"in A ? -A.wheelDelta : 0
        },
        deltaZ: null,
        deltaMode: null
    };
    r.augmentClass(n, o),
    A.exports = n
}
, function(A, e) {
    "use strict";
    function t(A) {
        for (var e = 1, t = 0, r = 0, o = A.length, i = o & -4; r < i; ) {
            for (var a = Math.min(r + 4096, i); r < a; r += 4)
                t += (e += A.charCodeAt(r)) + (e += A.charCodeAt(r + 1)) + (e += A.charCodeAt(r + 2)) + (e += A.charCodeAt(r + 3));
            e %= n,
            t %= n
        }
        for (; r < o; r++)
            t += e += A.charCodeAt(r);
        return e %= n,
        t %= n,
        e | t << 16
    }
    var n = 65521;
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t, n) {
        var r = null == e || "boolean" == typeof e || "" === e;
        if (r)
            return "";
        var i = isNaN(e);
        if (n || i || 0 === e || o.hasOwnProperty(A) && o[A])
            return "" + e;
        if ("string" == typeof e) {
            e = e.trim()
        }
        return e + "px"
    }
    var r = t(274)
      , o = (t(7),
    r.isUnitlessNumber);
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (null == A)
            return null;
        if (1 === A.nodeType)
            return A;
        var e = i.get(A);
        return e ? (e = a(e),
        e ? o.getNodeFromInstance(e) : null) : void ("function" == typeof A.render ? r("44") : r("45", Object.keys(A)))
    }
    var r = t(8)
      , o = (t(26),
    t(13))
      , i = t(56)
      , a = t(288);
    t(5),
    t(7);
    A.exports = n
}
, function(A, e, t) {
    (function(e) {
        "use strict";
        function n(A, e, t, n) {
            if (A && "object" == typeof A) {
                var r = A
                  , o = void 0 === r[t];
                o && null != e && (r[t] = e)
            }
        }
        function r(A, e) {
            if (null == A)
                return A;
            var t = {};
            return o(A, n, t),
            t
        }
        var o = (t(124),
        t(294));
        t(7);
        A.exports = r
    }
    ).call(e, t(39))
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        if (A.key) {
            var e = o[A.key] || A.key;
            if ("Unidentified" !== e)
                return e
        }
        if ("keypress" === A.type) {
            var t = r(A);
            return 13 === t ? "Enter" : String.fromCharCode(t)
        }
        return "keydown" === A.type || "keyup" === A.type ? i[A.keyCode] || "Unidentified" : ""
    }
    var r = t(130)
      , o = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
    }
      , i = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
    };
    A.exports = n
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = A && (n && A[n] || A[r]);
        if ("function" == typeof e)
            return e
    }
    var n = "function" == typeof Symbol && Symbol.iterator
      , r = "@@iterator";
    A.exports = t
}
, function(A, e) {
    "use strict";
    function t(A) {
        for (; A && A.firstChild; )
            A = A.firstChild;
        return A
    }
    function n(A) {
        for (; A; ) {
            if (A.nextSibling)
                return A.nextSibling;
            A = A.parentNode
        }
    }
    function r(A, e) {
        for (var r = t(A), o = 0, i = 0; r; ) {
            if (3 === r.nodeType) {
                if (i = o + r.textContent.length,
                o <= e && i >= e)
                    return {
                        node: r,
                        offset: e - o
                    };
                o = i
            }
            r = t(n(r))
        }
    }
    A.exports = r
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        var t = {};
        return t[A.toLowerCase()] = e.toLowerCase(),
        t["Webkit" + A] = "webkit" + e,
        t["Moz" + A] = "moz" + e,
        t["ms" + A] = "MS" + e,
        t["O" + A] = "o" + e.toLowerCase(),
        t
    }
    function r(A) {
        if (a[A])
            return a[A];
        if (!i[A])
            return A;
        var e = i[A];
        for (var t in e)
            if (e.hasOwnProperty(t) && t in u)
                return a[A] = e[t];
        return ""
    }
    var o = t(16)
      , i = {
        animationend: n("Animation", "AnimationEnd"),
        animationiteration: n("Animation", "AnimationIteration"),
        animationstart: n("Animation", "AnimationStart"),
        transitionend: n("Transition", "TransitionEnd")
    }
      , a = {}
      , u = {};
    o.canUseDOM && (u = document.createElement("div").style,
    "AnimationEvent"in window || (delete i.animationend.animation,
    delete i.animationiteration.animation,
    delete i.animationstart.animation),
    "TransitionEvent"in window || delete i.transitionend.transition),
    A.exports = r
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return '"' + r(A) + '"'
    }
    var r = t(79);
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    var n = t(283);
    A.exports = n.renderSubtreeIntoContainer
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(A) {
        return typeof A
    }
    : function(A) {
        return A && "function" == typeof Symbol && A.constructor === Symbol && A !== Symbol.prototype ? "symbol" : typeof A
    }
      , u = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
      , l = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , c = t(1)
      , s = n(c)
      , p = t(29)
      , f = n(p)
      , g = t(33)
      , I = t(755)
      , d = n(I)
      , q = t(754)
      , C = n(q)
      , m = t(757)
      , y = n(m)
      , h = t(753)
      , M = n(h)
      , V = t(756)
      , E = n(V)
      , S = {
        component: f.default.oneOfType([f.default.string, f.default.bool, d.default]),
        runOnMount: f.default.bool,
        appear: f.default.object,
        enter: f.default.object,
        leave: f.default.object,
        onEnter: f.default.func,
        onLeave: f.default.func
    }
      , k = function(A) {
        function e() {
            var A, t, n, i;
            r(this, e);
            for (var l = arguments.length, s = Array(l), p = 0; p < l; p++)
                s[p] = arguments[p];
            return t = n = o(this, (A = e.__proto__ || Object.getPrototypeOf(e)).call.apply(A, [this].concat(s))),
            n._getDefaultStyles = function() {
                return c.Children.map(n.props.children, function(A) {
                    if (A)
                        return {
                            key: A.key,
                            data: A,
                            style: u({}, n._getMountStyles())
                        }
                })
            }
            ,
            n._getStyles = function() {
                var A = n.props
                  , e = (A.component,
                A.children)
                  , t = A.enter;
                return c.Children.map(e, function(A) {
                    if (A) {
                        var e = A.key;
                        return e || console.error("You must provide a key for every child of Transition."),
                        {
                            key: e,
                            data: A,
                            style: u({}, (0,
                            y.default)(t))
                        }
                    }
                })
            }
            ,
            n._willEnter = function(A) {
                var e = (A.key,
                A.style,
                n.props)
                  , t = e.appear
                  , r = e.leave
                  , o = e.onEnter
                  , i = "object" === ("undefined" == typeof t ? "undefined" : a(t)) ? t : r;
                return o(i),
                i
            }
            ,
            n._willLeave = function(A) {
                var e = (A.key,
                A.style)
                  , t = n.props
                  , r = t.leave
                  , o = t.onLeave;
                return o(e),
                (0,
                y.default)(r)
            }
            ,
            i = t,
            o(n, i)
        }
        return i(e, A),
        l(e, [{
            key: "componentWillMount",
            value: function() {
                var A = this.props
                  , e = (A.component,
                A.runOnMount)
                  , t = A.onEnter;
                A.children;
                e && t(this._getMountStyles())
            }
        }, {
            key: "_getMountStyles",
            value: function() {
                var A = this.props
                  , e = A.runOnMount
                  , t = A.appear
                  , n = A.enter
                  , r = A.leave;
                A.children;
                return (0,
                C.default)(e ? t || r : n)
            }
        }, {
            key: "_childrenToRender",
            value: function(A) {
                return A.map(function(A) {
                    var e = (A.key,
                    A.data)
                      , t = A.style
                      , n = e
                      , r = n.props.style;
                    return t = (0,
                    M.default)(t),
                    r && (t = u({}, r, t)),
                    (0,
                    c.cloneElement)(n, {
                        style: t
                    })
                })
            }
        }, {
            key: "render",
            value: function() {
                var A = this
                  , e = this.props.component
                  , t = (0,
                E.default)({}, this.props, S);
                return s.default.createElement(g.TransitionMotion, {
                    defaultStyles: this._getDefaultStyles(),
                    styles: this._getStyles(),
                    willEnter: this._willEnter,
                    willLeave: this._willLeave
                }, function(n) {
                    var r = A._childrenToRender(n)
                      , o = null;
                    return e && "false" !== e ? o = (0,
                    c.createElement)(e, t, r) : 1 === c.Children.count(r) && (o = c.Children.only(r[0])),
                    o
                })
            }
        }]),
        e
    }(c.Component);
    k.propTypes = S,
    k.defaultProps = {
        component: "div",
        runOnMount: !0,
        enter: {
            opacity: 1
        },
        leave: {
            opacity: 0
        },
        onEnter: function() {
            return null
        },
        onLeave: function() {
            return null
        }
    },
    e.default = k
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = function(A) {
        var e = {};
        return Object.keys(A).map(function(t) {
            var u = a.indexOf(t) > -1
              , l = Math.round(1e4 * +A[t]) / 1e4;
            if (u) {
                var c = e[n] || "";
                r.indexOf(t) > -1 ? c += t + "(" + l + "px) " : o.indexOf(t) > -1 ? c += t + "(" + l + "deg) " : i.indexOf(t) > -1 && (c += t + "(" + l + ") "),
                e[n] = c
            } else
                e[t] = l
        }),
        e
    }
    ;
    var n = t(655)("transform")
      , r = ["translateX", "translateY", "translateZ", "transformPerspective"]
      , o = ["rotate", "rotateX", "rotateY", "rotateZ", "skewX", "skewY", "scaleZ"]
      , i = ["scale", "scaleX", "scaleY"]
      , a = r.concat(o, i)
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e = {};
        return Object.keys(A).forEach(function(t) {
            var n = A[t];
            e[t] = isNaN(n) ? n.val : n
        }),
        e
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = t
}
, function(A, e, t) {
    "use strict";
    function n(A, e, t) {
        if ("function" != typeof A[e] && (0,
        r.isValidElement)(A[e]))
            return new Error(ComponentName + " is not an actual Element")
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = n;
    var r = t(1)
}
, function(A, e) {
    "use strict";
    function t(A, e, t) {
        for (var n in e)
            e.hasOwnProperty(n) && !t[n] && (A[n] = e[n]);
        return A
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        var e = {};
        return Object.keys(A).forEach(function(t) {
            var n = A[t]
              , a = "object" === ("undefined" == typeof n ? "undefined" : o(n));
            e[t] = a ? r({}, n) : (0,
            i.spring)(n)
        }),
        e
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
      , o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(A) {
        return typeof A
    }
    : function(A) {
        return A && "function" == typeof Symbol && A.constructor === Symbol && A !== Symbol.prototype ? "symbol" : typeof A
    }
    ;
    e.default = n;
    var i = t(33)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    e.__esModule = !0;
    var r = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
      , o = t(136)
      , i = n(o)
      , a = t(81)
      , u = n(a)
      , l = t(138)
      , c = n(l)
      , s = t(118)
      , p = n(s)
      , f = t(119)
      , g = n(f)
      , I = t(137)
      , d = n(I)
      , q = t(1)
      , C = n(q)
      , m = t(29)
      , y = n(m)
      , h = t(109)
      , M = n(h)
      , V = 1e3 / 60
      , E = M.default({
        propTypes: {
            defaultStyle: y.default.objectOf(y.default.number),
            style: y.default.objectOf(y.default.oneOfType([y.default.number, y.default.object])).isRequired,
            children: y.default.func.isRequired,
            onRest: y.default.func
        },
        getInitialState: function() {
            var A = this.props
              , e = A.defaultStyle
              , t = A.style
              , n = e || u.default(t)
              , r = i.default(n);
            return {
                currentStyle: n,
                currentVelocity: r,
                lastIdealStyle: n,
                lastIdealVelocity: r
            }
        },
        wasAnimating: !1,
        animationID: null,
        prevTime: 0,
        accumulatedTime: 0,
        unreadPropStyle: null,
        clearUnreadPropStyle: function(A) {
            var e = !1
              , t = this.state
              , n = t.currentStyle
              , o = t.currentVelocity
              , i = t.lastIdealStyle
              , a = t.lastIdealVelocity;
            for (var u in A)
                if (Object.prototype.hasOwnProperty.call(A, u)) {
                    var l = A[u];
                    "number" == typeof l && (e || (e = !0,
                    n = r({}, n),
                    o = r({}, o),
                    i = r({}, i),
                    a = r({}, a)),
                    n[u] = l,
                    o[u] = 0,
                    i[u] = l,
                    a[u] = 0)
                }
            e && this.setState({
                currentStyle: n,
                currentVelocity: o,
                lastIdealStyle: i,
                lastIdealVelocity: a
            })
        },
        startAnimationIfNecessary: function() {
            var A = this;
            this.animationID = g.default(function(e) {
                var t = A.props.style;
                if (d.default(A.state.currentStyle, t, A.state.currentVelocity))
                    return A.wasAnimating && A.props.onRest && A.props.onRest(),
                    A.animationID = null,
                    A.wasAnimating = !1,
                    void (A.accumulatedTime = 0);
                A.wasAnimating = !0;
                var n = e || p.default()
                  , r = n - A.prevTime;
                if (A.prevTime = n,
                A.accumulatedTime = A.accumulatedTime + r,
                A.accumulatedTime > 10 * V && (A.accumulatedTime = 0),
                0 === A.accumulatedTime)
                    return A.animationID = null,
                    void A.startAnimationIfNecessary();
                var o = (A.accumulatedTime - Math.floor(A.accumulatedTime / V) * V) / V
                  , i = Math.floor(A.accumulatedTime / V)
                  , a = {}
                  , u = {}
                  , l = {}
                  , s = {};
                for (var f in t)
                    if (Object.prototype.hasOwnProperty.call(t, f)) {
                        var g = t[f];
                        if ("number" == typeof g)
                            l[f] = g,
                            s[f] = 0,
                            a[f] = g,
                            u[f] = 0;
                        else {
                            for (var I = A.state.lastIdealStyle[f], q = A.state.lastIdealVelocity[f], C = 0; C < i; C++) {
                                var m = c.default(V / 1e3, I, q, g.val, g.stiffness, g.damping, g.precision);
                                I = m[0],
                                q = m[1]
                            }
                            var y = c.default(V / 1e3, I, q, g.val, g.stiffness, g.damping, g.precision)
                              , h = y[0]
                              , M = y[1];
                            l[f] = I + (h - I) * o,
                            s[f] = q + (M - q) * o,
                            a[f] = I,
                            u[f] = q
                        }
                    }
                A.animationID = null,
                A.accumulatedTime -= i * V,
                A.setState({
                    currentStyle: l,
                    currentVelocity: s,
                    lastIdealStyle: a,
                    lastIdealVelocity: u
                }),
                A.unreadPropStyle = null,
                A.startAnimationIfNecessary()
            })
        },
        componentDidMount: function() {
            this.prevTime = p.default(),
            this.startAnimationIfNecessary()
        },
        componentWillReceiveProps: function(A) {
            null != this.unreadPropStyle && this.clearUnreadPropStyle(this.unreadPropStyle),
            this.unreadPropStyle = A.style,
            null == this.animationID && (this.prevTime = p.default(),
            this.startAnimationIfNecessary())
        },
        componentWillUnmount: function() {
            null != this.animationID && (g.default.cancel(this.animationID),
            this.animationID = null)
        },
        render: function() {
            var A = this.props.children(this.state.currentStyle);
            return A && C.default.Children.only(A)
        }
    });
    e.default = E,
    A.exports = e.default
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        for (var n = 0; n < A.length; n++)
            if (!q.default(A[n], e[n], t[n]))
                return !1;
        return !0
    }
    e.__esModule = !0;
    var o = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
      , i = t(136)
      , a = n(i)
      , u = t(81)
      , l = n(u)
      , c = t(138)
      , s = n(c)
      , p = t(118)
      , f = n(p)
      , g = t(119)
      , I = n(g)
      , d = t(137)
      , q = n(d)
      , C = t(1)
      , m = n(C)
      , y = t(29)
      , h = n(y)
      , M = t(109)
      , V = n(M)
      , E = 1e3 / 60
      , S = V.default({
        propTypes: {
            defaultStyles: h.default.arrayOf(h.default.objectOf(h.default.number)),
            styles: h.default.func.isRequired,
            children: h.default.func.isRequired
        },
        getInitialState: function() {
            var A = this.props
              , e = A.defaultStyles
              , t = A.styles
              , n = e || t().map(l.default)
              , r = n.map(function(A) {
                return a.default(A)
            });
            return {
                currentStyles: n,
                currentVelocities: r,
                lastIdealStyles: n,
                lastIdealVelocities: r
            }
        },
        animationID: null,
        prevTime: 0,
        accumulatedTime: 0,
        unreadPropStyles: null,
        clearUnreadPropStyle: function(A) {
            for (var e = this.state, t = e.currentStyles, n = e.currentVelocities, r = e.lastIdealStyles, i = e.lastIdealVelocities, a = !1, u = 0; u < A.length; u++) {
                var l = A[u]
                  , c = !1;
                for (var s in l)
                    if (Object.prototype.hasOwnProperty.call(l, s)) {
                        var p = l[s];
                        "number" == typeof p && (c || (c = !0,
                        a = !0,
                        t[u] = o({}, t[u]),
                        n[u] = o({}, n[u]),
                        r[u] = o({}, r[u]),
                        i[u] = o({}, i[u])),
                        t[u][s] = p,
                        n[u][s] = 0,
                        r[u][s] = p,
                        i[u][s] = 0)
                    }
            }
            a && this.setState({
                currentStyles: t,
                currentVelocities: n,
                lastIdealStyles: r,
                lastIdealVelocities: i
            })
        },
        startAnimationIfNecessary: function() {
            var A = this;
            this.animationID = I.default(function(e) {
                var t = A.props.styles(A.state.lastIdealStyles);
                if (r(A.state.currentStyles, t, A.state.currentVelocities))
                    return A.animationID = null,
                    void (A.accumulatedTime = 0);
                var n = e || f.default()
                  , o = n - A.prevTime;
                if (A.prevTime = n,
                A.accumulatedTime = A.accumulatedTime + o,
                A.accumulatedTime > 10 * E && (A.accumulatedTime = 0),
                0 === A.accumulatedTime)
                    return A.animationID = null,
                    void A.startAnimationIfNecessary();
                for (var i = (A.accumulatedTime - Math.floor(A.accumulatedTime / E) * E) / E, a = Math.floor(A.accumulatedTime / E), u = [], l = [], c = [], p = [], g = 0; g < t.length; g++) {
                    var I = t[g]
                      , d = {}
                      , q = {}
                      , C = {}
                      , m = {};
                    for (var y in I)
                        if (Object.prototype.hasOwnProperty.call(I, y)) {
                            var h = I[y];
                            if ("number" == typeof h)
                                d[y] = h,
                                q[y] = 0,
                                C[y] = h,
                                m[y] = 0;
                            else {
                                for (var M = A.state.lastIdealStyles[g][y], V = A.state.lastIdealVelocities[g][y], S = 0; S < a; S++) {
                                    var k = s.default(E / 1e3, M, V, h.val, h.stiffness, h.damping, h.precision);
                                    M = k[0],
                                    V = k[1]
                                }
                                var b = s.default(E / 1e3, M, V, h.val, h.stiffness, h.damping, h.precision)
                                  , v = b[0]
                                  , R = b[1];
                                d[y] = M + (v - M) * i,
                                q[y] = V + (R - V) * i,
                                C[y] = M,
                                m[y] = V
                            }
                        }
                    c[g] = d,
                    p[g] = q,
                    u[g] = C,
                    l[g] = m
                }
                A.animationID = null,
                A.accumulatedTime -= a * E,
                A.setState({
                    currentStyles: c,
                    currentVelocities: p,
                    lastIdealStyles: u,
                    lastIdealVelocities: l
                }),
                A.unreadPropStyles = null,
                A.startAnimationIfNecessary()
            })
        },
        componentDidMount: function() {
            this.prevTime = f.default(),
            this.startAnimationIfNecessary()
        },
        componentWillReceiveProps: function(A) {
            null != this.unreadPropStyles && this.clearUnreadPropStyle(this.unreadPropStyles),
            this.unreadPropStyles = A.styles(this.state.lastIdealStyles),
            null == this.animationID && (this.prevTime = f.default(),
            this.startAnimationIfNecessary())
        },
        componentWillUnmount: function() {
            null != this.animationID && (I.default.cancel(this.animationID),
            this.animationID = null)
        },
        render: function() {
            var A = this.props.children(this.state.currentStyles);
            return A && m.default.Children.only(A)
        }
    });
    e.default = S,
    A.exports = e.default
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        var n = e;
        return null == n ? A.map(function(A, e) {
            return {
                key: A.key,
                data: A.data,
                style: t[e]
            }
        }) : A.map(function(A, e) {
            for (var r = 0; r < n.length; r++)
                if (n[r].key === A.key)
                    return {
                        key: n[r].key,
                        data: n[r].data,
                        style: t[e]
                    };
            return {
                key: A.key,
                data: A.data,
                style: t[e]
            }
        })
    }
    function o(A, e, t, n) {
        if (n.length !== e.length)
            return !1;
        for (var r = 0; r < n.length; r++)
            if (n[r].key !== e[r].key)
                return !1;
        for (var r = 0; r < n.length; r++)
            if (!h.default(A[r], e[r].style, t[r]))
                return !1;
        return !0
    }
    function i(A, e, t, n, r, o, i, a, u) {
        for (var c = I.default(n, r, function(A, n) {
            var r = e(n);
            return null == r ? (t({
                key: n.key,
                data: n.data
            }),
            null) : h.default(o[A], r, i[A]) ? (t({
                key: n.key,
                data: n.data
            }),
            null) : {
                key: n.key,
                data: n.data,
                style: r
            }
        }), s = [], p = [], f = [], g = [], d = 0; d < c.length; d++) {
            for (var q = c[d], C = null, m = 0; m < n.length; m++)
                if (n[m].key === q.key) {
                    C = m;
                    break
                }
            if (null == C) {
                var y = A(q);
                s[d] = y,
                f[d] = y;
                var M = l.default(q.style);
                p[d] = M,
                g[d] = M
            } else
                s[d] = o[C],
                f[d] = a[C],
                p[d] = i[C],
                g[d] = u[C]
        }
        return [c, s, p, f, g]
    }
    e.__esModule = !0;
    var a = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
      , u = t(136)
      , l = n(u)
      , c = t(81)
      , s = n(c)
      , p = t(138)
      , f = n(p)
      , g = t(761)
      , I = n(g)
      , d = t(118)
      , q = n(d)
      , C = t(119)
      , m = n(C)
      , y = t(137)
      , h = n(y)
      , M = t(1)
      , V = n(M)
      , E = t(29)
      , S = n(E)
      , k = t(109)
      , b = n(k)
      , v = 1e3 / 60
      , R = b.default({
        propTypes: {
            defaultStyles: S.default.arrayOf(S.default.shape({
                key: S.default.string.isRequired,
                data: S.default.any,
                style: S.default.objectOf(S.default.number).isRequired
            })),
            styles: S.default.oneOfType([S.default.func, S.default.arrayOf(S.default.shape({
                key: S.default.string.isRequired,
                data: S.default.any,
                style: S.default.objectOf(S.default.oneOfType([S.default.number, S.default.object])).isRequired
            }))]).isRequired,
            children: S.default.func.isRequired,
            willEnter: S.default.func,
            willLeave: S.default.func,
            didLeave: S.default.func
        },
        getDefaultProps: function() {
            return {
                willEnter: function(A) {
                    return s.default(A.style)
                },
                willLeave: function() {
                    return null
                },
                didLeave: function() {}
            }
        },
        getInitialState: function() {
            var A = this.props
              , e = A.defaultStyles
              , t = A.styles
              , n = A.willEnter
              , r = A.willLeave
              , o = A.didLeave
              , a = "function" == typeof t ? t(e) : t
              , u = void 0;
            u = null == e ? a : e.map(function(A) {
                for (var e = 0; e < a.length; e++)
                    if (a[e].key === A.key)
                        return a[e];
                return A
            });
            var c = null == e ? a.map(function(A) {
                return s.default(A.style)
            }) : e.map(function(A) {
                return s.default(A.style)
            })
              , p = null == e ? a.map(function(A) {
                return l.default(A.style)
            }) : e.map(function(A) {
                return l.default(A.style)
            })
              , f = i(n, r, o, u, a, c, p, c, p)
              , g = f[0]
              , I = f[1]
              , d = f[2]
              , q = f[3]
              , C = f[4];
            return {
                currentStyles: I,
                currentVelocities: d,
                lastIdealStyles: q,
                lastIdealVelocities: C,
                mergedPropsStyles: g
            }
        },
        unmounting: !1,
        animationID: null,
        prevTime: 0,
        accumulatedTime: 0,
        unreadPropStyles: null,
        clearUnreadPropStyle: function(A) {
            for (var e = i(this.props.willEnter, this.props.willLeave, this.props.didLeave, this.state.mergedPropsStyles, A, this.state.currentStyles, this.state.currentVelocities, this.state.lastIdealStyles, this.state.lastIdealVelocities), t = e[0], n = e[1], r = e[2], o = e[3], u = e[4], l = 0; l < A.length; l++) {
                var c = A[l].style
                  , s = !1;
                for (var p in c)
                    if (Object.prototype.hasOwnProperty.call(c, p)) {
                        var f = c[p];
                        "number" == typeof f && (s || (s = !0,
                        n[l] = a({}, n[l]),
                        r[l] = a({}, r[l]),
                        o[l] = a({}, o[l]),
                        u[l] = a({}, u[l]),
                        t[l] = {
                            key: t[l].key,
                            data: t[l].data,
                            style: a({}, t[l].style)
                        }),
                        n[l][p] = f,
                        r[l][p] = 0,
                        o[l][p] = f,
                        u[l][p] = 0,
                        t[l].style[p] = f)
                    }
            }
            this.setState({
                currentStyles: n,
                currentVelocities: r,
                mergedPropsStyles: t,
                lastIdealStyles: o,
                lastIdealVelocities: u
            })
        },
        startAnimationIfNecessary: function() {
            var A = this;
            this.unmounting || (this.animationID = m.default(function(e) {
                if (!A.unmounting) {
                    var t = A.props.styles
                      , n = "function" == typeof t ? t(r(A.state.mergedPropsStyles, A.unreadPropStyles, A.state.lastIdealStyles)) : t;
                    if (o(A.state.currentStyles, n, A.state.currentVelocities, A.state.mergedPropsStyles))
                        return A.animationID = null,
                        void (A.accumulatedTime = 0);
                    var a = e || q.default()
                      , u = a - A.prevTime;
                    if (A.prevTime = a,
                    A.accumulatedTime = A.accumulatedTime + u,
                    A.accumulatedTime > 10 * v && (A.accumulatedTime = 0),
                    0 === A.accumulatedTime)
                        return A.animationID = null,
                        void A.startAnimationIfNecessary();
                    for (var l = (A.accumulatedTime - Math.floor(A.accumulatedTime / v) * v) / v, c = Math.floor(A.accumulatedTime / v), s = i(A.props.willEnter, A.props.willLeave, A.props.didLeave, A.state.mergedPropsStyles, n, A.state.currentStyles, A.state.currentVelocities, A.state.lastIdealStyles, A.state.lastIdealVelocities), p = s[0], g = s[1], I = s[2], d = s[3], C = s[4], m = 0; m < p.length; m++) {
                        var y = p[m].style
                          , h = {}
                          , M = {}
                          , V = {}
                          , E = {};
                        for (var S in y)
                            if (Object.prototype.hasOwnProperty.call(y, S)) {
                                var k = y[S];
                                if ("number" == typeof k)
                                    h[S] = k,
                                    M[S] = 0,
                                    V[S] = k,
                                    E[S] = 0;
                                else {
                                    for (var b = d[m][S], R = C[m][S], U = 0; U < c; U++) {
                                        var G = f.default(v / 1e3, b, R, k.val, k.stiffness, k.damping, k.precision);
                                        b = G[0],
                                        R = G[1]
                                    }
                                    var Q = f.default(v / 1e3, b, R, k.val, k.stiffness, k.damping, k.precision)
                                      , Z = Q[0]
                                      , O = Q[1];
                                    h[S] = b + (Z - b) * l,
                                    M[S] = R + (O - R) * l,
                                    V[S] = b,
                                    E[S] = R
                                }
                            }
                        d[m] = V,
                        C[m] = E,
                        g[m] = h,
                        I[m] = M
                    }
                    A.animationID = null,
                    A.accumulatedTime -= c * v,
                    A.setState({
                        currentStyles: g,
                        currentVelocities: I,
                        lastIdealStyles: d,
                        lastIdealVelocities: C,
                        mergedPropsStyles: p
                    }),
                    A.unreadPropStyles = null,
                    A.startAnimationIfNecessary()
                }
            }))
        },
        componentDidMount: function() {
            this.prevTime = q.default(),
            this.startAnimationIfNecessary()
        },
        componentWillReceiveProps: function(A) {
            this.unreadPropStyles && this.clearUnreadPropStyle(this.unreadPropStyles);
            var e = A.styles;
            "function" == typeof e ? this.unreadPropStyles = e(r(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.lastIdealStyles)) : this.unreadPropStyles = e,
            null == this.animationID && (this.prevTime = q.default(),
            this.startAnimationIfNecessary())
        },
        componentWillUnmount: function() {
            this.unmounting = !0,
            null != this.animationID && (m.default.cancel(this.animationID),
            this.animationID = null)
        },
        render: function() {
            var A = r(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.currentStyles)
              , e = this.props.children(A);
            return e && V.default.Children.only(e)
        }
    });
    e.default = R,
    A.exports = e.default
}
, function(A, e) {
    "use strict";
    function t(A, e, t) {
        for (var n = {}, r = 0; r < A.length; r++)
            n[A[r].key] = r;
        for (var o = {}, r = 0; r < e.length; r++)
            o[e[r].key] = r;
        for (var i = [], r = 0; r < e.length; r++)
            i[r] = e[r];
        for (var r = 0; r < A.length; r++)
            if (!Object.prototype.hasOwnProperty.call(o, A[r].key)) {
                var a = t(r, A[r]);
                null != a && i.push(a)
            }
        return i.sort(function(A, t) {
            var r = o[A.key]
              , i = o[t.key]
              , a = n[A.key]
              , u = n[t.key];
            if (null != r && null != i)
                return o[A.key] - o[t.key];
            if (null != a && null != u)
                return n[A.key] - n[t.key];
            if (null != r) {
                for (var l = 0; l < e.length; l++) {
                    var c = e[l].key;
                    if (Object.prototype.hasOwnProperty.call(n, c)) {
                        if (r < o[c] && u > n[c])
                            return -1;
                        if (r > o[c] && u < n[c])
                            return 1
                    }
                }
                return 1
            }
            for (var l = 0; l < e.length; l++) {
                var c = e[l].key;
                if (Object.prototype.hasOwnProperty.call(n, c)) {
                    if (i < o[c] && a > n[c])
                        return 1;
                    if (i > o[c] && a < n[c])
                        return -1
                }
            }
            return -1
        })
    }
    e.__esModule = !0,
    e.default = t,
    A.exports = e.default
}
, function(A, e, t) {
    "use strict";
    function n() {}
    e.__esModule = !0,
    e.default = n;
    A.exports = e.default
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        return o({}, u, e, {
            val: A
        })
    }
    e.__esModule = !0;
    var o = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
    ;
    e.default = r;
    var i = t(296)
      , a = n(i)
      , u = o({}, a.default.noWobble, {
        precision: .01
    });
    A.exports = e.default
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    function a() {
        var A, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "store", t = arguments[1], n = t || e + "Subscription", a = function(A) {
            function t(n, i) {
                r(this, t);
                var a = o(this, A.call(this, n, i));
                return a[e] = n.store,
                a
            }
            return i(t, A),
            t.prototype.getChildContext = function() {
                var A;
                return A = {},
                A[e] = this[e],
                A[n] = null,
                A
            }
            ,
            t.prototype.render = function() {
                return u.Children.only(this.props.children)
            }
            ,
            t
        }(u.Component);
        return a.propTypes = {
            store: s.storeShape.isRequired,
            children: c.default.element.isRequired
        },
        a.childContextTypes = (A = {},
        A[e] = s.storeShape.isRequired,
        A[n] = s.subscriptionShape,
        A),
        a.displayName = "Provider",
        a
    }
    e.__esModule = !0,
    e.createProvider = a;
    var u = t(1)
      , l = t(29)
      , c = n(l)
      , s = t(299)
      , p = t(139);
    n(p);
    e.default = a()
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function o(A, e, t) {
        for (var n = e.length - 1; n >= 0; n--) {
            var r = e[n](A);
            if (r)
                return r
        }
        return function(e, n) {
            throw new Error("Invalid value of type " + typeof A + " for " + t + " argument when connecting component " + n.wrappedComponentName + ".")
        }
    }
    function i(A, e) {
        return A === e
    }
    function a() {
        var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
          , e = A.connectHOC
          , t = void 0 === e ? c.default : e
          , n = A.mapStateToPropsFactories
          , a = void 0 === n ? d.default : n
          , l = A.mapDispatchToPropsFactories
          , s = void 0 === l ? g.default : l
          , f = A.mergePropsFactories
          , I = void 0 === f ? C.default : f
          , q = A.selectorFactory
          , m = void 0 === q ? y.default : q;
        return function(A, e, n) {
            var l = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}
              , c = l.pure
              , f = void 0 === c || c
              , g = l.areStatesEqual
              , d = void 0 === g ? i : g
              , q = l.areOwnPropsEqual
              , C = void 0 === q ? p.default : q
              , y = l.areStatePropsEqual
              , h = void 0 === y ? p.default : y
              , M = l.areMergedPropsEqual
              , V = void 0 === M ? p.default : M
              , E = r(l, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"])
              , S = o(A, a, "mapStateToProps")
              , k = o(e, s, "mapDispatchToProps")
              , b = o(n, I, "mergeProps");
            return t(m, u({
                methodName: "connect",
                getDisplayName: function(A) {
                    return "Connect(" + A + ")"
                },
                shouldHandleStateChanges: Boolean(A),
                initMapStateToProps: S,
                initMapDispatchToProps: k,
                initMergeProps: b,
                pure: f,
                areStatesEqual: d,
                areOwnPropsEqual: C,
                areStatePropsEqual: h,
                areMergedPropsEqual: V
            }, E))
        }
    }
    e.__esModule = !0;
    var u = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
    ;
    e.createConnect = a;
    var l = t(297)
      , c = n(l)
      , s = t(772)
      , p = n(s)
      , f = t(766)
      , g = n(f)
      , I = t(767)
      , d = n(I)
      , q = t(768)
      , C = n(q)
      , m = t(769)
      , y = n(m);
    e.default = a()
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return "function" == typeof A ? (0,
        a.wrapMapToPropsFunc)(A, "mapDispatchToProps") : void 0
    }
    function r(A) {
        return A ? void 0 : (0,
        a.wrapMapToPropsConstant)(function(A) {
            return {
                dispatch: A
            }
        })
    }
    function o(A) {
        return A && "object" == typeof A ? (0,
        a.wrapMapToPropsConstant)(function(e) {
            return (0,
            i.bindActionCreators)(A, e)
        }) : void 0
    }
    e.__esModule = !0,
    e.whenMapDispatchToPropsIsFunction = n,
    e.whenMapDispatchToPropsIsMissing = r,
    e.whenMapDispatchToPropsIsObject = o;
    var i = t(314)
      , a = t(298);
    e.default = [n, r, o]
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return "function" == typeof A ? (0,
        o.wrapMapToPropsFunc)(A, "mapStateToProps") : void 0
    }
    function r(A) {
        return A ? void 0 : (0,
        o.wrapMapToPropsConstant)(function() {
            return {}
        })
    }
    e.__esModule = !0,
    e.whenMapStateToPropsIsFunction = n,
    e.whenMapStateToPropsIsMissing = r;
    var o = t(298);
    e.default = [n, r]
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        return u({}, t, A, e)
    }
    function o(A) {
        return function(e, t) {
            var n = (t.displayName,
            t.pure)
              , r = t.areMergedPropsEqual
              , o = !1
              , i = void 0;
            return function(e, t, a) {
                var u = A(e, t, a);
                return o ? n && r(u, i) || (i = u) : (o = !0,
                i = u),
                i
            }
        }
    }
    function i(A) {
        return "function" == typeof A ? o(A) : void 0
    }
    function a(A) {
        return A ? void 0 : function() {
            return r
        }
    }
    e.__esModule = !0;
    var u = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
    ;
    e.defaultMergeProps = r,
    e.wrapMergePropsFunc = o,
    e.whenMergePropsIsFunction = i,
    e.whenMergePropsIsOmitted = a;
    var l = t(300);
    n(l);
    e.default = [i, a]
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function o(A, e, t, n) {
        return function(r, o) {
            return t(A(r, o), e(n, o), o)
        }
    }
    function i(A, e, t, n, r) {
        function o(r, o) {
            return g = r,
            I = o,
            d = A(g, I),
            q = e(n, I),
            C = t(d, q, I),
            f = !0,
            C
        }
        function i() {
            return d = A(g, I),
            e.dependsOnOwnProps && (q = e(n, I)),
            C = t(d, q, I)
        }
        function a() {
            return A.dependsOnOwnProps && (d = A(g, I)),
            e.dependsOnOwnProps && (q = e(n, I)),
            C = t(d, q, I)
        }
        function u() {
            var e = A(g, I)
              , n = !p(e, d);
            return d = e,
            n && (C = t(d, q, I)),
            C
        }
        function l(A, e) {
            var t = !s(e, I)
              , n = !c(A, g);
            return g = A,
            I = e,
            t && n ? i() : t ? a() : n ? u() : C
        }
        var c = r.areStatesEqual
          , s = r.areOwnPropsEqual
          , p = r.areStatePropsEqual
          , f = !1
          , g = void 0
          , I = void 0
          , d = void 0
          , q = void 0
          , C = void 0;
        return function(A, e) {
            return f ? l(A, e) : o(A, e)
        }
    }
    function a(A, e) {
        var t = e.initMapStateToProps
          , n = e.initMapDispatchToProps
          , a = e.initMergeProps
          , u = r(e, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"])
          , l = t(A, u)
          , c = n(A, u)
          , s = a(A, u)
          , p = u.pure ? i : o;
        return p(l, c, s, A, u)
    }
    e.__esModule = !0,
    e.impureFinalPropsSelectorFactory = o,
    e.pureFinalPropsSelectorFactory = i,
    e.default = a;
    var u = t(770);
    n(u)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e, t) {
        if (!A)
            throw new Error("Unexpected value for " + e + " in " + t + ".");
        "mapStateToProps" !== e && "mapDispatchToProps" !== e || A.hasOwnProperty("dependsOnOwnProps") || (0,
        a.default)("The selector for " + e + " of " + t + " did not specify a value for dependsOnOwnProps.")
    }
    function o(A, e, t, n) {
        r(A, "mapStateToProps", n),
        r(e, "mapDispatchToProps", n),
        r(t, "mergeProps", n)
    }
    e.__esModule = !0,
    e.default = o;
    var i = t(139)
      , a = n(i)
}
, function(A, e) {
    "use strict";
    function t(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function n() {
        var A = []
          , e = [];
        return {
            clear: function() {
                e = r,
                A = r
            },
            notify: function() {
                for (var t = A = e, n = 0; n < t.length; n++)
                    t[n]()
            },
            subscribe: function(t) {
                var n = !0;
                return e === A && (e = A.slice()),
                e.push(t),
                function() {
                    n && A !== r && (n = !1,
                    e === A && (e = A.slice()),
                    e.splice(e.indexOf(t), 1))
                }
            }
        }
    }
    e.__esModule = !0;
    var r = null
      , o = {
        notify: function() {}
    }
      , i = function() {
        function A(e, n, r) {
            t(this, A),
            this.store = e,
            this.parentSub = n,
            this.onStateChange = r,
            this.unsubscribe = null,
            this.listeners = o
        }
        return A.prototype.addNestedSub = function(A) {
            return this.trySubscribe(),
            this.listeners.subscribe(A)
        }
        ,
        A.prototype.notifyNestedSubs = function() {
            this.listeners.notify()
        }
        ,
        A.prototype.isSubscribed = function() {
            return Boolean(this.unsubscribe)
        }
        ,
        A.prototype.trySubscribe = function() {
            this.unsubscribe || (this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange),
            this.listeners = n())
        }
        ,
        A.prototype.tryUnsubscribe = function() {
            this.unsubscribe && (this.unsubscribe(),
            this.unsubscribe = null,
            this.listeners.clear(),
            this.listeners = o)
        }
        ,
        A
    }();
    e.default = i
}
, function(A, e) {
    "use strict";
    function t(A, e) {
        return A === e ? 0 !== A || 0 !== e || 1 / A === 1 / e : A !== A && e !== e
    }
    function n(A, e) {
        if (t(A, e))
            return !0;
        if ("object" != typeof A || null === A || "object" != typeof e || null === e)
            return !1;
        var n = Object.keys(A)
          , o = Object.keys(e);
        if (n.length !== o.length)
            return !1;
        for (var i = 0; i < n.length; i++)
            if (!r.call(e, n[i]) || !t(A[n[i]], e[n[i]]))
                return !1;
        return !0
    }
    e.__esModule = !0,
    e.default = n;
    var r = Object.prototype.hasOwnProperty
}
, function(A, e, t) {
    var n = t(774)
      , r = t(301)
      , o = t(303)
      , i = t(302);
    A.exports = n.default || n,
    A.exports.KeyboardButton = r.default || r,
    A.exports.LatinLayout = o.default || o,
    A.exports.CyrillicLayout = i.default || i
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        if (!(A instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function o(A, e) {
        if (!A)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || "object" != typeof e && "function" != typeof e ? A : e
    }
    function i(A, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        A.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: A,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(A, e) : A.__proto__ = e)
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var a = function() {
        function A(A, e) {
            for (var t = 0; t < e.length; t++) {
                var n = e[t];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(A, n.key, n)
            }
        }
        return function(e, t, n) {
            return t && A(e.prototype, t),
            n && A(e, n),
            e
        }
    }()
      , u = t(1)
      , l = n(u)
      , c = t(29)
      , s = n(c)
      , p = t(301)
      , f = n(p)
      , g = t(303)
      , I = n(g)
      , d = t(302)
      , q = n(d)
      , C = t(778)
      , m = n(C)
      , y = t(775)
      , h = n(y)
      , M = t(776)
      , V = n(M)
      , E = t(777)
      , S = n(E)
      , k = function(A) {
        function e() {
            var A, t, n, i;
            r(this, e);
            for (var a = arguments.length, u = Array(a), l = 0; l < a; l++)
                u[l] = arguments[l];
            return t = n = o(this, (A = e.__proto__ || Object.getPrototypeOf(e)).call.apply(A, [this].concat(u))),
            n.state = {
                currentLayout: 0,
                showSymbols: !1,
                uppercase: n.isUppercase()
            },
            n.handleLanguageClick = function() {
                n.setState({
                    currentLayout: (n.state.currentLayout + 1) % n.props.layouts.length,
                    showSymbols: !1
                }),
                n.props.inputNode.focus()
            }
            ,
            n.handleShiftClick = function() {
                n.setState({
                    uppercase: !n.state.uppercase
                }),
                n.props.inputNode.focus()
            }
            ,
            n.handleSymbolsClick = function() {
                n.setState({
                    showSymbols: !n.state.showSymbols
                }),
                n.props.inputNode.focus()
            }
            ,
            n.handleLetterButtonClick = function(A) {
                var e = n.props.inputNode
                  , t = e.value
                  , r = e.selectionStart
                  , o = e.selectionEnd
                  , i = t.substring(0, r) + A + t.substring(o);
                e.value = i,
                n.props.onClick && n.props.onClick(i),
                setTimeout(function() {
                    e.focus(),
                    e.setSelectionRange(r + 1, r + 1)
                }, 0),
                n.setState({
                    uppercase: n.isUppercase()
                }),
                e.dispatchEvent(new Event("input",{
                    bubbles: !0
                }))
            }
            ,
            n.handleBackspaceClick = function() {
                var A = n.props.inputNode
                  , e = A.value
                  , t = A.selectionStart
                  , r = A.selectionEnd
                  , o = void 0
                  , i = void 0;
                t === r ? (o = e.substring(0, t - 1) + e.substring(r),
                i = t - 1) : (o = e.substring(0, t) + e.substring(r),
                i = t),
                i = i > 0 ? i : 0,
                A.value = o,
                n.props.onClick && n.props.onClick(o),
                setTimeout(function() {
                    A.focus(),
                    A.setSelectionRange(i, i)
                }, 0),
                n.setState({
                    uppercase: n.isUppercase()
                }),
                A.dispatchEvent(new Event("input",{
                    bubbles: !0
                }))
            }
            ,
            i = t,
            o(n, i)
        }
        return i(e, A),
        a(e, [{
            key: "isUppercase",
            value: function() {
                var A = this.props
                  , e = A.inputNode
                  , t = A.isFirstLetterUppercase;
                return "password" !== e.type && "email" !== e.dataset.type && !e.value.length && t
            }
        }, {
            key: "getKeys",
            value: function() {
                var A = void 0;
                return A = this.state.showSymbols ? m.default.layout : this.props.layouts[this.state.currentLayout].layout,
                this.state.uppercase ? A.map(function(A) {
                    return A.map(function(A) {
                        return A.toUpperCase()
                    })
                }) : A
            }
        }, {
            key: "getSymbolsKeyValue",
            value: function() {
                return this.state.showSymbols ? this.props.layouts[this.state.currentLayout].symbolsKeyValue : m.default.symbolsKeyValue
            }
        }, {
            key: "render",
            value: function() {
                var A = this
                  , e = this.props
                  , t = e.leftButtons
                  , n = e.rightButtons
                  , r = e.inputNode
                  , o = this.getKeys()
                  , i = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
                  , a = this.getSymbolsKeyValue();
                return l.default.createElement("div", {
                    className: "keyboard"
                }, l.default.createElement("div", {
                    className: "keyboard-row"
                }, i.map(function(e) {
                    return l.default.createElement(f.default, {
                        value: e,
                        onClick: A.handleLetterButtonClick,
                        classes: "keyboard-numberButton",
                        key: e
                    })
                }), l.default.createElement(f.default, {
                    value: l.default.createElement(h.default, null),
                    classes: "keyboard-backspaceButton",
                    onClick: this.handleBackspaceClick
                })), l.default.createElement("div", {
                    className: "keyboard-row"
                }, o[0].map(function(e) {
                    return l.default.createElement(f.default, {
                        value: e,
                        onClick: A.handleLetterButtonClick,
                        key: e
                    })
                })), l.default.createElement("div", {
                    className: "keyboard-row"
                }, l.default.createElement("div", {
                    className: "keyboard-halfButton"
                }), o[1].map(function(e) {
                    return l.default.createElement(f.default, {
                        value: e,
                        onClick: A.handleLetterButtonClick,
                        key: e
                    })
                }), l.default.createElement("div", {
                    className: "keyboard-halfButton"
                })), l.default.createElement("div", {
                    className: "keyboard-row"
                }, l.default.createElement(f.default, {
                    value: l.default.createElement(S.default, null),
                    classes: "keyboard-shiftButton",
                    onClick: this.handleShiftClick
                }), o[2].map(function(e) {
                    return l.default.createElement(f.default, {
                        value: e,
                        onClick: A.handleLetterButtonClick,
                        key: e
                    })
                }), l.default.createElement(f.default, {
                    value: a,
                    classes: "keyboard-symbolButton",
                    onClick: this.handleSymbolsClick
                })), l.default.createElement("div", {
                    className: "keyboard-row"
                }, t, this.props.layouts.length > 1 ? l.default.createElement(f.default, {
                    value: l.default.createElement(V.default, null),
                    classes: "keyboard-languageButton",
                    onClick: this.handleLanguageClick
                }) : null, "email" === r.dataset.type ? l.default.createElement(f.default, {
                    value: "@",
                    classes: "keyboard-atButton",
                    onClick: this.handleLetterButtonClick
                }) : null, l.default.createElement(f.default, {
                    value: " ",
                    classes: "keyboard-spaceButton",
                    onClick: this.handleLetterButtonClick
                }), "email" === r.dataset.type ? l.default.createElement(f.default, {
                    value: ".",
                    classes: "keyboard-fullstopButton",
                    onClick: this.handleLetterButtonClick
                }) : null, n))
            }
        }]),
        e
    }(u.PureComponent);
    k.propTypes = {
        leftButtons: s.default.arrayOf(s.default.node),
        rightButtons: s.default.arrayOf(s.default.node),
        inputNode: s.default.any.isRequired,
        onClick: s.default.func,
        isFirstLetterUppercase: s.default.bool,
        layouts: s.default.arrayOf(s.default.shape({
            symbolsKeyValue: s.default.string,
            layout: s.default.arrayOf(s.default.arrayOf(s.default.string))
        }))
    },
    k.defaultProps = {
        leftButtons: [],
        rightButtons: [],
        isFirstLetterUppercase: !1,
        layouts: [q.default, I.default]
    },
    e.default = k
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = function(A) {
        var e = A.viewBox
          , t = void 0 === e ? "0 0 24 24" : e
          , n = A.width
          , r = void 0 === n ? 24 : n
          , i = A.height
          , a = void 0 === i ? 24 : i
          , u = A.fill;
        return o.default.createElement("svg", {
            width: r,
            height: a,
            fill: u,
            viewBox: t
        }, o.default.createElement("path", {
            fill: "currentColor",
            d: "M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-3 12.59L17.59 17 14 13.41 10.41 17 9 15.59 12.59 12 9 8.41 10.41 7 14 10.59 17.59 7 19 8.41 15.41 12 19 15.59z"
        }))
    };
    e.default = i
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = function(A) {
        var e = A.viewBox
          , t = void 0 === e ? "0 0 24 24" : e
          , n = A.width
          , r = void 0 === n ? 24 : n
          , i = A.height
          , a = void 0 === i ? 24 : i
          , u = A.fill;
        return o.default.createElement("svg", {
            width: r,
            height: a,
            fill: u,
            viewBox: t
        }, o.default.createElement("path", {
            fill: "currentColor",
            d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z"
        }))
    };
    e.default = i
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(1)
      , o = n(r)
      , i = function(A) {
        var e = A.viewBox
          , t = void 0 === e ? "0 0 32 32" : e
          , n = A.width
          , r = void 0 === n ? 24 : n
          , i = A.height
          , a = void 0 === i ? 24 : i
          , u = A.fill;
        return o.default.createElement("svg", {
            width: r,
            height: a,
            fill: u,
            viewBox: t
        }, o.default.createElement("path", {
            fill: "currentColor",
            d: "M21 28h-10c-0.552 0-1-0.448-1-1v-11h-4c-0.404 0-0.769-0.244-0.924-0.617s-0.069-0.804 0.217-1.090l10-10c0.391-0.39 1.024-0.39 1.414 0l10 10c0.286 0.286 0.372 0.716 0.217 1.090s-0.519 0.617-0.924 0.617h-4v11c0 0.552-0.448 1-1 1zM12 26h8v-11c0-0.552 0.448-1 1-1h2.586l-7.586-7.586-7.586 7.586h2.586c0.552 0 1 0.448 1 1v11z"
        }))
    };
    e.default = i
}
, function(A, e) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = {
        symbolsKeyValue: ".?!&",
        layout: [["=", "+", "%", "*", "[", "]", "{", "}", "<", ">"], ["@", ":", ";", "_", "-", "#", "(", ")", "/", "\\"], [".", ",", "?", "!", "'", '"', "^"]]
    }
}
, function(A, e, t) {
    "use strict";
    "undefined" == typeof Promise && (t(683).enable(),
    window.Promise = t(682)),
    t(780),
    Object.assign = t(11)
}
, function(A, e) {
    !function(A) {
        "use strict";
        function e(A) {
            if ("string" != typeof A && (A = String(A)),
            /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(A))
                throw new TypeError("Invalid character in header field name");
            return A.toLowerCase()
        }
        function t(A) {
            return "string" != typeof A && (A = String(A)),
            A
        }
        function n(A) {
            var e = {
                next: function() {
                    var e = A.shift();
                    return {
                        done: void 0 === e,
                        value: e
                    }
                }
            };
            return q.iterable && (e[Symbol.iterator] = function() {
                return e
            }
            ),
            e
        }
        function r(A) {
            this.map = {},
            A instanceof r ? A.forEach(function(A, e) {
                this.append(e, A)
            }, this) : A && Object.getOwnPropertyNames(A).forEach(function(e) {
                this.append(e, A[e])
            }, this)
        }
        function o(A) {
            return A.bodyUsed ? Promise.reject(new TypeError("Already read")) : void (A.bodyUsed = !0)
        }
        function i(A) {
            return new Promise(function(e, t) {
                A.onload = function() {
                    e(A.result)
                }
                ,
                A.onerror = function() {
                    t(A.error)
                }
            }
            )
        }
        function a(A) {
            var e = new FileReader
              , t = i(e);
            return e.readAsArrayBuffer(A),
            t
        }
        function u(A) {
            var e = new FileReader
              , t = i(e);
            return e.readAsText(A),
            t
        }
        function l(A) {
            for (var e = new Uint8Array(A), t = new Array(e.length), n = 0; n < e.length; n++)
                t[n] = String.fromCharCode(e[n]);
            return t.join("")
        }
        function c(A) {
            if (A.slice)
                return A.slice(0);
            var e = new Uint8Array(A.byteLength);
            return e.set(new Uint8Array(A)),
            e.buffer
        }
        function s() {
            return this.bodyUsed = !1,
            this._initBody = function(A) {
                if (this._bodyInit = A,
                A)
                    if ("string" == typeof A)
                        this._bodyText = A;
                    else if (q.blob && Blob.prototype.isPrototypeOf(A))
                        this._bodyBlob = A;
                    else if (q.formData && FormData.prototype.isPrototypeOf(A))
                        this._bodyFormData = A;
                    else if (q.searchParams && URLSearchParams.prototype.isPrototypeOf(A))
                        this._bodyText = A.toString();
                    else if (q.arrayBuffer && q.blob && m(A))
                        this._bodyArrayBuffer = c(A.buffer),
                        this._bodyInit = new Blob([this._bodyArrayBuffer]);
                    else {
                        if (!q.arrayBuffer || !ArrayBuffer.prototype.isPrototypeOf(A) && !y(A))
                            throw new Error("unsupported BodyInit type");
                        this._bodyArrayBuffer = c(A)
                    }
                else
                    this._bodyText = "";
                this.headers.get("content-type") || ("string" == typeof A ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : q.searchParams && URLSearchParams.prototype.isPrototypeOf(A) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"))
            }
            ,
            q.blob && (this.blob = function() {
                var A = o(this);
                if (A)
                    return A;
                if (this._bodyBlob)
                    return Promise.resolve(this._bodyBlob);
                if (this._bodyArrayBuffer)
                    return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                if (this._bodyFormData)
                    throw new Error("could not read FormData body as blob");
                return Promise.resolve(new Blob([this._bodyText]))
            }
            ,
            this.arrayBuffer = function() {
                return this._bodyArrayBuffer ? o(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(a)
            }
            ),
            this.text = function() {
                var A = o(this);
                if (A)
                    return A;
                if (this._bodyBlob)
                    return u(this._bodyBlob);
                if (this._bodyArrayBuffer)
                    return Promise.resolve(l(this._bodyArrayBuffer));
                if (this._bodyFormData)
                    throw new Error("could not read FormData body as text");
                return Promise.resolve(this._bodyText)
            }
            ,
            q.formData && (this.formData = function() {
                return this.text().then(g)
            }
            ),
            this.json = function() {
                return this.text().then(JSON.parse)
            }
            ,
            this
        }
        function p(A) {
            var e = A.toUpperCase();
            return h.indexOf(e) > -1 ? e : A
        }
        function f(A, e) {
            e = e || {};
            var t = e.body;
            if (A instanceof f) {
                if (A.bodyUsed)
                    throw new TypeError("Already read");
                this.url = A.url,
                this.credentials = A.credentials,
                e.headers || (this.headers = new r(A.headers)),
                this.method = A.method,
                this.mode = A.mode,
                t || null == A._bodyInit || (t = A._bodyInit,
                A.bodyUsed = !0)
            } else
                this.url = String(A);
            if (this.credentials = e.credentials || this.credentials || "omit",
            !e.headers && this.headers || (this.headers = new r(e.headers)),
            this.method = p(e.method || this.method || "GET"),
            this.mode = e.mode || this.mode || null,
            this.referrer = null,
            ("GET" === this.method || "HEAD" === this.method) && t)
                throw new TypeError("Body not allowed for GET or HEAD requests");
            this._initBody(t)
        }
        function g(A) {
            var e = new FormData;
            return A.trim().split("&").forEach(function(A) {
                if (A) {
                    var t = A.split("=")
                      , n = t.shift().replace(/\+/g, " ")
                      , r = t.join("=").replace(/\+/g, " ");
                    e.append(decodeURIComponent(n), decodeURIComponent(r))
                }
            }),
            e
        }
        function I(A) {
            var e = new r;
            return A.split(/\r?\n/).forEach(function(A) {
                var t = A.split(":")
                  , n = t.shift().trim();
                if (n) {
                    var r = t.join(":").trim();
                    e.append(n, r)
                }
            }),
            e
        }
        function d(A, e) {
            e || (e = {}),
            this.type = "default",
            this.status = "status"in e ? e.status : 200,
            this.ok = this.status >= 200 && this.status < 300,
            this.statusText = "statusText"in e ? e.statusText : "OK",
            this.headers = new r(e.headers),
            this.url = e.url || "",
            this._initBody(A)
        }
        if (!A.fetch) {
            var q = {
                searchParams: "URLSearchParams"in A,
                iterable: "Symbol"in A && "iterator"in Symbol,
                blob: "FileReader"in A && "Blob"in A && function() {
                    try {
                        return new Blob,
                        !0
                    } catch (A) {
                        return !1
                    }
                }(),
                formData: "FormData"in A,
                arrayBuffer: "ArrayBuffer"in A
            };
            if (q.arrayBuffer)
                var C = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"]
                  , m = function(A) {
                    return A && DataView.prototype.isPrototypeOf(A)
                }
                  , y = ArrayBuffer.isView || function(A) {
                    return A && C.indexOf(Object.prototype.toString.call(A)) > -1
                }
                ;
            r.prototype.append = function(A, n) {
                A = e(A),
                n = t(n);
                var r = this.map[A];
                this.map[A] = r ? r + "," + n : n
            }
            ,
            r.prototype.delete = function(A) {
                delete this.map[e(A)]
            }
            ,
            r.prototype.get = function(A) {
                return A = e(A),
                this.has(A) ? this.map[A] : null
            }
            ,
            r.prototype.has = function(A) {
                return this.map.hasOwnProperty(e(A))
            }
            ,
            r.prototype.set = function(A, n) {
                this.map[e(A)] = t(n)
            }
            ,
            r.prototype.forEach = function(A, e) {
                for (var t in this.map)
                    this.map.hasOwnProperty(t) && A.call(e, this.map[t], t, this)
            }
            ,
            r.prototype.keys = function() {
                var A = [];
                return this.forEach(function(e, t) {
                    A.push(t)
                }),
                n(A)
            }
            ,
            r.prototype.values = function() {
                var A = [];
                return this.forEach(function(e) {
                    A.push(e)
                }),
                n(A)
            }
            ,
            r.prototype.entries = function() {
                var A = [];
                return this.forEach(function(e, t) {
                    A.push([t, e])
                }),
                n(A)
            }
            ,
            q.iterable && (r.prototype[Symbol.iterator] = r.prototype.entries);
            var h = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
            f.prototype.clone = function() {
                return new f(this,{
                    body: this._bodyInit
                })
            }
            ,
            s.call(f.prototype),
            s.call(d.prototype),
            d.prototype.clone = function() {
                return new d(this._bodyInit,{
                    status: this.status,
                    statusText: this.statusText,
                    headers: new r(this.headers),
                    url: this.url
                })
            }
            ,
            d.error = function() {
                var A = new d(null,{
                    status: 0,
                    statusText: ""
                });
                return A.type = "error",
                A
            }
            ;
            var M = [301, 302, 303, 307, 308];
            d.redirect = function(A, e) {
                if (M.indexOf(e) === -1)
                    throw new RangeError("Invalid status code");
                return new d(null,{
                    status: e,
                    headers: {
                        location: A
                    }
                })
            }
            ,
            A.Headers = r,
            A.Request = f,
            A.Response = d,
            A.fetch = function(A, e) {
                return new Promise(function(t, n) {
                    var r = new f(A,e)
                      , o = new XMLHttpRequest;
                    o.onload = function() {
                        var A = {
                            status: o.status,
                            statusText: o.statusText,
                            headers: I(o.getAllResponseHeaders() || "")
                        };
                        A.url = "responseURL"in o ? o.responseURL : A.headers.get("X-Request-URL");
                        var e = "response"in o ? o.response : o.responseText;
                        t(new d(e,A))
                    }
                    ,
                    o.onerror = function() {
                        n(new TypeError("Network request failed"))
                    }
                    ,
                    o.ontimeout = function() {
                        n(new TypeError("Network request failed"))
                    }
                    ,
                    o.open(r.method, r.url, !0),
                    "include" === r.credentials && (o.withCredentials = !0),
                    "responseType"in o && q.blob && (o.responseType = "blob"),
                    r.headers.forEach(function(A, e) {
                        o.setRequestHeader(e, A)
                    }),
                    o.send("undefined" == typeof r._bodyInit ? null : r._bodyInit)
                }
                )
            }
            ,
            A.fetch.polyfill = !0
        }
    }("undefined" != typeof self ? self : this)
}
, 124, [902, 58], function(A, e, t) {
    "use strict";
    function n(A) {
        return ("" + A).replace(y, "$&/")
    }
    function r(A, e) {
        this.func = A,
        this.context = e,
        this.count = 0
    }
    function o(A, e, t) {
        var n = A.func
          , r = A.context;
        n.call(r, e, A.count++)
    }
    function i(A, e, t) {
        if (null == A)
            return A;
        var n = r.getPooled(e, t);
        q(A, o, n),
        r.release(n)
    }
    function a(A, e, t, n) {
        this.result = A,
        this.keyPrefix = e,
        this.func = t,
        this.context = n,
        this.count = 0
    }
    function u(A, e, t) {
        var r = A.result
          , o = A.keyPrefix
          , i = A.func
          , a = A.context
          , u = i.call(a, e, A.count++);
        Array.isArray(u) ? l(u, r, t, d.thatReturnsArgument) : null != u && (I.isValidElement(u) && (u = I.cloneAndReplaceKey(u, o + (!u.key || e && e.key === u.key ? "" : n(u.key) + "/") + t)),
        r.push(u))
    }
    function l(A, e, t, r, o) {
        var i = "";
        null != t && (i = n(t) + "/");
        var l = a.getPooled(e, i, r, o);
        q(A, u, l),
        a.release(l)
    }
    function c(A, e, t) {
        if (null == A)
            return A;
        var n = [];
        return l(A, n, null, e, t),
        n
    }
    function s(A, e, t) {
        return null
    }
    function p(A, e) {
        return q(A, s, null)
    }
    function f(A) {
        var e = [];
        return l(A, e, null, d.thatReturnsArgument),
        e
    }
    var g = t(782)
      , I = t(44)
      , d = t(18)
      , q = t(792)
      , C = g.twoArgumentPooler
      , m = g.fourArgumentPooler
      , y = /\/+/g;
    r.prototype.destructor = function() {
        this.func = null,
        this.context = null,
        this.count = 0
    }
    ,
    g.addPoolingTo(r, C),
    a.prototype.destructor = function() {
        this.result = null,
        this.keyPrefix = null,
        this.func = null,
        this.context = null,
        this.count = 0
    }
    ,
    g.addPoolingTo(a, m);
    var h = {
        forEach: i,
        map: c,
        mapIntoWithKeyPrefixInternal: l,
        count: p,
        toArray: f
    };
    A.exports = h
}
, function(A, e, t) {
    "use strict";
    var n = t(44)
      , r = n.createFactory
      , o = {
        a: r("a"),
        abbr: r("abbr"),
        address: r("address"),
        area: r("area"),
        article: r("article"),
        aside: r("aside"),
        audio: r("audio"),
        b: r("b"),
        base: r("base"),
        bdi: r("bdi"),
        bdo: r("bdo"),
        big: r("big"),
        blockquote: r("blockquote"),
        body: r("body"),
        br: r("br"),
        button: r("button"),
        canvas: r("canvas"),
        caption: r("caption"),
        cite: r("cite"),
        code: r("code"),
        col: r("col"),
        colgroup: r("colgroup"),
        data: r("data"),
        datalist: r("datalist"),
        dd: r("dd"),
        del: r("del"),
        details: r("details"),
        dfn: r("dfn"),
        dialog: r("dialog"),
        div: r("div"),
        dl: r("dl"),
        dt: r("dt"),
        em: r("em"),
        embed: r("embed"),
        fieldset: r("fieldset"),
        figcaption: r("figcaption"),
        figure: r("figure"),
        footer: r("footer"),
        form: r("form"),
        h1: r("h1"),
        h2: r("h2"),
        h3: r("h3"),
        h4: r("h4"),
        h5: r("h5"),
        h6: r("h6"),
        head: r("head"),
        header: r("header"),
        hgroup: r("hgroup"),
        hr: r("hr"),
        html: r("html"),
        i: r("i"),
        iframe: r("iframe"),
        img: r("img"),
        input: r("input"),
        ins: r("ins"),
        kbd: r("kbd"),
        keygen: r("keygen"),
        label: r("label"),
        legend: r("legend"),
        li: r("li"),
        link: r("link"),
        main: r("main"),
        map: r("map"),
        mark: r("mark"),
        menu: r("menu"),
        menuitem: r("menuitem"),
        meta: r("meta"),
        meter: r("meter"),
        nav: r("nav"),
        noscript: r("noscript"),
        object: r("object"),
        ol: r("ol"),
        optgroup: r("optgroup"),
        option: r("option"),
        output: r("output"),
        p: r("p"),
        param: r("param"),
        picture: r("picture"),
        pre: r("pre"),
        progress: r("progress"),
        q: r("q"),
        rp: r("rp"),
        rt: r("rt"),
        ruby: r("ruby"),
        s: r("s"),
        samp: r("samp"),
        script: r("script"),
        section: r("section"),
        select: r("select"),
        small: r("small"),
        source: r("source"),
        span: r("span"),
        strong: r("strong"),
        style: r("style"),
        sub: r("sub"),
        summary: r("summary"),
        sup: r("sup"),
        table: r("table"),
        tbody: r("tbody"),
        td: r("td"),
        textarea: r("textarea"),
        tfoot: r("tfoot"),
        th: r("th"),
        thead: r("thead"),
        time: r("time"),
        title: r("title"),
        tr: r("tr"),
        track: r("track"),
        u: r("u"),
        ul: r("ul"),
        var: r("var"),
        video: r("video"),
        wbr: r("wbr"),
        circle: r("circle"),
        clipPath: r("clipPath"),
        defs: r("defs"),
        ellipse: r("ellipse"),
        g: r("g"),
        image: r("image"),
        line: r("line"),
        linearGradient: r("linearGradient"),
        mask: r("mask"),
        path: r("path"),
        pattern: r("pattern"),
        polygon: r("polygon"),
        polyline: r("polyline"),
        radialGradient: r("radialGradient"),
        rect: r("rect"),
        stop: r("stop"),
        svg: r("svg"),
        text: r("text"),
        tspan: r("tspan")
    };
    A.exports = o
}
, function(A, e, t) {
    "use strict";
    var n = t(44)
      , r = n.isValidElement
      , o = t(272);
    A.exports = o(r)
}
, 728, function(A, e, t) {
    "use strict";
    var n = t(304)
      , r = n.Component
      , o = t(44)
      , i = o.isValidElement
      , a = t(307)
      , u = t(184);
    A.exports = u(r, i, a)
}
, 747, function(A, e) {
    "use strict";
    function t() {
        return n++
    }
    var n = 1;
    A.exports = t
}
, function(A, e, t) {
    "use strict";
    var n = function() {};
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return o.isValidElement(A) ? void 0 : r("143"),
        A
    }
    var r = t(58)
      , o = t(44);
    t(5);
    A.exports = n
}
, function(A, e, t) {
    "use strict";
    function n(A, e) {
        return A && "object" == typeof A && null != A.key ? l.escape(A.key) : e.toString(36)
    }
    function r(A, e, t, o) {
        var p = typeof A;
        if ("undefined" !== p && "boolean" !== p || (A = null),
        null === A || "string" === p || "number" === p || "object" === p && A.$$typeof === a)
            return t(o, A, "" === e ? c + n(A, 0) : e),
            1;
        var f, g, I = 0, d = "" === e ? c : e + s;
        if (Array.isArray(A))
            for (var q = 0; q < A.length; q++)
                f = A[q],
                g = d + n(f, q),
                I += r(f, g, t, o);
        else {
            var C = u(A);
            if (C) {
                var m, y = C.call(A);
                if (C !== A.entries)
                    for (var h = 0; !(m = y.next()).done; )
                        f = m.value,
                        g = d + n(f, h++),
                        I += r(f, g, t, o);
                else
                    for (; !(m = y.next()).done; ) {
                        var M = m.value;
                        M && (f = M[1],
                        g = d + l.escape(M[0]) + s + n(f, 0),
                        I += r(f, g, t, o))
                    }
            } else if ("object" === p) {
                var V = ""
                  , E = String(A);
                i("31", "[object Object]" === E ? "object with keys {" + Object.keys(A).join(", ") + "}" : E, V)
            }
        }
        return I
    }
    function o(A, e, t) {
        return null == A ? 0 : r(A, "", e, t)
    }
    var i = t(58)
      , a = (t(26),
    t(306))
      , u = t(788)
      , l = (t(5),
    t(781))
      , c = (t(7),
    ".")
      , s = ":";
    A.exports = o
}
, function(A, e) {
    "use strict";
    function t() {
        for (var A = arguments.length, e = Array(A), t = 0; t < A; t++)
            e[t] = arguments[t];
        return function(A, t) {
            return e.reduce(function(A, e) {
                return e(A, t)
            }, A)
        }
    }
    e.__esModule = !0,
    e.default = t,
    A.exports = e.default
}
, function(A, e, t) {
    (function(A) {
        !function(A, t) {
            t(e)
        }(this, function(e) {
            "use strict";
            function t(A, e) {
                A.super_ = e,
                A.prototype = Object.create(e.prototype, {
                    constructor: {
                        value: A,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                })
            }
            function n(A, e) {
                Object.defineProperty(this, "kind", {
                    value: A,
                    enumerable: !0
                }),
                e && e.length && Object.defineProperty(this, "path", {
                    value: e,
                    enumerable: !0
                })
            }
            function r(A, e, t) {
                r.super_.call(this, "E", A),
                Object.defineProperty(this, "lhs", {
                    value: e,
                    enumerable: !0
                }),
                Object.defineProperty(this, "rhs", {
                    value: t,
                    enumerable: !0
                })
            }
            function o(A, e) {
                o.super_.call(this, "N", A),
                Object.defineProperty(this, "rhs", {
                    value: e,
                    enumerable: !0
                })
            }
            function i(A, e) {
                i.super_.call(this, "D", A),
                Object.defineProperty(this, "lhs", {
                    value: e,
                    enumerable: !0
                })
            }
            function a(A, e, t) {
                a.super_.call(this, "A", A),
                Object.defineProperty(this, "index", {
                    value: e,
                    enumerable: !0
                }),
                Object.defineProperty(this, "item", {
                    value: t,
                    enumerable: !0
                })
            }
            function u(A, e, t) {
                var n = A.slice((t || e) + 1 || A.length);
                return A.length = e < 0 ? A.length + e : e,
                A.push.apply(A, n),
                A
            }
            function l(A) {
                var e = "undefined" == typeof A ? "undefined" : U(A);
                return "object" !== e ? e : A === Math ? "math" : null === A ? "null" : Array.isArray(A) ? "array" : "[object Date]" === Object.prototype.toString.call(A) ? "date" : "function" == typeof A.toString && /^\/.*\//.test(A.toString()) ? "regexp" : "object"
            }
            function c(A, e, t, n, s, p, f) {
                s = s || [],
                f = f || [];
                var g = s.slice(0);
                if ("undefined" != typeof p) {
                    if (n) {
                        if ("function" == typeof n && n(g, p))
                            return;
                        if ("object" === ("undefined" == typeof n ? "undefined" : U(n))) {
                            if (n.prefilter && n.prefilter(g, p))
                                return;
                            if (n.normalize) {
                                var I = n.normalize(g, p, A, e);
                                I && (A = I[0],
                                e = I[1])
                            }
                        }
                    }
                    g.push(p)
                }
                "regexp" === l(A) && "regexp" === l(e) && (A = A.toString(),
                e = e.toString());
                var d = "undefined" == typeof A ? "undefined" : U(A)
                  , q = "undefined" == typeof e ? "undefined" : U(e)
                  , C = "undefined" !== d || f && f[f.length - 1].lhs && f[f.length - 1].lhs.hasOwnProperty(p)
                  , m = "undefined" !== q || f && f[f.length - 1].rhs && f[f.length - 1].rhs.hasOwnProperty(p);
                if (!C && m)
                    t(new o(g,e));
                else if (!m && C)
                    t(new i(g,A));
                else if (l(A) !== l(e))
                    t(new r(g,A,e));
                else if ("date" === l(A) && A - e !== 0)
                    t(new r(g,A,e));
                else if ("object" === d && null !== A && null !== e)
                    if (f.filter(function(e) {
                        return e.lhs === A
                    }).length)
                        A !== e && t(new r(g,A,e));
                    else {
                        if (f.push({
                            lhs: A,
                            rhs: e
                        }),
                        Array.isArray(A)) {
                            var y;
                            for (A.length,
                            y = 0; y < A.length; y++)
                                y >= e.length ? t(new a(g,y,new i(void 0,A[y]))) : c(A[y], e[y], t, n, g, y, f);
                            for (; y < e.length; )
                                t(new a(g,y,new o(void 0,e[y++])))
                        } else {
                            var h = Object.keys(A)
                              , M = Object.keys(e);
                            h.forEach(function(r, o) {
                                var i = M.indexOf(r);
                                i >= 0 ? (c(A[r], e[r], t, n, g, r, f),
                                M = u(M, i)) : c(A[r], void 0, t, n, g, r, f)
                            }),
                            M.forEach(function(A) {
                                c(void 0, e[A], t, n, g, A, f)
                            })
                        }
                        f.length = f.length - 1
                    }
                else
                    A !== e && ("number" === d && isNaN(A) && isNaN(e) || t(new r(g,A,e)))
            }
            function s(A, e, t, n) {
                return n = n || [],
                c(A, e, function(A) {
                    A && n.push(A)
                }, t),
                n.length ? n : void 0
            }
            function p(A, e, t) {
                if (t.path && t.path.length) {
                    var n, r = A[e], o = t.path.length - 1;
                    for (n = 0; n < o; n++)
                        r = r[t.path[n]];
                    switch (t.kind) {
                    case "A":
                        p(r[t.path[n]], t.index, t.item);
                        break;
                    case "D":
                        delete r[t.path[n]];
                        break;
                    case "E":
                    case "N":
                        r[t.path[n]] = t.rhs
                    }
                } else
                    switch (t.kind) {
                    case "A":
                        p(A[e], t.index, t.item);
                        break;
                    case "D":
                        A = u(A, e);
                        break;
                    case "E":
                    case "N":
                        A[e] = t.rhs
                    }
                return A
            }
            function f(A, e, t) {
                if (A && e && t && t.kind) {
                    for (var n = A, r = -1, o = t.path ? t.path.length - 1 : 0; ++r < o; )
                        "undefined" == typeof n[t.path[r]] && (n[t.path[r]] = "number" == typeof t.path[r] ? [] : {}),
                        n = n[t.path[r]];
                    switch (t.kind) {
                    case "A":
                        p(t.path ? n[t.path[r]] : n, t.index, t.item);
                        break;
                    case "D":
                        delete n[t.path[r]];
                        break;
                    case "E":
                    case "N":
                        n[t.path[r]] = t.rhs
                    }
                }
            }
            function g(A, e, t) {
                if (t.path && t.path.length) {
                    var n, r = A[e], o = t.path.length - 1;
                    for (n = 0; n < o; n++)
                        r = r[t.path[n]];
                    switch (t.kind) {
                    case "A":
                        g(r[t.path[n]], t.index, t.item);
                        break;
                    case "D":
                        r[t.path[n]] = t.lhs;
                        break;
                    case "E":
                        r[t.path[n]] = t.lhs;
                        break;
                    case "N":
                        delete r[t.path[n]]
                    }
                } else
                    switch (t.kind) {
                    case "A":
                        g(A[e], t.index, t.item);
                        break;
                    case "D":
                        A[e] = t.lhs;
                        break;
                    case "E":
                        A[e] = t.lhs;
                        break;
                    case "N":
                        A = u(A, e)
                    }
                return A
            }
            function I(A, e, t) {
                if (A && e && t && t.kind) {
                    var n, r, o = A;
                    for (r = t.path.length - 1,
                    n = 0; n < r; n++)
                        "undefined" == typeof o[t.path[n]] && (o[t.path[n]] = {}),
                        o = o[t.path[n]];
                    switch (t.kind) {
                    case "A":
                        g(o[t.path[n]], t.index, t.item);
                        break;
                    case "D":
                        o[t.path[n]] = t.lhs;
                        break;
                    case "E":
                        o[t.path[n]] = t.lhs;
                        break;
                    case "N":
                        delete o[t.path[n]]
                    }
                }
            }
            function d(A, e, t) {
                if (A && e) {
                    var n = function(n) {
                        t && !t(A, e, n) || f(A, e, n)
                    };
                    c(A, e, n)
                }
            }
            function q(A) {
                return "color: " + Z[A].color + "; font-weight: bold"
            }
            function C(A) {
                var e = A.kind
                  , t = A.path
                  , n = A.lhs
                  , r = A.rhs
                  , o = A.index
                  , i = A.item;
                switch (e) {
                case "E":
                    return [t.join("."), n, "→", r];
                case "N":
                    return [t.join("."), r];
                case "D":
                    return [t.join(".")];
                case "A":
                    return [t.join(".") + "[" + o + "]", i];
                default:
                    return []
                }
            }
            function m(A, e, t, n) {
                var r = s(A, e);
                try {
                    n ? t.groupCollapsed("diff") : t.group("diff")
                } catch (A) {
                    t.log("diff")
                }
                r ? r.forEach(function(A) {
                    var e = A.kind
                      , n = C(A);
                    t.log.apply(t, ["%c " + Z[e].text, q(e)].concat(G(n)))
                }) : t.log("—— no diff ——");
                try {
                    t.groupEnd()
                } catch (A) {
                    t.log("—— diff end —— ")
                }
            }
            function y(A, e, t, n) {
                switch ("undefined" == typeof A ? "undefined" : U(A)) {
                case "object":
                    return "function" == typeof A[n] ? A[n].apply(A, G(t)) : A[n];
                case "function":
                    return A(e);
                default:
                    return A
                }
            }
            function h(A) {
                var e = A.timestamp
                  , t = A.duration;
                return function(A, n, r) {
                    var o = ["action"];
                    return o.push("%c" + String(A.type)),
                    e && o.push("%c@ " + n),
                    t && o.push("%c(in " + r.toFixed(2) + " ms)"),
                    o.join(" ")
                }
            }
            function M(A, e) {
                var t = e.logger
                  , n = e.actionTransformer
                  , r = e.titleFormatter
                  , o = void 0 === r ? h(e) : r
                  , i = e.collapsed
                  , a = e.colors
                  , u = e.level
                  , l = e.diff
                  , c = "undefined" == typeof e.titleFormatter;
                A.forEach(function(r, s) {
                    var p = r.started
                      , f = r.startedTime
                      , g = r.action
                      , I = r.prevState
                      , d = r.error
                      , q = r.took
                      , C = r.nextState
                      , h = A[s + 1];
                    h && (C = h.prevState,
                    q = h.started - p);
                    var M = n(g)
                      , V = "function" == typeof i ? i(function() {
                        return C
                    }, g, r) : i
                      , E = v(f)
                      , S = a.title ? "color: " + a.title(M) + ";" : ""
                      , k = ["color: gray; font-weight: lighter;"];
                    k.push(S),
                    e.timestamp && k.push("color: gray; font-weight: lighter;"),
                    e.duration && k.push("color: gray; font-weight: lighter;");
                    var b = o(M, E, q);
                    try {
                        V ? a.title && c ? t.groupCollapsed.apply(t, ["%c " + b].concat(k)) : t.groupCollapsed(b) : a.title && c ? t.group.apply(t, ["%c " + b].concat(k)) : t.group(b)
                    } catch (A) {
                        t.log(b)
                    }
                    var R = y(u, M, [I], "prevState")
                      , U = y(u, M, [M], "action")
                      , G = y(u, M, [d, I], "error")
                      , Q = y(u, M, [C], "nextState");
                    if (R)
                        if (a.prevState) {
                            var Z = "color: " + a.prevState(I) + "; font-weight: bold";
                            t[R]("%c prev state", Z, I)
                        } else
                            t[R]("prev state", I);
                    if (U)
                        if (a.action) {
                            var O = "color: " + a.action(M) + "; font-weight: bold";
                            t[U]("%c action    ", O, M)
                        } else
                            t[U]("action    ", M);
                    if (d && G)
                        if (a.error) {
                            var j = "color: " + a.error(d, I) + "; font-weight: bold;";
                            t[G]("%c error     ", j, d)
                        } else
                            t[G]("error     ", d);
                    if (Q)
                        if (a.nextState) {
                            var B = "color: " + a.nextState(C) + "; font-weight: bold";
                            t[Q]("%c next state", B, C)
                        } else
                            t[Q]("next state", C);
                    l && m(I, C, t, V);
                    try {
                        t.groupEnd()
                    } catch (A) {
                        t.log("—— log end ——")
                    }
                })
            }
            function V() {
                var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                  , e = Object.assign({}, O, A)
                  , t = e.logger
                  , n = e.stateTransformer
                  , r = e.errorTransformer
                  , o = e.predicate
                  , i = e.logErrors
                  , a = e.diffPredicate;
                if ("undefined" == typeof t)
                    return function() {
                        return function(A) {
                            return function(e) {
                                return A(e)
                            }
                        }
                    }
                    ;
                if (A.getState && A.dispatch)
                    return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),
                    function() {
                        return function(A) {
                            return function(e) {
                                return A(e)
                            }
                        }
                    }
                    ;
                var u = [];
                return function(A) {
                    var t = A.getState;
                    return function(A) {
                        return function(l) {
                            if ("function" == typeof o && !o(t, l))
                                return A(l);
                            var c = {};
                            u.push(c),
                            c.started = R.now(),
                            c.startedTime = new Date,
                            c.prevState = n(t()),
                            c.action = l;
                            var s = void 0;
                            if (i)
                                try {
                                    s = A(l)
                                } catch (A) {
                                    c.error = r(A)
                                }
                            else
                                s = A(l);
                            c.took = R.now() - c.started,
                            c.nextState = n(t());
                            var p = e.diff && "function" == typeof a ? a(t, l) : e.diff;
                            if (M(u, Object.assign({}, e, {
                                diff: p
                            })),
                            u.length = 0,
                            c.error)
                                throw c.error;
                            return s
                        }
                    }
                }
            }
            var E, S, k = function(A, e) {
                return new Array(e + 1).join(A)
            }, b = function(A, e) {
                return k("0", e - A.toString().length) + A
            }, v = function(A) {
                return b(A.getHours(), 2) + ":" + b(A.getMinutes(), 2) + ":" + b(A.getSeconds(), 2) + "." + b(A.getMilliseconds(), 3)
            }, R = "undefined" != typeof performance && null !== performance && "function" == typeof performance.now ? performance : Date, U = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(A) {
                return typeof A
            }
            : function(A) {
                return A && "function" == typeof Symbol && A.constructor === Symbol && A !== Symbol.prototype ? "symbol" : typeof A
            }
            , G = function(A) {
                if (Array.isArray(A)) {
                    for (var e = 0, t = Array(A.length); e < A.length; e++)
                        t[e] = A[e];
                    return t
                }
                return Array.from(A)
            }, Q = [];
            E = "object" === ("undefined" == typeof A ? "undefined" : U(A)) && A ? A : "undefined" != typeof window ? window : {},
            S = E.DeepDiff,
            S && Q.push(function() {
                "undefined" != typeof S && E.DeepDiff === s && (E.DeepDiff = S,
                S = void 0)
            }),
            t(r, n),
            t(o, n),
            t(i, n),
            t(a, n),
            Object.defineProperties(s, {
                diff: {
                    value: s,
                    enumerable: !0
                },
                observableDiff: {
                    value: c,
                    enumerable: !0
                },
                applyDiff: {
                    value: d,
                    enumerable: !0
                },
                applyChange: {
                    value: f,
                    enumerable: !0
                },
                revertChange: {
                    value: I,
                    enumerable: !0
                },
                isConflict: {
                    value: function() {
                        return "undefined" != typeof S
                    },
                    enumerable: !0
                },
                noConflict: {
                    value: function() {
                        return Q && (Q.forEach(function(A) {
                            A()
                        }),
                        Q = null),
                        s
                    },
                    enumerable: !0
                }
            });
            var Z = {
                E: {
                    color: "#2196F3",
                    text: "CHANGED:"
                },
                N: {
                    color: "#4CAF50",
                    text: "ADDED:"
                },
                D: {
                    color: "#F44336",
                    text: "DELETED:"
                },
                A: {
                    color: "#2196F3",
                    text: "ARRAY:"
                }
            }
              , O = {
                level: "log",
                logger: console,
                logErrors: !0,
                collapsed: void 0,
                predicate: void 0,
                duration: !1,
                timestamp: !0,
                stateTransformer: function(A) {
                    return A
                },
                actionTransformer: function(A) {
                    return A
                },
                errorTransformer: function(A) {
                    return A
                },
                colors: {
                    title: function() {
                        return "inherit"
                    },
                    prevState: function() {
                        return "#9E9E9E"
                    },
                    action: function() {
                        return "#03A9F4"
                    },
                    nextState: function() {
                        return "#4CAF50"
                    },
                    error: function() {
                        return "#F20404"
                    }
                },
                diff: !1,
                diffPredicate: void 0,
                transformer: void 0
            }
              , j = function() {
                var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                  , e = A.dispatch
                  , t = A.getState;
                return "function" == typeof e || "function" == typeof t ? V()({
                    dispatch: e,
                    getState: t
                }) : void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")
            };
            e.defaults = O,
            e.createLogger = V,
            e.logger = j,
            e.default = j,
            Object.defineProperty(e, "__esModule", {
                value: !0
            })
        })
    }
    ).call(e, function() {
        return this
    }())
}
, function(A, e, t) {
    A.exports = t(796)
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(681)
      , r = e.perflogger = function(A) {
        return function(A) {
            return function(e) {
                console.log("%c Dispatching ", "background: #222; color: #bada55", e);
                var t = n()
                  , r = A(e)
                  , o = n();
                return console.log('%c Action with type "' + e.type + '" took ' + (o - t).toFixed(2) + " milliseconds.", "background: #bada55; color: #222"),
                r
            }
        }
    }
    ;
    e.default = r
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A) {
        if (Array.isArray(A)) {
            for (var e = 0, t = Array(A.length); e < A.length; e++)
                t[e] = A[e];
            return t
        }
        return Array.from(A)
    }
    function o(A, e) {
        var t = {};
        for (var n in A)
            e.indexOf(n) >= 0 || Object.prototype.hasOwnProperty.call(A, n) && (t[n] = A[n]);
        return t
    }
    function i() {
        function A(A) {
            function e(A, e, o) {
                return (0,
                l.default)(A.apply(void 0, r(e)), p.subscribe, f, t, n, i, o, A.name)
            }
            var t = A.getState
              , o = A.dispatch;
            u = e;
            var p = (0,
            c.emitter)();
            p.emit = (i.emitter || a.ident)(p.emit);
            var f = (0,
            a.wrapSagaDispatch)(o);
            return function(A) {
                return function(e) {
                    s && s.actionDispatched(e);
                    var t = A(e);
                    return p.emit(e),
                    t
                }
            }
        }
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
          , t = e.context
          , n = void 0 === t ? {} : t
          , i = o(e, ["context"])
          , u = void 0
          , s = i.sagaMonitor;
        if (s && (s.effectTriggered = s.effectTriggered || a.noop,
        s.effectResolved = s.effectResolved || a.noop,
        s.effectRejected = s.effectRejected || a.noop,
        s.effectCancelled = s.effectCancelled || a.noop,
        s.actionDispatched = s.actionDispatched || a.noop),
        a.is.func(i))
            throw new Error("Saga middleware no longer accept Generator functions. Use sagaMiddleware.run instead");
        if (i.logger && !a.is.func(i.logger))
            throw new Error("`options.logger` passed to the Saga middleware is not a function!");
        if (i.onerror && (a.isDev && (0,
        a.log)("warn", "`options.onerror` is deprecated. Use `options.onError` instead."),
        i.onError = i.onerror,
        delete i.onerror),
        i.onError && !a.is.func(i.onError))
            throw new Error("`options.onError` passed to the Saga middleware is not a function!");
        if (i.emitter && !a.is.func(i.emitter))
            throw new Error("`options.emitter` passed to the Saga middleware is not a function!");
        return A.run = function(A) {
            for (var e = arguments.length, t = Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
                t[n - 1] = arguments[n];
            (0,
            a.check)(u, a.is.notUndef, "Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware"),
            (0,
            a.check)(A, a.is.func, "sagaMiddleware.run(saga, ...args): saga argument must be a Generator function!");
            var r = (0,
            a.uid)();
            s && s.effectTriggered({
                effectId: r,
                root: !0,
                parentEffectId: 0,
                effect: {
                    root: !0,
                    saga: A,
                    args: t
                }
            });
            var o = u(A, t, r);
            return s && s.effectResolved(r, o),
            o
        }
        ,
        A.setContext = function(A) {
            (0,
            a.check)(A, a.is.object, (0,
            a.createSetContextWarning)("sagaMiddleware", A)),
            a.object.assign(n, A)
        }
        ,
        A
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = i;
    var a = t(27)
      , u = t(140)
      , l = n(u)
      , c = t(83)
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = e.subscribe
          , n = e.dispatch
          , r = e.getState
          , i = e.context
          , u = e.sagaMonitor
          , l = e.logger
          , c = e.onError;
        (0,
        o.check)(A, o.is.iterator, "runSaga must be called on an iterator");
        var s = (0,
        o.uid)();
        u && u.effectTriggered({
            effectId: s,
            root: !0,
            parentEffectId: 0,
            effect: {
                root: !0,
                saga: A,
                args: []
            }
        });
        var p = (0,
        a.default)(A, t, (0,
        o.wrapSagaDispatch)(n), r, i, {
            sagaMonitor: u,
            logger: l,
            onError: c
        }, s, A.name);
        return u && u.effectResolved(s, p),
        p
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.runSaga = r;
    var o = t(27)
      , i = t(140)
      , a = n(i)
}
, function(A, e, t) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var n = t(27);
    Object.defineProperty(e, "TASK", {
        enumerable: !0,
        get: function() {
            return n.TASK
        }
    }),
    Object.defineProperty(e, "SAGA_ACTION", {
        enumerable: !0,
        get: function() {
            return n.SAGA_ACTION
        }
    }),
    Object.defineProperty(e, "noop", {
        enumerable: !0,
        get: function() {
            return n.noop
        }
    }),
    Object.defineProperty(e, "is", {
        enumerable: !0,
        get: function() {
            return n.is
        }
    }),
    Object.defineProperty(e, "deferred", {
        enumerable: !0,
        get: function() {
            return n.deferred
        }
    }),
    Object.defineProperty(e, "arrayOfDeffered", {
        enumerable: !0,
        get: function() {
            return n.arrayOfDeffered
        }
    }),
    Object.defineProperty(e, "createMockTask", {
        enumerable: !0,
        get: function() {
            return n.createMockTask
        }
    });
    var r = t(84);
    Object.defineProperty(e, "asEffect", {
        enumerable: !0,
        get: function() {
            return r.asEffect
        }
    });
    var o = t(140);
    Object.defineProperty(e, "CHANNEL_END", {
        enumerable: !0,
        get: function() {
            return o.CHANNEL_END
        }
    })
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r() {
        for (var A = arguments.length, e = Array(A), t = 0; t < A; t++)
            e[t] = arguments[t];
        return function(A) {
            return function(t, n, r) {
                var i = A(t, n, r)
                  , u = i.dispatch
                  , l = []
                  , c = {
                    getState: i.getState,
                    dispatch: function(A) {
                        return u(A)
                    }
                };
                return l = e.map(function(A) {
                    return A(c)
                }),
                u = a.default.apply(void 0, l)(i.dispatch),
                o({}, i, {
                    dispatch: u
                })
            }
        }
    }
    e.__esModule = !0;
    var o = Object.assign || function(A) {
        for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (A[n] = t[n])
        }
        return A
    }
    ;
    e.default = r;
    var i = t(312)
      , a = n(i)
}
, function(A, e) {
    "use strict";
    function t(A, e) {
        return function() {
            return e(A.apply(void 0, arguments))
        }
    }
    function n(A, e) {
        if ("function" == typeof A)
            return t(A, e);
        if ("object" != typeof A || null === A)
            throw new Error("bindActionCreators expected an object or a function, instead received " + (null === A ? "null" : typeof A) + '. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
        for (var n = Object.keys(A), r = {}, o = 0; o < n.length; o++) {
            var i = n[o]
              , a = A[i];
            "function" == typeof a && (r[i] = t(a, e))
        }
        return r
    }
    e.__esModule = !0,
    e.default = n
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    function r(A, e) {
        var t = e && e.type
          , n = t && '"' + t.toString() + '"' || "an action";
        return "Given action " + n + ', reducer "' + A + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'
    }
    function o(A) {
        Object.keys(A).forEach(function(e) {
            var t = A[e]
              , n = t(void 0, {
                type: a.ActionTypes.INIT
            });
            if ("undefined" == typeof n)
                throw new Error('Reducer "' + e + "\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");
            var r = "@@redux/PROBE_UNKNOWN_ACTION_" + Math.random().toString(36).substring(7).split("").join(".");
            if ("undefined" == typeof t(void 0, {
                type: r
            }))
                throw new Error('Reducer "' + e + '" returned undefined when probed with a random type. ' + ("Don't try to handle " + a.ActionTypes.INIT + ' or other actions in "redux/*" ') + "namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.")
        })
    }
    function i(A) {
        for (var e = Object.keys(A), t = {}, n = 0; n < e.length; n++) {
            var i = e[n];
            "function" == typeof A[i] && (t[i] = A[i])
        }
        var a = Object.keys(t)
          , u = void 0;
        try {
            o(t)
        } catch (A) {
            u = A
        }
        return function() {
            var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
              , e = arguments[1];
            if (u)
                throw u;
            for (var n = !1, o = {}, i = 0; i < a.length; i++) {
                var l = a[i]
                  , c = t[l]
                  , s = A[l]
                  , p = c(s, e);
                if ("undefined" == typeof p) {
                    var f = r(l, e);
                    throw new Error(f)
                }
                o[l] = p,
                n = n || p !== s
            }
            return n ? o : A
        }
    }
    e.__esModule = !0,
    e.default = i;
    var a = t(313)
      , u = t(112)
      , l = (n(u),
    t(315));
    n(l)
}
, function(A, e, t) {
    (function(e) {
        var n = "object" == typeof e ? e : "object" == typeof window ? window : "object" == typeof self ? self : this
          , r = n.regeneratorRuntime && Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime") >= 0
          , o = r && n.regeneratorRuntime;
        if (n.regeneratorRuntime = void 0,
        A.exports = t(804),
        r)
            n.regeneratorRuntime = o;
        else
            try {
                delete n.regeneratorRuntime
            } catch (A) {
                n.regeneratorRuntime = void 0
            }
    }
    ).call(e, function() {
        return this
    }())
}
, function(A, e, t) {
    (function(e, t) {
        !function(e) {
            "use strict";
            function n(A, e, t, n) {
                var r = e && e.prototype instanceof o ? e : o
                  , i = Object.create(r.prototype)
                  , a = new g(n || []);
                return i._invoke = c(A, t, a),
                i
            }
            function r(A, e, t) {
                try {
                    return {
                        type: "normal",
                        arg: A.call(e, t)
                    }
                } catch (A) {
                    return {
                        type: "throw",
                        arg: A
                    }
                }
            }
            function o() {}
            function i() {}
            function a() {}
            function u(A) {
                ["next", "throw", "return"].forEach(function(e) {
                    A[e] = function(A) {
                        return this._invoke(e, A)
                    }
                })
            }
            function l(A) {
                function e(t, n, o, i) {
                    var a = r(A[t], A, n);
                    if ("throw" !== a.type) {
                        var u = a.arg
                          , l = u.value;
                        return l && "object" == typeof l && m.call(l, "__await") ? Promise.resolve(l.__await).then(function(A) {
                            e("next", A, o, i)
                        }, function(A) {
                            e("throw", A, o, i)
                        }) : Promise.resolve(l).then(function(A) {
                            u.value = A,
                            o(u)
                        }, i)
                    }
                    i(a.arg)
                }
                function n(A, t) {
                    function n() {
                        return new Promise(function(n, r) {
                            e(A, t, n, r)
                        }
                        )
                    }
                    return o = o ? o.then(n, n) : n()
                }
                "object" == typeof t && t.domain && (e = t.domain.bind(e));
                var o;
                this._invoke = n
            }
            function c(A, e, t) {
                var n = S;
                return function(o, i) {
                    if (n === b)
                        throw new Error("Generator is already running");
                    if (n === v) {
                        if ("throw" === o)
                            throw i;
                        return d()
                    }
                    for (t.method = o,
                    t.arg = i; ; ) {
                        var a = t.delegate;
                        if (a) {
                            var u = s(a, t);
                            if (u) {
                                if (u === R)
                                    continue;
                                return u
                            }
                        }
                        if ("next" === t.method)
                            t.sent = t._sent = t.arg;
                        else if ("throw" === t.method) {
                            if (n === S)
                                throw n = v,
                                t.arg;
                            t.dispatchException(t.arg)
                        } else
                            "return" === t.method && t.abrupt("return", t.arg);
                        n = b;
                        var l = r(A, e, t);
                        if ("normal" === l.type) {
                            if (n = t.done ? v : k,
                            l.arg === R)
                                continue;
                            return {
                                value: l.arg,
                                done: t.done
                            }
                        }
                        "throw" === l.type && (n = v,
                        t.method = "throw",
                        t.arg = l.arg)
                    }
                }
            }
            function s(A, e) {
                var t = A.iterator[e.method];
                if (t === q) {
                    if (e.delegate = null,
                    "throw" === e.method) {
                        if (A.iterator.return && (e.method = "return",
                        e.arg = q,
                        s(A, e),
                        "throw" === e.method))
                            return R;
                        e.method = "throw",
                        e.arg = new TypeError("The iterator does not provide a 'throw' method")
                    }
                    return R
                }
                var n = r(t, A.iterator, e.arg);
                if ("throw" === n.type)
                    return e.method = "throw",
                    e.arg = n.arg,
                    e.delegate = null,
                    R;
                var o = n.arg;
                return o ? o.done ? (e[A.resultName] = o.value,
                e.next = A.nextLoc,
                "return" !== e.method && (e.method = "next",
                e.arg = q),
                e.delegate = null,
                R) : o : (e.method = "throw",
                e.arg = new TypeError("iterator result is not an object"),
                e.delegate = null,
                R)
            }
            function p(A) {
                var e = {
                    tryLoc: A[0]
                };
                1 in A && (e.catchLoc = A[1]),
                2 in A && (e.finallyLoc = A[2],
                e.afterLoc = A[3]),
                this.tryEntries.push(e)
            }
            function f(A) {
                var e = A.completion || {};
                e.type = "normal",
                delete e.arg,
                A.completion = e
            }
            function g(A) {
                this.tryEntries = [{
                    tryLoc: "root"
                }],
                A.forEach(p, this),
                this.reset(!0)
            }
            function I(A) {
                if (A) {
                    var e = A[h];
                    if (e)
                        return e.call(A);
                    if ("function" == typeof A.next)
                        return A;
                    if (!isNaN(A.length)) {
                        var t = -1
                          , n = function e() {
                            for (; ++t < A.length; )
                                if (m.call(A, t))
                                    return e.value = A[t],
                                    e.done = !1,
                                    e;
                            return e.value = q,
                            e.done = !0,
                            e
                        };
                        return n.next = n
                    }
                }
                return {
                    next: d
                }
            }
            function d() {
                return {
                    value: q,
                    done: !0
                }
            }
            var q, C = Object.prototype, m = C.hasOwnProperty, y = "function" == typeof Symbol ? Symbol : {}, h = y.iterator || "@@iterator", M = y.toStringTag || "@@toStringTag", V = "object" == typeof A, E = e.regeneratorRuntime;
            if (E)
                return void (V && (A.exports = E));
            E = e.regeneratorRuntime = V ? A.exports : {},
            E.wrap = n;
            var S = "suspendedStart"
              , k = "suspendedYield"
              , b = "executing"
              , v = "completed"
              , R = {}
              , U = {};
            U[h] = function() {
                return this
            }
            ;
            var G = Object.getPrototypeOf
              , Q = G && G(G(I([])));
            Q && Q !== C && m.call(Q, h) && (U = Q);
            var Z = a.prototype = o.prototype = Object.create(U);
            i.prototype = Z.constructor = a,
            a.constructor = i,
            a[M] = i.displayName = "GeneratorFunction",
            E.isGeneratorFunction = function(A) {
                var e = "function" == typeof A && A.constructor;
                return !!e && (e === i || "GeneratorFunction" === (e.displayName || e.name))
            }
            ,
            E.mark = function(A) {
                return Object.setPrototypeOf ? Object.setPrototypeOf(A, a) : (A.__proto__ = a,
                M in A || (A[M] = "GeneratorFunction")),
                A.prototype = Object.create(Z),
                A
            }
            ,
            E.awrap = function(A) {
                return {
                    __await: A
                }
            }
            ,
            u(l.prototype),
            E.AsyncIterator = l,
            E.async = function(A, e, t, r) {
                var o = new l(n(A, e, t, r));
                return E.isGeneratorFunction(e) ? o : o.next().then(function(A) {
                    return A.done ? A.value : o.next()
                })
            }
            ,
            u(Z),
            Z[M] = "Generator",
            Z.toString = function() {
                return "[object Generator]"
            }
            ,
            E.keys = function(A) {
                var e = [];
                for (var t in A)
                    e.push(t);
                return e.reverse(),
                function t() {
                    for (; e.length; ) {
                        var n = e.pop();
                        if (n in A)
                            return t.value = n,
                            t.done = !1,
                            t
                    }
                    return t.done = !0,
                    t
                }
            }
            ,
            E.values = I,
            g.prototype = {
                constructor: g,
                reset: function(A) {
                    if (this.prev = 0,
                    this.next = 0,
                    this.sent = this._sent = q,
                    this.done = !1,
                    this.delegate = null,
                    this.method = "next",
                    this.arg = q,
                    this.tryEntries.forEach(f),
                    !A)
                        for (var e in this)
                            "t" === e.charAt(0) && m.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = q)
                },
                stop: function() {
                    this.done = !0;
                    var A = this.tryEntries[0]
                      , e = A.completion;
                    if ("throw" === e.type)
                        throw e.arg;
                    return this.rval
                },
                dispatchException: function(A) {
                    function e(e, n) {
                        return o.type = "throw",
                        o.arg = A,
                        t.next = e,
                        n && (t.method = "next",
                        t.arg = q),
                        !!n
                    }
                    if (this.done)
                        throw A;
                    for (var t = this, n = this.tryEntries.length - 1; n >= 0; --n) {
                        var r = this.tryEntries[n]
                          , o = r.completion;
                        if ("root" === r.tryLoc)
                            return e("end");
                        if (r.tryLoc <= this.prev) {
                            var i = m.call(r, "catchLoc")
                              , a = m.call(r, "finallyLoc");
                            if (i && a) {
                                if (this.prev < r.catchLoc)
                                    return e(r.catchLoc, !0);
                                if (this.prev < r.finallyLoc)
                                    return e(r.finallyLoc)
                            } else if (i) {
                                if (this.prev < r.catchLoc)
                                    return e(r.catchLoc, !0)
                            } else {
                                if (!a)
                                    throw new Error("try statement without catch or finally");
                                if (this.prev < r.finallyLoc)
                                    return e(r.finallyLoc)
                            }
                        }
                    }
                },
                abrupt: function(A, e) {
                    for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                        var n = this.tryEntries[t];
                        if (n.tryLoc <= this.prev && m.call(n, "finallyLoc") && this.prev < n.finallyLoc) {
                            var r = n;
                            break
                        }
                    }
                    r && ("break" === A || "continue" === A) && r.tryLoc <= e && e <= r.finallyLoc && (r = null);
                    var o = r ? r.completion : {};
                    return o.type = A,
                    o.arg = e,
                    r ? (this.method = "next",
                    this.next = r.finallyLoc,
                    R) : this.complete(o)
                },
                complete: function(A, e) {
                    if ("throw" === A.type)
                        throw A.arg;
                    return "break" === A.type || "continue" === A.type ? this.next = A.arg : "return" === A.type ? (this.rval = this.arg = A.arg,
                    this.method = "return",
                    this.next = "end") : "normal" === A.type && e && (this.next = e),
                    R
                },
                finish: function(A) {
                    for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                        var t = this.tryEntries[e];
                        if (t.finallyLoc === A)
                            return this.complete(t.completion, t.afterLoc),
                            f(t),
                            R
                    }
                },
                catch: function(A) {
                    for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                        var t = this.tryEntries[e];
                        if (t.tryLoc === A) {
                            var n = t.completion;
                            if ("throw" === n.type) {
                                var r = n.arg;
                                f(t)
                            }
                            return r
                        }
                    }
                    throw new Error("illegal catch attempt")
                },
                delegateYield: function(A, e, t) {
                    return this.delegate = {
                        iterator: I(A),
                        resultName: e,
                        nextLoc: t
                    },
                    "next" === this.method && (this.arg = q),
                    R
                }
            }
        }("object" == typeof e ? e : "object" == typeof window ? window : "object" == typeof self ? self : this)
    }
    ).call(e, function() {
        return this
    }(), t(39))
}
, function(A, e, t) {
    A.exports = t(806)
}
, function(A, e, t) {
    (function(A, n) {
        "use strict";
        function r(A) {
            return A && A.__esModule ? A : {
                default: A
            }
        }
        Object.defineProperty(e, "__esModule", {
            value: !0
        });
        var o, i = t(807), a = r(i);
        o = "undefined" != typeof self ? self : "undefined" != typeof window ? window : "undefined" != typeof A ? A : n;
        var u = (0,
        a.default)(o);
        e.default = u
    }
    ).call(e, function() {
        return this
    }(), t(316)(A))
}
, function(A, e) {
    "use strict";
    function t(A) {
        var e, t = A.Symbol;
        return "function" == typeof t ? t.observable ? e = t.observable : (e = t("observable"),
        t.observable = e) : e = "@@observable",
        e
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    }),
    e.default = t
}
, function(A, e, t) {
    A.exports = t.p + "static/media/brush_roller_texture.d9ed4189.png"
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(887)
      , o = n(r)
      , i = t(59)
      , a = n(i)
      , u = t(35)
      , l = n(u)
      , c = t(94)
      , s = n(c)
      , p = t(900)
      , f = n(p)
      , g = function(A) {
        return Array.isArray(A) || (0,
        l.default)(A)
    }
      , I = function A(e, t, n) {
        var r = function(A, r) {
            console.group(n),
            r ? console.warn("%c%s", "font-weight: bold", A) : console.warn(A),
            console.log("%cbefore", "font-weight: bold", e),
            console.log("%cafter ", "font-weight: bold", t),
            console.groupEnd()
        }
          , i = g(e) && g(t);
        if ((0,
        o.default)(e, t)) {
            if (e !== t && (r("Value did not change. Avoidable re-render!", !0),
            i)) {
                var u = (0,
                f.default)((0,
                s.default)(e), (0,
                s.default)(t));
                u.forEach(function(r) {
                    return A(e[r], t[r], n + "." + r)
                })
            }
        } else {
            var l = (0,
            a.default)(e) && (0,
            a.default)(t);
            if (l)
                e.name === t.name && r("Value is a function. Possibly avoidable re-render?", !1);
            else if (i) {
                var u = (0,
                f.default)((0,
                s.default)(e), (0,
                s.default)(t));
                u.forEach(function(r) {
                    return A(e[r], t[r], n + "." + r)
                })
            }
        }
    };
    e.deepDiff = I
}
, function(A, e) {
    "use strict";
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var t = function(A) {
        return A.displayName || A.constructor.displayName || A.constructor.name
    };
    e.getDisplayName = t
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return function(e, t) {
            var n = (0,
            o.getDisplayName)(this);
            (0,
            a.shouldInclude)(n, A) && ((0,
            r.deepDiff)(e, this.props, n + ".props"),
            t && this.state && (0,
            r.deepDiff)(t, this.state, n + ".state"))
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(809)
      , o = t(810)
      , i = t(812)
      , a = t(813)
      , u = function(A) {
        var e = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1]
          , t = A.Component.prototype.componentDidUpdate
          , r = A.createClass;
        return e = (0,
        i.normalizeOptions)(e),
        A.Component.prototype.componentDidUpdate = n(e),
        r && (A.createClass = function(t) {
            t.mixins || (t.mixins = []);
            var o = {
                componentDidUpdate: n(e)
            };
            return t.mixins = [o].concat(t.mixins),
            r.call(A, t)
        }
        ),
        A.__WHY_DID_YOU_UPDATE_RESTORE_FN__ = function() {
            A.Component.prototype.componentDidUpdate = t,
            A.createClass = r,
            delete A.__WHY_DID_YOU_UPDATE_RESTORE_FN__
        }
        ,
        A
    };
    e.whyDidYouUpdate = u,
    e.default = u
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(146)
      , o = n(r)
      , i = /./;
    e.DEFAULT_INCLUDE = i;
    var a = /[^a-zA-Z0-9]/;
    e.DEFAULT_EXCLUDE = a;
    var u = function(A) {
        return (0,
        o.default)(A) ? new RegExp("^" + A + "$") : A
    }
      , l = function(A) {
        return A ? [].concat(A) : []
    }
      , c = function() {
        var A = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0]
          , e = A.include
          , t = void 0 === e ? [i] : e
          , n = A.exclude
          , r = void 0 === n ? [a] : n;
        return {
            include: l(t).map(u),
            exclude: l(r).map(u)
        }
    };
    e.normalizeOptions = c
}
, function(A, e, t) {
    "use strict";
    function n(A) {
        return A && A.__esModule ? A : {
            default: A
        }
    }
    Object.defineProperty(e, "__esModule", {
        value: !0
    });
    var r = t(894)
      , o = n(r)
      , i = t(59)
      , a = (n(i),
    function(A, e) {
        var t = e.include
          , n = e.exclude
          , r = (0,
        o.default)(t, function(e) {
            return e.test(A)
        })
          , i = (0,
        o.default)(n, function(e) {
            return e.test(A)
        });
        return r && !i
    }
    );
    e.shouldInclude = a
}
, function(A, e, t) {
    var n = t(45)
      , r = t(34)
      , o = n(r, "DataView");
    A.exports = o
}
, function(A, e, t) {
    function n(A) {
        var e = -1
          , t = A ? A.length : 0;
        for (this.clear(); ++e < t; ) {
            var n = A[e];
            this.set(n[0], n[1])
        }
    }
    var r = t(854)
      , o = t(855)
      , i = t(856)
      , a = t(857)
      , u = t(858);
    n.prototype.clear = r,
    n.prototype.delete = o,
    n.prototype.get = i,
    n.prototype.has = a,
    n.prototype.set = u,
    A.exports = n
}
, function(A, e, t) {
    var n = t(45)
      , r = t(34)
      , o = n(r, "Promise");
    A.exports = o
}
, function(A, e, t) {
    var n = t(34)
      , r = n.Uint8Array;
    A.exports = r
}
, function(A, e, t) {
    var n = t(45)
      , r = t(34)
      , o = n(r, "WeakMap");
    A.exports = o
}
, function(A, e) {
    function t(A, e, t) {
        var n = t.length;
        switch (n) {
        case 0:
            return A.call(e);
        case 1:
            return A.call(e, t[0]);
        case 2:
            return A.call(e, t[0], t[1]);
        case 3:
            return A.call(e, t[0], t[1], t[2])
        }
        return A.apply(e, t)
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A, e) {
        return !!A.length && r(A, e, 0) > -1
    }
    var r = t(829);
    A.exports = n
}
, function(A, e) {
    function t(A, e, t) {
        for (var n = -1, r = A.length; ++n < r; )
            if (t(e, A[n]))
                return !0;
        return !1
    }
    A.exports = t
}
, function(A, e) {
    function t(A, e) {
        for (var t = -1, n = A.length, r = Array(n); ++t < n; )
            r[t] = e(A[t], t, A);
        return r
    }
    A.exports = t
}
, function(A, e) {
    function t(A, e) {
        for (var t = -1, n = e.length, r = A.length; ++t < n; )
            A[r + t] = e[t];
        return A
    }
    A.exports = t
}
, function(A, e, t) {
    var n = t(827)
      , r = t(844)
      , o = r(n);
    A.exports = o
}
, function(A, e, t) {
    function n(A, e, t, i, a) {
        var u = -1
          , l = A.length;
        for (t || (t = o),
        a || (a = []); ++u < l; ) {
            var c = A[u];
            e > 0 && t(c) ? e > 1 ? n(c, e - 1, t, i, a) : r(a, c) : i || (a[a.length] = c)
        }
        return a
    }
    var r = t(823)
      , o = t(861);
    A.exports = n
}
, function(A, e, t) {
    var n = t(845)
      , r = n();
    A.exports = r
}
, function(A, e, t) {
    function n(A, e) {
        return A && r(A, e, o)
    }
    var r = t(826)
      , o = t(94);
    A.exports = n
}
, function(A, e) {
    function t(A, e) {
        return e in Object(A)
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A, e, t) {
        if (e !== e)
            return r(A, t);
        for (var n = t - 1, o = A.length; ++n < o; )
            if (A[n] === e)
                return n;
        return -1
    }
    var r = t(860);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e, t, n, d, C) {
        var m = l(A)
          , y = l(e)
          , h = g
          , M = g;
        m || (h = u(A),
        h = h == f ? I : h),
        y || (M = u(e),
        M = M == f ? I : M);
        var V = h == I && !c(A)
          , E = M == I && !c(e)
          , S = h == M;
        if (S && !V)
            return C || (C = new r),
            m || s(A) ? o(A, e, t, n, d, C) : i(A, e, h, t, n, d, C);
        if (!(d & p)) {
            var k = V && q.call(A, "__wrapped__")
              , b = E && q.call(e, "__wrapped__");
            if (k || b) {
                var v = k ? A.value() : A
                  , R = b ? e.value() : e;
                return C || (C = new r),
                t(v, R, n, d, C)
            }
        }
        return !!S && (C || (C = new r),
        a(A, e, t, n, d, C))
    }
    var r = t(320)
      , o = t(327)
      , i = t(848)
      , a = t(849)
      , u = t(328)
      , l = t(28)
      , c = t(329)
      , s = t(889)
      , p = 2
      , f = "[object Arguments]"
      , g = "[object Array]"
      , I = "[object Object]"
      , d = Object.prototype
      , q = d.hasOwnProperty;
    A.exports = n
}
, function(A, e, t) {
    function n(A, e, t, n) {
        var u = t.length
          , l = u
          , c = !n;
        if (null == A)
            return !l;
        for (A = Object(A); u--; ) {
            var s = t[u];
            if (c && s[2] ? s[1] !== A[s[0]] : !(s[0]in A))
                return !1
        }
        for (; ++u < l; ) {
            s = t[u];
            var p = s[0]
              , f = A[p]
              , g = s[1];
            if (c && s[2]) {
                if (void 0 === f && !(p in A))
                    return !1
            } else {
                var I = new r;
                if (n)
                    var d = n(f, g, p, A, e, I);
                if (!(void 0 === d ? o(g, f, n, i | a, I) : d))
                    return !1
            }
        }
        return !0
    }
    var r = t(320)
      , o = t(142)
      , i = 1
      , a = 2;
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        return "function" == typeof A ? A : null == A ? i : "object" == typeof A ? a(A) ? o(A[0], A[1]) : r(A) : u(A)
    }
    var r = t(834)
      , o = t(835)
      , i = t(886)
      , a = t(28)
      , u = t(892);
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return n(Object(A))
    }
    var n = Object.keys;
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        var e = o(A);
        return 1 == e.length && e[0][2] ? i(e[0][0], e[0][1]) : function(t) {
            return t === A || r(t, A, e)
        }
    }
    var r = t(831)
      , o = t(851)
      , i = t(332);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        return a(A) && u(e) ? l(c(A), e) : function(t) {
            var n = o(t, A);
            return void 0 === n && n === e ? i(t, A) : r(e, n, void 0, s | p)
        }
    }
    var r = t(142)
      , o = t(884)
      , i = t(885)
      , a = t(88)
      , u = t(330)
      , l = t(332)
      , c = t(90)
      , s = 1
      , p = 2;
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        return function(e) {
            return r(e, A)
        }
    }
    var r = t(323);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        var t;
        return r(A, function(A, n, r) {
            return t = e(A, n, r),
            !t
        }),
        !!t
    }
    var r = t(824);
    A.exports = n
}
, function(A, e) {
    function t(A, e) {
        for (var t = -1, n = Array(A); ++t < A; )
            n[t] = e(t);
        return n
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A, e) {
        return r(e, function(e) {
            return [e, A[e]]
        })
    }
    var r = t(822);
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        if ("string" == typeof A)
            return A;
        if (o(A))
            return u ? u.call(A) : "";
        var e = A + "";
        return "0" == e && 1 / A == -i ? "-0" : e
    }
    var r = t(321)
      , o = t(93)
      , i = 1 / 0
      , a = r ? r.prototype : void 0
      , u = a ? a.toString : void 0;
    A.exports = n
}
, function(A, e, t) {
    function n(A, e, t) {
        var n = -1
          , s = o
          , p = A.length
          , f = !0
          , g = []
          , I = g;
        if (t)
            f = !1,
            s = i;
        else if (p >= c) {
            var d = e ? null : u(A);
            if (d)
                return l(d);
            f = !1,
            s = a,
            I = new r
        } else
            I = e ? [] : g;
        A: for (; ++n < p; ) {
            var q = A[n]
              , C = e ? e(q) : q;
            if (q = t || 0 !== q ? q : 0,
            f && C === C) {
                for (var m = I.length; m--; )
                    if (I[m] === C)
                        continue A;
                e && I.push(C),
                g.push(q)
            } else
                s(I, C, t) || (I !== g && I.push(C),
                g.push(q))
        }
        return g
    }
    var r = t(319)
      , o = t(820)
      , i = t(821)
      , a = t(842)
      , u = t(846)
      , l = t(144)
      , c = 200;
    A.exports = n
}
, function(A, e) {
    function t(A, e) {
        return A.has(e)
    }
    A.exports = t
}
, function(A, e) {
    function t(A) {
        return A && A.Object === Object ? A : null
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A, e) {
        return function(t, n) {
            if (null == t)
                return t;
            if (!r(t))
                return A(t, n);
            for (var o = t.length, i = e ? o : -1, a = Object(t); (e ? i-- : ++i < o) && n(a[i], i, a) !== !1; )
                ;
            return t
        }
    }
    var r = t(91);
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return function(e, t, n) {
            for (var r = -1, o = Object(e), i = n(e), a = i.length; a--; ) {
                var u = i[A ? a : ++r];
                if (t(o[u], u, o) === !1)
                    break
            }
            return e
        }
    }
    A.exports = t
}
, function(A, e, t) {
    var n = t(318)
      , r = t(891)
      , o = t(144)
      , i = 1 / 0
      , a = n && 1 / o(new n([, -0]))[1] == i ? function(A) {
        return new n(A)
    }
    : r;
    A.exports = a
}
, function(A, e, t) {
    function n(A) {
        return function(e) {
            var t = o(e);
            return t == u ? i(e) : t == l ? a(e) : r(e, A(e))
        }
    }
    var r = t(839)
      , o = t(328)
      , i = t(331)
      , a = t(877)
      , u = "[object Map]"
      , l = "[object Set]";
    A.exports = n
}
, function(A, e, t) {
    function n(A, e, t, n, r, M, E) {
        switch (t) {
        case h:
            if (A.byteLength != e.byteLength || A.byteOffset != e.byteOffset)
                return !1;
            A = A.buffer,
            e = e.buffer;
        case y:
            return !(A.byteLength != e.byteLength || !n(new o(A), new o(e)));
        case s:
        case p:
            return +A == +e;
        case f:
            return A.name == e.name && A.message == e.message;
        case I:
            return A != +A ? e != +e : A == +e;
        case d:
        case C:
            return A == e + "";
        case g:
            var S = a;
        case q:
            var k = M & c;
            if (S || (S = u),
            A.size != e.size && !k)
                return !1;
            var b = E.get(A);
            return b ? b == e : (M |= l,
            E.set(A, e),
            i(S(A), S(e), n, r, M, E));
        case m:
            if (V)
                return V.call(A) == V.call(e)
        }
        return !1
    }
    var r = t(321)
      , o = t(817)
      , i = t(327)
      , a = t(331)
      , u = t(144)
      , l = 1
      , c = 2
      , s = "[object Boolean]"
      , p = "[object Date]"
      , f = "[object Error]"
      , g = "[object Map]"
      , I = "[object Number]"
      , d = "[object RegExp]"
      , q = "[object Set]"
      , C = "[object String]"
      , m = "[object Symbol]"
      , y = "[object ArrayBuffer]"
      , h = "[object DataView]"
      , M = r ? r.prototype : void 0
      , V = M ? M.valueOf : void 0;
    A.exports = n
}
, function(A, e, t) {
    function n(A, e, t, n, a, u) {
        var l = a & i
          , c = o(A)
          , s = c.length
          , p = o(e)
          , f = p.length;
        if (s != f && !l)
            return !1;
        for (var g = s; g--; ) {
            var I = c[g];
            if (!(l ? I in e : r(e, I)))
                return !1
        }
        var d = u.get(A);
        if (d)
            return d == e;
        var q = !0;
        u.set(A, e);
        for (var C = l; ++g < s; ) {
            I = c[g];
            var m = A[I]
              , y = e[I];
            if (n)
                var h = l ? n(y, m, I, e, A, u) : n(m, y, I, A, e, u);
            if (!(void 0 === h ? m === y || t(m, y, n, a, u) : h)) {
                q = !1;
                break
            }
            C || (C = "constructor" == I)
        }
        if (q && !C) {
            var M = A.constructor
              , V = e.constructor;
            M != V && "constructor"in A && "constructor"in e && !("function" == typeof M && M instanceof M && "function" == typeof V && V instanceof V) && (q = !1)
        }
        return u.delete(A),
        q
    }
    var r = t(324)
      , o = t(94)
      , i = 2;
    A.exports = n
}
, function(A, e, t) {
    var n = t(325)
      , r = n("length");
    A.exports = r
}
, function(A, e, t) {
    function n(A) {
        for (var e = o(A), t = e.length; t--; )
            e[t][2] = r(e[t][1]);
        return e
    }
    var r = t(330)
      , o = t(898);
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return n(Object(A))
    }
    var n = Object.getPrototypeOf;
    A.exports = t
}
, function(A, e, t) {
    function n(A, e, t) {
        e = u(e, A) ? [e] : r(e);
        for (var n, p = -1, f = e.length; ++p < f; ) {
            var g = s(e[p]);
            if (!(n = null != A && t(A, g)))
                break;
            A = A[g]
        }
        if (n)
            return n;
        var f = A ? A.length : 0;
        return !!f && l(f) && a(g, f) && (i(A) || c(A) || o(A))
    }
    var r = t(326)
      , o = t(145)
      , i = t(28)
      , a = t(143)
      , u = t(88)
      , l = t(92)
      , c = t(146)
      , s = t(90);
    A.exports = n
}
, function(A, e, t) {
    function n() {
        this.__data__ = r ? r(null) : {}
    }
    var r = t(89);
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return this.has(A) && delete this.__data__[A]
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        var e = this.__data__;
        if (r) {
            var t = e[A];
            return t === o ? void 0 : t
        }
        return a.call(e, A) ? e[A] : void 0
    }
    var r = t(89)
      , o = "__lodash_hash_undefined__"
      , i = Object.prototype
      , a = i.hasOwnProperty;
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        var e = this.__data__;
        return r ? void 0 !== e[A] : i.call(e, A)
    }
    var r = t(89)
      , o = Object.prototype
      , i = o.hasOwnProperty;
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        var t = this.__data__;
        return t[A] = r && void 0 === e ? o : e,
        this
    }
    var r = t(89)
      , o = "__lodash_hash_undefined__";
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        var e = A ? A.length : void 0;
        return a(e) && (i(A) || u(A) || o(A)) ? r(e, String) : null
    }
    var r = t(838)
      , o = t(145)
      , i = t(28)
      , a = t(92)
      , u = t(146);
    A.exports = n
}
, function(A, e) {
    function t(A, e, t) {
        for (var n = A.length, r = e + (t ? 0 : -1); t ? r-- : ++r < n; ) {
            var o = A[r];
            if (o !== o)
                return r
        }
        return -1
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        return o(A) || r(A)
    }
    var r = t(145)
      , o = t(28);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e, t) {
        if (!a(t))
            return !1;
        var n = typeof e;
        return !!("number" == n ? o(t) && i(e, t.length) : "string" == n && e in t) && r(t[e], A)
    }
    var r = t(334)
      , o = t(91)
      , i = t(143)
      , a = t(35);
    A.exports = n
}
, function(A, e) {
    function t(A) {
        var e = typeof A;
        return "string" == e || "number" == e || "symbol" == e || "boolean" == e ? "__proto__" !== A : null === A
    }
    A.exports = t
}
, function(A, e) {
    function t(A) {
        var e = A && A.constructor
          , t = "function" == typeof e && e.prototype || n;
        return A === t
    }
    var n = Object.prototype;
    A.exports = t
}
, function(A, e) {
    function t() {
        this.__data__ = []
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        var e = this.__data__
          , t = r(e, A);
        if (t < 0)
            return !1;
        var n = e.length - 1;
        return t == n ? e.pop() : i.call(e, t, 1),
        !0
    }
    var r = t(86)
      , o = Array.prototype
      , i = o.splice;
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        var e = this.__data__
          , t = r(e, A);
        return t < 0 ? void 0 : e[t][1]
    }
    var r = t(86);
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        return r(this.__data__, A) > -1
    }
    var r = t(86);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        var t = this.__data__
          , n = r(t, A);
        return n < 0 ? t.push([A, e]) : t[n][1] = e,
        this
    }
    var r = t(86);
    A.exports = n
}
, function(A, e, t) {
    function n() {
        this.__data__ = {
            hash: new r,
            map: new (i || o),
            string: new r
        }
    }
    var r = t(815)
      , o = t(85)
      , i = t(317);
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        return r(this, A).delete(A)
    }
    var r = t(87);
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        return r(this, A).get(A)
    }
    var r = t(87);
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        return r(this, A).has(A)
    }
    var r = t(87);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        return r(this, A).set(A, e),
        this
    }
    var r = t(87);
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return this.__data__.set(A, n),
        this
    }
    var n = "__lodash_hash_undefined__";
    A.exports = t
}
, function(A, e) {
    function t(A) {
        return this.__data__.has(A)
    }
    A.exports = t
}
, function(A, e) {
    function t(A) {
        var e = -1
          , t = Array(A.size);
        return A.forEach(function(A) {
            t[++e] = [A, A]
        }),
        t
    }
    A.exports = t
}
, function(A, e, t) {
    function n() {
        this.__data__ = new r
    }
    var r = t(85);
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return this.__data__.delete(A)
    }
    A.exports = t
}
, function(A, e) {
    function t(A) {
        return this.__data__.get(A)
    }
    A.exports = t
}
, function(A, e) {
    function t(A) {
        return this.__data__.has(A)
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A, e) {
        var t = this.__data__;
        return t instanceof r && t.__data__.length == i && (t = this.__data__ = new o(t.__data__)),
        t.set(A, e),
        this
    }
    var r = t(85)
      , o = t(141)
      , i = 200;
    A.exports = n
}
, function(A, e, t) {
    var n = t(890)
      , r = t(899)
      , o = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g
      , i = /\\(\\)?/g
      , a = n(function(A) {
        var e = [];
        return r(A).replace(o, function(A, t, n, r) {
            e.push(n ? r.replace(i, "$1") : t || A)
        }),
        e
    });
    A.exports = a
}
, function(A, e, t) {
    function n(A, e, t) {
        var n = null == A ? void 0 : r(A, e);
        return void 0 === n ? t : n
    }
    var r = t(323);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        return null != A && o(A, e, r)
    }
    var r = t(828)
      , o = t(853);
    A.exports = n
}
, function(A, e) {
    function t(A) {
        return A
    }
    A.exports = t
}
, function(A, e, t) {
    function n(A, e) {
        return r(A, e)
    }
    var r = t(142);
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        if (!i(A))
            return !1;
        var e = r(A) || o(A) ? f : l;
        return e.test(a(A))
    }
    var r = t(59)
      , o = t(329)
      , i = t(35)
      , a = t(333)
      , u = /[\\^$.*+?()[\]{}|]/g
      , l = /^\[object .+?Constructor\]$/
      , c = Object.prototype
      , s = Function.prototype.toString
      , p = c.hasOwnProperty
      , f = RegExp("^" + s.call(p).replace(u, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        return o(A) && r(A.length) && !!U[Q.call(A)]
    }
    var r = t(92)
      , o = t(60)
      , i = "[object Arguments]"
      , a = "[object Array]"
      , u = "[object Boolean]"
      , l = "[object Date]"
      , c = "[object Error]"
      , s = "[object Function]"
      , p = "[object Map]"
      , f = "[object Number]"
      , g = "[object Object]"
      , I = "[object RegExp]"
      , d = "[object Set]"
      , q = "[object String]"
      , C = "[object WeakMap]"
      , m = "[object ArrayBuffer]"
      , y = "[object DataView]"
      , h = "[object Float32Array]"
      , M = "[object Float64Array]"
      , V = "[object Int8Array]"
      , E = "[object Int16Array]"
      , S = "[object Int32Array]"
      , k = "[object Uint8Array]"
      , b = "[object Uint8ClampedArray]"
      , v = "[object Uint16Array]"
      , R = "[object Uint32Array]"
      , U = {};
    U[h] = U[M] = U[V] = U[E] = U[S] = U[k] = U[b] = U[v] = U[R] = !0,
    U[i] = U[a] = U[m] = U[u] = U[y] = U[l] = U[c] = U[s] = U[p] = U[f] = U[g] = U[I] = U[d] = U[q] = U[C] = !1;
    var G = Object.prototype
      , Q = G.toString;
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        if ("function" != typeof A || e && "function" != typeof e)
            throw new TypeError(o);
        var t = function() {
            var n = arguments
              , r = e ? e.apply(this, n) : n[0]
              , o = t.cache;
            if (o.has(r))
                return o.get(r);
            var i = A.apply(this, n);
            return t.cache = o.set(r, i),
            i
        };
        return t.cache = new (n.Cache || r),
        t
    }
    var r = t(141)
      , o = "Expected a function";
    n.Cache = r,
    A.exports = n
}
, function(A, e) {
    function t() {}
    A.exports = t
}
, function(A, e, t) {
    function n(A) {
        return i(A) ? r(a(A)) : o(A)
    }
    var r = t(325)
      , o = t(836)
      , i = t(88)
      , a = t(90);
    A.exports = n
}
, function(A, e, t) {
    function n(A, e) {
        if ("function" != typeof A)
            throw new TypeError(i);
        return e = a(void 0 === e ? A.length - 1 : o(e), 0),
        function() {
            for (var t = arguments, n = -1, o = a(t.length - e, 0), i = Array(o); ++n < o; )
                i[n] = t[e + n];
            switch (e) {
            case 0:
                return A.call(this, i);
            case 1:
                return A.call(this, t[0], i);
            case 2:
                return A.call(this, t[0], t[1], i)
            }
            var u = Array(e + 1);
            for (n = -1; ++n < e; )
                u[n] = t[n];
            return u[e] = i,
            r(A, this, u)
        }
    }
    var r = t(819)
      , o = t(896)
      , i = "Expected a function"
      , a = Math.max;
    A.exports = n
}
, function(A, e, t) {
    function n(A, e, t) {
        var n = a(A) ? r : i;
        return t && u(A, e, t) && (e = void 0),
        n(A, o(e, 3))
    }
    var r = t(322)
      , o = t(832)
      , i = t(837)
      , a = t(28)
      , u = t(862);
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        if (!A)
            return 0 === A ? A : 0;
        if (A = r(A),
        A === o || A === -o) {
            var e = A < 0 ? -1 : 1;
            return e * i
        }
        return A === A ? A : 0
    }
    var r = t(897)
      , o = 1 / 0
      , i = 1.7976931348623157e308;
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        var e = r(A)
          , t = e % 1;
        return e === e ? t ? e - t : e : 0
    }
    var r = t(895);
    A.exports = n
}
, function(A, e, t) {
    function n(A) {
        if ("number" == typeof A)
            return A;
        if (i(A))
            return a;
        if (o(A)) {
            var e = r(A.valueOf) ? A.valueOf() : A;
            A = o(e) ? e + "" : e
        }
        if ("string" != typeof A)
            return 0 === A ? A : +A;
        A = A.replace(u, "");
        var t = c.test(A);
        return t || s.test(A) ? p(A.slice(2), t ? 2 : 8) : l.test(A) ? a : +A
    }
    var r = t(59)
      , o = t(35)
      , i = t(93)
      , a = NaN
      , u = /^\s+|\s+$/g
      , l = /^[-+]0x[0-9a-f]+$/i
      , c = /^0b[01]+$/i
      , s = /^0o[0-7]+$/i
      , p = parseInt;
    A.exports = n
}
, function(A, e, t) {
    var n = t(847)
      , r = t(94)
      , o = n(r);
    A.exports = o
}
, function(A, e, t) {
    function n(A) {
        return null == A ? "" : r(A)
    }
    var r = t(840);
    A.exports = n
}
, function(A, e, t) {
    var n = t(825)
      , r = t(841)
      , o = t(335)
      , i = t(893)
      , a = i(function(A) {
        return r(n(A, 1, o, !0))
    });
    A.exports = a
}
, function(A, e, t, n) {
    var r = t(n)
      , o = r.Symbol;
    A.exports = o
}
, function(A, e, t, n) {
    "use strict";
    var r = t(n)
      , o = (t(5),
    function(A) {
        var e = this;
        if (e.instancePool.length) {
            var t = e.instancePool.pop();
            return e.call(t, A),
            t
        }
        return new e(A)
    }
    )
      , i = function(A, e) {
        var t = this;
        if (t.instancePool.length) {
            var n = t.instancePool.pop();
            return t.call(n, A, e),
            n
        }
        return new t(A,e)
    }
      , a = function(A, e, t) {
        var n = this;
        if (n.instancePool.length) {
            var r = n.instancePool.pop();
            return n.call(r, A, e, t),
            r
        }
        return new n(A,e,t)
    }
      , u = function(A, e, t, n) {
        var r = this;
        if (r.instancePool.length) {
            var o = r.instancePool.pop();
            return r.call(o, A, e, t, n),
            o
        }
        return new r(A,e,t,n)
    }
      , l = function(A) {
        var e = this;
        A instanceof e ? void 0 : r("25"),
        A.destructor(),
        e.instancePool.length < e.poolSize && e.instancePool.push(A)
    }
      , c = 10
      , s = o
      , p = function(A, e) {
        var t = A;
        return t.instancePool = [],
        t.getPooled = e || s,
        t.poolSize || (t.poolSize = c),
        t.release = l,
        t
    }
      , f = {
        addPoolingTo: p,
        oneArgumentPooler: o,
        twoArgumentPooler: i,
        threeArgumentPooler: a,
        fourArgumentPooler: u
    };
    A.exports = f
}
]));
//# sourceMappingURL=main.cb367bed.js.map
